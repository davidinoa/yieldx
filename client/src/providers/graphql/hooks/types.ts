/* eslint-disable camelcase */
/// <amd-module name="@bondhouse/graphql/types" />
export type Maybe<T> = T | null;
export type Exact<
  T extends {
    [key: string]: unknown;
  }
> = {
  [K in keyof T]: T[K];
};
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
  /** The JSON scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf). */
  JSON: any;
};
export interface Query {
  __typename?: "Query";
  /**
   * Get Account Statements
   *
   * Equivalent to Apex Accounts GET /accounts/{accountNumber}/statements
   */
  apexAccountsGetAccountStatements?: Maybe<GetStatementsResponse>;
  /**
   * Currently only one ACH relationship is allowed at Apex at at time, thus can get by accountNumber.
   *
   * Equivalent to Apex Accounts GET /accounts/{accountNumber}/ach-relationships
   */
  apexAccountsGetAchRelationship?: Maybe<GetAchRelationshipResponse>;
  /**
   * Get Apex Account
   *
   * Equivalent to Apex Accounts GET /accounts/{accountNumber}
   */
  apexAccountsGetApexAccount?: Maybe<GetApexAccountResponse>;
  /**
   * Get Apex Account Balance
   *
   * Equivalent to Apex Accounts GET /accounts/{accountNumber}/balance
   */
  apexAccountsGetApexAccountBalance?: Maybe<GetApexAccountBalanceResponse>;
  /**
   * Get Apex Account Metadata
   *
   * Equivalent to Apex Accounts GET /accounts/{accountNumber}/metadata
   */
  apexAccountsGetApexAccountMetadata?: Maybe<GetApexAccountMetadataResponse>;
  /**
   * Get Apex Transfer
   *
   * Equivalent to Apex Accounts GET /accounts/{accountNumber}/transfers/{transferNumber}
   */
  apexAccountsGetApexTransfer?: Maybe<GetApexTransferResponse>;
  /**
   * Get Apex Transfers
   *
   * Equivalent to Apex Accounts GET /accounts/{accountNumber}/transfers
   */
  apexAccountsGetApexTransfers?: Maybe<GetApexTransfersResponse>;
  /**
   * Called the Entity Corporate Cash Account Agreement Form at Apex
   *
   * Equivalent to Apex Accounts GET /account-forms/corporate-agreement-form/{formId}
   */
  apexAccountsGetCorporateAgreementForm?: Maybe<
    GetCorporateAgreementFormResponse
  >;
  /**
   * Called the Entity New Direct Account RIA Form at Apex
   *
   * Equivalent to Apex Accounts GET /account-forms/entity-account-form/{formId}
   */
  apexAccountsGetEntityAccountForm?: Maybe<GetEntityAccountFormResponse>;
  /**
   * Called the Entity Due Diligence Form at Apex
   *
   * Equivalent to Apex Accounts GET /account-forms/entity-due-diligence-form/{formId}
   */
  apexAccountsGetEntityDueDiligenceForm?: Maybe<
    GetEntityDueDiligenceFormResponse
  >;
  /**
   * Called the New Direct Account Form at Apex
   *
   * Equivalent to Apex Accounts GET /account-forms/individual-account-form/{formId}
   */
  apexAccountsGetIndividualAccountForm?: Maybe<
    GetIndividualAccountFormResponse
  >;
  /**
   * Called the Interested Party Request Form at Apex
   *
   * Equivalent to Apex Accounts GET /account-forms/interested-party-form/{formId}
   */
  apexAccountsGetInterestedPartyForm?: Maybe<GetInterestedPartyFormResponse>;
  /**
   * Called the Entity LLC Agreement Form at Apex
   *
   * Equivalent to Apex Accounts GET /account-forms/llc-agreement-form/{formId}
   */
  apexAccountsGetLlcAgreementForm?: Maybe<GetLlcAgreementFormResponse>;
  /**
   * Get Open Sketches
   *
   * Equivalent to Apex Accounts GET /sketches
   */
  apexAccountsGetOpenSketches?: Maybe<GetOpenSketchesResponse>;
  /**
   * Get Trade Confirms
   *
   * Equivalent to Apex Accounts GET /accounts/{accountNumber}/trade-confirms
   */
  apexAccountsGetTradeConfirms?: Maybe<GetTradeConfirmsResponse>;
  /**
   * Called the Trusted Contact Form at Apex
   *
   * Equivalent to Apex Accounts GET /account-forms/trusted-contact-form/{formId}
   */
  apexAccountsGetTrustedContactForm?: Maybe<GetTrustedContactFormResponse>;
  /**
   * Get Apex Account
   *
   * Equivalent to Apex Service GET /accounts/{id}
   */
  apexGetAccount?: Maybe<InvestorAccount>;
  /**
   * Get Apex Account Balance
   *
   * Equivalent to Apex Service GET /accounts/{id}/balance
   */
  apexGetAccountBalance?: Maybe<AccountBalance>;
  /**
   * Get Apex Account By Account Number
   *
   * Equivalent to Apex Service GET /internal/accounts/_getByAccountNumber
   */
  apexGetAccountByAccountNumber?: Maybe<GetApexAccountByAccountNumberResponse>;
  /**
   * This function will return apex account for an Investor
   *
   *
   * Equivalent to Apex Service GET /investors/{investorId}/account
   */
  apexGetAccountByInvestorId?: Maybe<InvestorAccount>;
  /**
   * Get Account Statements
   *
   * Equivalent to Apex Service GET /accounts/{id}/statements
   */
  apexGetAccountStatements?: Maybe<GetStatementResponse>;
  /**
   * Get Account Statements For Investor
   *
   * Equivalent to Apex Service GET /investors/{investorId}/statements
   */
  apexGetAccountStatementsForInvestor?: Maybe<GetStatementResponse>;
  /**
   * Get Apex ACH Relationship
   *
   * Equivalent to Apex Service GET /accounts/{accountId}/ach-relationships/{id}
   */
  apexGetAchrelationship?: Maybe<GetApexAchRelationshipResponse>;
  /**
   * Get Apex ACH Relationships
   *
   * Equivalent to Apex Service GET /accounts/{id}/ach-relationships
   */
  apexGetAchrelationships?: Maybe<GetApexAchRelationshipsResponse>;
  /**
   * Get Trade Confirm
   *
   * Equivalent to Apex Service GET /accounts/{id}/tradeconfirm
   */
  apexGetTradeConfirm?: Maybe<GetTradeConfirmResponse>;
  /**
   * Get Trade Confirm For Investor
   *
   * Equivalent to Apex Service GET /investors/{investorId}/tradeconfirm
   */
  apexGetTradeConfirmForInvestor?: Maybe<GetTradeConfirmResponse>;
  /**
   * Get Trade Confirms
   *
   * Equivalent to Apex Service GET /accounts/{id}/tradeconfirms
   */
  apexGetTradeConfirms?: Maybe<AccountTradeconfirms>;
  /**
   * Get Trade Confirms For Investor
   *
   * Equivalent to Apex Service GET /investors/{investorId}/tradeconfirms
   */
  apexGetTradeConfirmsForInvestor?: Maybe<AccountTradeconfirms>;
  /**
   * Get Apex Transfer
   *
   * Equivalent to Apex Service GET /accounts/{accountId}/transfers/{id}
   */
  apexGetTransfer?: Maybe<AccountTransfer>;
  /**
   * Get Apex Transfers
   *
   * Equivalent to Apex Service GET /accounts/{id}/transfers
   */
  apexGetTransfers?: Maybe<GetApexTransfersResponse2>;
  /**
   * Get Trade Postings
   *
   * Equivalent to Apex Trading GET /trade-posting/orders/{orderId}
   */
  apexTradingGetTradePostings?: Maybe<GetTradePostingsResponse>;
  /**
   * Get API Call Record
   *
   * Equivalent to API Manager GET /institutions/{institutionId}/api-call-records/{recordId}
   */
  apiManagerGetApicallRecord?: Maybe<GetApiCallRecordResponse>;
  /**
   * Get API Call Records
   *
   * Equivalent to API Manager GET /institutions/{institutionId}/api-call-records
   */
  apiManagerGetApicallRecords?: Maybe<GetApiCallRecordsResponse>;
  /**
   * Get Order Execution Logs
   *
   * Equivalent to API Manager GET /execution-logs/orders/{orderId}
   */
  apiManagerGetOrderExecutionLogs?: Maybe<GetExecutionLogsResponse>;
  /**
   * Get Portfolio Execution Logs
   *
   * Equivalent to API Manager GET /execution-logs/portfolios/{portfolioId}
   */
  apiManagerGetPortfolioExecutionLogs?: Maybe<GetExecutionLogsResponse>;
  /**
   * Get Trade Execution Logs
   *
   * Equivalent to API Manager GET /execution-logs/trades/{tradeId}
   */
  apiManagerGetTradeExecutionLogs?: Maybe<GetExecutionLogsResponse>;
  /**
   * Get Search Stack
   *
   * Equivalent to AWS Manager GET /search-stacks/{id}
   */
  awsManagerGetSearchStack?: Maybe<GetSearchStackResponse>;
  /**
   * Get Subscription
   *
   * Equivalent to AWS Manager GET /pubsub-stacks/subscription/{id}
   */
  awsManagerGetSubscription?: Maybe<GetSubscriptionResponse>;
  /**
   * Get Topic
   *
   * Equivalent to AWS Manager GET /pubsub-stacks/topic/{id}
   */
  awsManagerGetTopic?: Maybe<GetTopicResponse>;
  /**
   * Get Preferences
   *
   * Equivalent to BestFit GET /portfolios/{portfolioId}/preferences
   */
  bestFitGetPreferences?: Maybe<GetPreferencesResponse>;
  /**
   * Get all index bonds as of a given date
   *
   * Equivalent to Bondview GET /index/{date}
   */
  bondviewGetIndexBonds?: Maybe<GetIndexBondsResponse>;
  /**
   * Load the latest index bonds for current date. This runs as a scheduled daily service, so it should not be called
   * manually unless required.
   *
   *
   * Equivalent to Bondview GET /index/_load_all_bonds
   */
  bondviewLoadAllIndexBonds?: Maybe<LoadAllIndexBondsResponse>;
  /**
   * Download File
   *
   * Equivalent to File Management GET /files/{fileId}
   */
  fileManagementDownloadFile?: Maybe<DownloadFileResponse>;
  /**
   * List Files
   *
   * Equivalent to File Management GET /files/affiliated-resource/{affiliatedResource}/resources/{affiliatedResourceId}
   */
  fileManagementListFiles?: Maybe<ListFilesResponse>;
  /**
   * Authorize Request
   *
   * Equivalent to IAM GET /_authorize
   */
  iamAuthorizerequest?: Maybe<AuthorizeResponse>;
  /**
   * Get Current User
   *
   * Equivalent to IAM GET /users/current-user
   */
  iamGetCurrentUser?: Maybe<GetCurrentUserResponse>;
  /**
   * Get Institution
   *
   * Equivalent to IAM GET /institutions/{institutionId}
   */
  iamGetInstitution?: Maybe<GetInstitutionResponse>;
  /**
   * Returns default inventories for institutions
   *
   * Equivalent to IAM GET /institutions/{institutionId}/inventories
   */
  iamGetInstitutionInventoryMapping?: Maybe<GetInventoryMappingResponse>;
  /**
   * Get Institution Investor Mapping
   *
   * Equivalent to IAM GET /institutions/investors/{investorId}
   */
  iamGetInstitutionInvestorMapping?: Maybe<GetInvestorMappingResponse>;
  /**
   * Get Institution Portfolio Mapping
   *
   * Equivalent to IAM GET /institutions/portfolios/{portfolioId}
   */
  iamGetInstitutionPortfolioMapping?: Maybe<GetPortfolioMappingResponse>;
  /**
   * Get Institution Proposal Mapping
   *
   * Equivalent to IAM GET /institutions/proposals/{proposalId}
   */
  iamGetInstitutionProposalMapping?: Maybe<GetProposalMappingResponse>;
  /**
   * Get Institution Roles Mapping
   *
   * Equivalent to IAM GET /institutions/{institutionId}/roles
   */
  iamGetInstitutionRolesMapping?: Maybe<GetRolesMappingResponse>;
  /**
   * Get Institution User Mapping
   *
   * Equivalent to IAM GET /institutions/users/{userId}
   */
  iamGetInstitutionUserMapping?: Maybe<GetUserMappingResponse>;
  /**
   * Get Institution User Mapping By Email
   *
   * Equivalent to IAM GET /institutions/users/email/{email}
   */
  iamGetInstitutionUserMappingByEmail?: Maybe<GetUserMappingResponse>;
  /**
   * Retrieves the password reset ticket by the ticketId. Successful operation
   * indicates thtat the ticket is found and valid. If the request fails then a new ticket must be created
   *
   *
   * Equivalent to IAM GET /tickets/password-resets/{ticketId}
   */
  iamGetPasswordResetTicket?: Maybe<GetPasswordResetTicketResponse>;
  /**
   * Get a Role by its identifier
   *
   * Equivalent to IAM GET /roles/{id}
   */
  iamGetRole?: Maybe<GetRoleResponse>;
  /**
   * Get a RoleBinding by id
   *
   * Equivalent to IAM GET /role-bindings/{id}
   */
  iamGetRoleBinding?: Maybe<GetRoleBindingResponse>;
  /**
   * Get all RoleBindings that are bound to the given role
   *
   * Equivalent to IAM GET /roles/{roleId}/role-bindings
   */
  iamGetRoleBindings?: Maybe<GetRoleBindingsResponse>;
  /**
   * Gets all the role bindings that a user (subject) is bound to. This is important to figure out what resources a user is
   * entitled to by downstream applications that wants to display a list of the items explicitly shared with an user.
   *
   *
   * Equivalent to IAM GET /subs/{sub}/role-bindings
   */
  iamGetRoleBindingsForSubject?: Maybe<GetRoleBindingsForSubjectResponse>;
  /**
   * Gets all the roles that a user (subject) is bound to. This is important to figure out what resources a user is
   * entitled to by downstream applications that wants to display a list of the items explicitly shared with an user.
   *
   *
   * Equivalent to IAM GET /subs/{sub}/roles
   */
  iamGetRolesForSubject?: Maybe<GetRolesForSubjectResponse>;
  /**
   * Get User
   *
   * Equivalent to IAM GET /users/{id}
   */
  iamGetUser?: Maybe<GetUserResponse>;
  /**
   * Get User Invite
   *
   * Equivalent to IAM GET /users/invites/email/{email}
   */
  iamGetUserInvite?: Maybe<GetUserInviteResponse>;
  /**
   * Get User Invite List
   *
   * Equivalent to IAM GET /users/invites/institution/{institutionId}
   */
  iamGetUserInviteList?: Maybe<GetUserInviteListResponse>;
  /**
   * Validate User Invite
   *
   * Equivalent to IAM GET /users/invites/email/{email}/_validate
   */
  iamValidateUserInvite?: Maybe<ValidateUserInviteResponse>;
  /**
   * Provides all open bids and offers for a given CUSIP
   *
   * Equivalent to ICE GET /cusips/{cusip}
   */
  iceDataGetByCusip?: Maybe<GetByCusipResponse>;
  /**
   * Generate comparisons between a portfolio analyzer analysis and the universe average
   *
   *
   * Equivalent to Income Portfolios POST /proposals/_comparisons
   */
  incomePortfoliosGetComparisons?: Maybe<GetComparisonsResponse>;
  /**
   * Retrieve minimum and maximum achievable risk on a target risk portfolio given the provided whitelist, or the
   * default whitelist if not provided
   *
   *
   * Equivalent to Income Portfolios POST /proposals/_min_max_risk
   */
  incomePortfoliosGetMinMaxRisk?: Maybe<GetMinMaxRiskResponse>;
  /**
   * Retrieve minimum and maximum achievable yield on a target yield portfolio given the provided whitelist, or the
   * default whitelist if not provided
   *
   *
   * Equivalent to Income Portfolios POST /proposals/_min_max_yield
   */
  incomePortfoliosGetMinMaxYield?: Maybe<GetMinMaxYieldResponse>;
  /**
   * Retrieves the portfolio mappings
   *
   * Equivalent to Income Portfolios GET /portfolio-mappings/{portfolioId}
   */
  incomePortfoliosGetPortfolioMapping?: Maybe<GetPortfolioMappingResponse2>;
  /**
   * Gets a proposal
   *
   *
   * Equivalent to Income Portfolios GET /proposals/{proposalId}
   */
  incomePortfoliosGetProposal?: Maybe<GetProposalResponse>;
  /**
   * Retrieves the analytics, holdings and cash balance of an investment portfolio that YieldX manages for you.
   * You can only call this operation after accepting a proposal via [AcceptProposal](#operation/AcceptProposal).
   *
   *
   * Equivalent to Income Portfolio as a Service GET /{institution}/portfolios/{portfolioId}
   */
  inpaasGetPortfolio?: Maybe<GetPortfolioResponse>;
  /**
   * Retrieves the portfolio mappings
   *
   * Equivalent to Income Portfolio as a Service GET /{institution}/portfolio-mappings/{portfolioId}
   */
  inpaasGetPortfolioMapping?: Maybe<GetPortfolioMappingResponse>;
  /**
   * Gets a proposal
   *
   *
   * Equivalent to Income Portfolio as a Service GET /{institution}/proposals/{proposalId}
   */
  inpaasGetProposal?: Maybe<GetProposalResponse2>;
  /**
   * Download Files
   *
   * Equivalent to Investor Service GET /internal/files/{fileId}
   */
  investorDownloadFile?: Maybe<DownloadFileResponse>;
  /**
   * Get Investor
   *
   * Equivalent to Investor Service GET /investors/{investorId}
   */
  investorGet?: Maybe<GetInvestorResponse>;
  /**
   * Get Delivery Instructions By Investor Id
   *
   * Equivalent to Investor Service GET /investors/{investorId}/delivery-instructions
   */
  investorGetDeliveryInstructionsById?: Maybe<
    GetDeliveryInstructionsByInvestorIdResponse
  >;
  /**
   * Get Linked Bank Account
   *
   * Equivalent to Investor Service GET /investors/{investorId}/linked-bank-accounts/{linkedBankAccountId}
   */
  investorGetLinkedBankAccount?: Maybe<GetLinkedBankAccountResponse>;
  /**
   * Get Linked Bank Account Balance
   *
   * Equivalent to Investor Service GET /investors/{investorId}/linked-bank-accounts/{linkedBankAccountId}/balance
   */
  investorGetLinkedBankAccountBalance?: Maybe<
    GetLinkedBankAccountBalanceResponse
  >;
  /**
   * Get Linked Bank Accounts
   *
   * Equivalent to Investor Service GET /investors/{investorId}/linked-bank-accounts
   */
  investorGetLinkedBankAccounts?: Maybe<GetLinkedBankAccountsResponse>;
  /**
   * Get Portfolio Delivery Instruction
   *
   * Equivalent to Investor Service GET /portfolios/{portfolioId}/delivery-instruction
   */
  investorGetPortfolioDeliveryInstruction?: Maybe<
    GetPortfolioDeliveryInstructionResponse
  >;
  /**
   * Get Transfer
   *
   * Equivalent to Investor Service GET /investors/{investorId}/transfers/{transferId}
   */
  investorGetTransfer?: Maybe<GetTransferResponse>;
  /**
   * Get Transfers
   *
   * Equivalent to Investor Service GET /investors/{investorId}/transfers
   */
  investorGetTransfers?: Maybe<GetTransfersResponse>;
  /**
   * Retrieves all the investors of the user
   *
   * Equivalent to Investor Service GET /investors
   */
  investorGets?: Maybe<GetInvestorsResponse>;
  /**
   * This API sends encrypted data so can only be accessed by internal applications. It is an internal version of the
   * Get Investor API.
   *
   *
   * Equivalent to Investor Service GET /internal/investors/{investorId}/encrypted
   */
  investorInteralGet?: Maybe<InternalGetInvestorResponse>;
  /**
   * This API sends encrypted data so can only be accessed by internal applications. It is an internal version of the
   * Get Linked Bank Account API.
   *
   *
   * Equivalent to Investor Service GET /internal/investors/{investorId}/linked-bank-accounts/{linkedBankAccountId}/encrypted
   */
  investorInternalGetLinkedBankAccount?: Maybe<
    InternalGetLinkedBankAccountResponse
  >;
  /**
   * Get Linked Bank Account
   *
   * Equivalent to Link Bank Account Service GET /account-number/{accountNumber}/linked-bank-accounts/{linkedBankAccountId}
   */
  linkBankAccountGetLinkedBankAccount?: Maybe<GetLinkedBankAccountResponse>;
  /**
   * Get Linked Bank Account Balance
   *
   * Equivalent to Link Bank Account Service GET /account-number/{accountNumber}/linked-bank-accounts/{linkedBankAccountId}/_get-balance
   */
  linkBankAccountGetLinkedBankAccountBalance?: Maybe<
    GetLinkedBankAccountBalanceResponse
  >;
  /**
   * Get Linked Bank Accounts
   *
   * Equivalent to Link Bank Account Service GET /account-number/{accountNumber}/linked-bank-accounts
   */
  linkBankAccountGetLinkedBankAccounts?: Maybe<GetLinkedBankAccountsResponse>;
  /**
   * This API sends encrypted data, so it can only be accessed by internal applications. It is an internal version of the
   * Get Linked Bank Account API.
   *
   *
   * Equivalent to Link Bank Account Service GET /internal/linked-bank-accounts/{linkedBankAccountId}/encrypted
   */
  linkBankAccountInternalGetLinkedBankAccount?: Maybe<
    InternalGetLinkedBankAccountResponse
  >;
  /**
   * Get Order
   *
   * Equivalent to Order Service GET /portfolios/{portfolioId}/orders/{id}
   */
  orderManagementGetOrder?: Maybe<GetOrderResponse>;
  /**
   * Get Orders
   *
   * Equivalent to Order Service GET /portfolios/{portfolioId}/orders
   */
  orderManagementGetOrders?: Maybe<GetOrdersResponse>;
  /**
   * Get Cash Balance
   *
   * Equivalent to Position Management Service GET /accounts/{accountNumber}/balance
   */
  positionManagementGetCashBalance?: Maybe<GetCashBalanceResponse>;
  /**
   * Get External Portfolio
   *
   * Equivalent to Position Management Service GET /external-portfolios/{id}
   */
  positionManagementGetExternalPortfolio?: Maybe<GetExternalPortfolioResponse>;
  /**
   * Retieves all external portfolios of the user
   *
   * Equivalent to Position Management Service GET /external-portfolios
   */
  positionManagementGetExternalPortfolios?: Maybe<
    GetExternalPortfoliosResponse
  >;
  /**
   * Get Portfolio
   *
   * Equivalent to Position Management Service GET /portfolios/{id}
   */
  positionManagementGetPortfolio?: Maybe<GetPortfolioResponse2>;
  /**
   * Retrieves all the portfolios of the user
   *
   * Equivalent to Position Management Service GET /portfolios
   */
  positionManagementGetPortfolios?: Maybe<GetPortfoliosResponse>;
  /**
   * Get Portfolios By Account
   *
   * Equivalent to Position Management Service GET /accounts/{accountNumber}/portfolios
   */
  positionManagementGetPortfoliosByAccount?: Maybe<
    GetPortfoliosByAccountResponse
  >;
  /**
   * Get Total Positions By Account
   *
   * Equivalent to Position Management Service GET /accounts/{accountNumber}/positions
   */
  positionManagementGetPositionsByAccount?: Maybe<
    GetPositionsByAccountResponse
  >;
  /**
   * Get Temporary Portfolio
   *
   * Equivalent to Position Management Service GET /temporary-portfolios/{id}
   */
  positionManagementGetTemporaryPortfolio?: Maybe<
    GetTemporaryPortfolioResponse
  >;
  /**
   * Get Trade
   *
   * Equivalent to Position Management Service GET /portfolios/{portfolioId}/trades/{id}
   */
  positionManagementGetTrade?: Maybe<GetTradeResponse>;
  /**
   * Get Trades
   *
   * Equivalent to Position Management Service GET /portfolios/{portfolioId}/trades
   */
  positionManagementGetTrades?: Maybe<GetTradesResponse>;
  /**
   * Get Trades By Account
   *
   * Equivalent to Position Management Service GET /accounts/{accountNumber}/trades
   */
  positionManagementGetTradesByAccount?: Maybe<GetTradesByAccountResponse>;
  /**
   * Get Transfer
   *
   * Equivalent to Position Management Service GET /accounts/{accountNumber}/transfers/{transferId}
   */
  positionManagementGetTransfer?: Maybe<GetTransferResponse>;
  /**
   * Get Transfers
   *
   * Equivalent to Position Management Service GET /accounts/{accountNumber}/transfers
   */
  positionManagementGetTransfers?: Maybe<GetTransfersResponse>;
  /**
   * Price Asset
   *
   * Equivalent to Prices POST /_price-asset
   */
  pricesPriceAsset?: Maybe<PriceAssetResponse>;
  /**
   * Analyze Portfolio
   *
   * Equivalent to Rover Portfolio Analyzer POST /_analyze-portfolio
   */
  roverPortfolioAnalyzerAnalyzePortfolio?: Maybe<AnalyzePortfolioResponse>;
  /**
   * Calculate intraday portfolio return
   *
   * Equivalent to Rover Portfolio Analyzer POST /_calculate-intraday-return
   */
  roverPortfolioAnalyzerCalculateIntradayReturn?: Maybe<
    CalculateIntradayReturnResponse
  >;
  /**
   * Calculate historical portfolio returns
   *
   * Equivalent to Rover Portfolio Analyzer POST /_calculate-returns
   */
  roverPortfolioAnalyzerCalculateReturns?: Maybe<CalculateReturnsResponse>;
  /**
   * Gets an Analysis saved via the AnalyzePortfolio operation
   *
   *
   * Equivalent to Rover Portfolio Analyzer GET /analyses/{analysisId}
   */
  roverPortfolioAnalyzerGetAnalysis?: Maybe<GetAnalysisResponse>;
  /**
   * Project cash flows for a portfolio
   *
   * Equivalent to Rover Portfolio Analyzer POST /_project-cash-flows
   */
  roverPortfolioAnalyzerProjectCashFlows?: Maybe<ProjectCashFlowsResponse>;
  /**
   * Emulates a shopping cart for users to individually add assets before "checkout". Upon which point
   * the assets they bought turns into an portfolio and a list of orders (after going through the onboarding process)
   *
   * This shopping cart is the persistent state that enables a user to browse various assets offered by the platform
   * (not all presented on the same UI view) and keep track of what he intended to buy into his new portfolio.
   *
   *
   * Equivalent to Rover Preferences GET /users/{userId}/cart
   */
  roverPreferencesGetCart?: Maybe<GetCartResponse>;
  /**
   * Get Preferences
   *
   * Equivalent to Rover Preferences GET /portfolios/{portfolioId}/preferences
   */
  roverPreferencesGetPreferences?: Maybe<GetPreferencesResponse2>;
  /**
   * Watch list enables users to add assets without purchasing them. Watch list unlike shopping carts do not
   * and should not be reset after purchase
   *
   * Also unique to watchlist is that items do not have a quantity, but rather just an assetId
   *
   *
   * Equivalent to Rover Preferences GET /users/{userId}/watchlist
   */
  roverPreferencesGetWatchList?: Maybe<GetWatchListResponse>;
  /**
   * Get All Factors
   *
   * Equivalent to Rover Risk Model GET /factors
   */
  roverRiskModelGetAllFactors?: Maybe<Array<Maybe<Factor>>>;
  /**
   * Get Asset Risk
   *
   * Equivalent to Rover Risk Model GET /assets/{assetId}/risk
   */
  roverRiskModelGetAssetRisk?: Maybe<GetAssetRiskResponse>;
  /**
   * Get Factor
   *
   * Equivalent to Rover Risk Model GET /factors/{id}
   */
  roverRiskModelGetFactor?: Maybe<Factor>;
  /**
   * Get Factor Time Series
   *
   * Equivalent to Rover Risk Model GET /factors/{id}/time-series
   */
  roverRiskModelGetFactorTimeSeries?: Maybe<FactorTimeSeries>;
  /**
   * Get Asset Scores
   *
   * Equivalent to Rover Score GET /assets/{assetId}/scores
   */
  roverScoreGetAssetScores?: Maybe<GetAssetScoresResponse>;
  /**
   * Get metadata of all inventories
   *
   * Equivalent to Rover Universe GET /institutions/{institutionId}/inventories
   */
  roverUniverseGetAllInventories?: Maybe<GetAllInventoriesResponse>;
  /**
   * Get Asset
   *
   * Equivalent to Rover Universe GET /assets/{id}
   */
  roverUniverseGetAsset?: Maybe<GetAssetResponse>;
  /**
   * Get Asset By External Id
   *
   * Equivalent to Rover Universe GET /external-id-mappings/{sourceName}/{externalId}/asset
   */
  roverUniverseGetAssetByExternalId?: Maybe<GetAssetByExternalIdResponse>;
  /**
   * Get Asset Time Series
   *
   * Equivalent to Rover Universe GET /assets/{id}/{field}/time-series
   */
  roverUniverseGetAssetTimeSeries?: Maybe<GetAssetTimeSeriesResponse>;
  /**
   * Get Assets
   *
   * Equivalent to Rover Universe POST /assets/_get-assets
   */
  roverUniverseGetAssets?: Maybe<GetAssetsResponse>;
  /**
   * Get External Id Mapping
   *
   * Equivalent to Rover Universe GET /external-id-mappings/{sourceName}/{externalId}
   */
  roverUniverseGetExternalIdMapping?: Maybe<GetExternalIdMappingResponse>;
  /**
   * Get the specified inventory
   *
   * Equivalent to Rover Universe GET /institutions/{institutionId}/inventories/{id}
   */
  roverUniverseGetInventory?: Maybe<GetInventoryResponse>;
  /**
   * Get Issue
   *
   * Equivalent to Rover Universe GET /issues/{id}
   */
  roverUniverseGetIssue?: Maybe<GetIssueResponse>;
  /**
   * Get Issuer
   *
   * Equivalent to Rover Universe GET /issuers/{id}
   */
  roverUniverseGetIssuer?: Maybe<GetIssuerResponse>;
  /**
   * ListBestFitWhitelistCandidates
   *
   * Equivalent to Rover Whitelist GET /whitelists/_list-best-fit-whitelist-candidates
   */
  roverWhitelistListBestFitWhitelistCandidates?: Maybe<
    ListBestFitWhitelistCandidatesResponse
  >;
  /**
   * Returns trafix heartbeat
   *
   * Equivalent to Trafix GET /heartbeat
   */
  trafixGetHeartbeat?: Maybe<GetTrafixHeartbeatResponse>;
  /**
   * Returns the trafix order of OMS order
   *
   * Equivalent to Trafix GET /orders/{orderId}
   */
  trafixGetOrder?: Maybe<GetTrafixOrderResponse>;
  /**
   * Returns trafix trade of PMS trade
   *
   * Equivalent to Trafix GET /trades/{tradeId}
   */
  trafixGetTrade?: Maybe<GetTrafixTradeResponse>;
  /**
   * Returns trafix trades of OMS order
   *
   * Equivalent to Trafix GET /orders/{orderId}/trades
   */
  trafixGetTrades?: Maybe<GetTrafixTradesResponse>;
}
export type QueryApexAccountsGetAccountStatementsArgs = {
  accountNumber: Scalars["String"];
  documentType?: Maybe<Scalars["String"]>;
  endMonth: Scalars["String"];
  endYear: Scalars["String"];
  startMonth: Scalars["String"];
  startYear: Scalars["String"];
};
export type QueryApexAccountsGetAchRelationshipArgs = {
  accountNumber: Scalars["String"];
};
export type QueryApexAccountsGetApexAccountArgs = {
  accountNumber: Scalars["String"];
};
export type QueryApexAccountsGetApexAccountBalanceArgs = {
  accountNumber: Scalars["String"];
};
export type QueryApexAccountsGetApexAccountMetadataArgs = {
  accountNumber: Scalars["String"];
};
export type QueryApexAccountsGetApexTransferArgs = {
  accountNumber: Scalars["String"];
  transferNumber: Scalars["String"];
};
export type QueryApexAccountsGetApexTransfersArgs = {
  accountNumber: Scalars["String"];
};
export type QueryApexAccountsGetCorporateAgreementFormArgs = {
  formId: Scalars["String"];
};
export type QueryApexAccountsGetEntityAccountFormArgs = {
  formId: Scalars["String"];
};
export type QueryApexAccountsGetEntityDueDiligenceFormArgs = {
  formId: Scalars["String"];
};
export type QueryApexAccountsGetIndividualAccountFormArgs = {
  formId: Scalars["String"];
};
export type QueryApexAccountsGetInterestedPartyFormArgs = {
  formId: Scalars["String"];
};
export type QueryApexAccountsGetLlcAgreementFormArgs = {
  formId: Scalars["String"];
};
export type QueryApexAccountsGetTradeConfirmsArgs = {
  accountNumber: Scalars["String"];
  confirmEndDate: Scalars["String"];
  confirmStartDate: Scalars["String"];
};
export type QueryApexAccountsGetTrustedContactFormArgs = {
  formId: Scalars["String"];
};
export type QueryApexGetAccountArgs = {
  id: Scalars["String"];
};
export type QueryApexGetAccountBalanceArgs = {
  id: Scalars["String"];
};
export type QueryApexGetAccountByAccountNumberArgs = {
  apexAccountNumber: Scalars["String"];
};
export type QueryApexGetAccountByInvestorIdArgs = {
  investorId: Scalars["String"];
};
export type QueryApexGetAccountStatementsArgs = {
  documentType?: Maybe<Scalars["String"]>;
  endMonth: Scalars["String"];
  endYear: Scalars["String"];
  id: Scalars["String"];
  startMonth: Scalars["String"];
  startYear: Scalars["String"];
};
export type QueryApexGetAccountStatementsForInvestorArgs = {
  documentType?: Maybe<Scalars["String"]>;
  endMonth: Scalars["String"];
  endYear: Scalars["String"];
  investorId: Scalars["String"];
  startMonth: Scalars["String"];
  startYear: Scalars["String"];
};
export type QueryApexGetAchrelationshipArgs = {
  accountId: Scalars["String"];
  id: Scalars["String"];
};
export type QueryApexGetAchrelationshipsArgs = {
  id: Scalars["String"];
};
export type QueryApexGetTradeConfirmArgs = {
  confirmDate: Scalars["String"];
  id: Scalars["String"];
};
export type QueryApexGetTradeConfirmForInvestorArgs = {
  confirmDate: Scalars["String"];
  investorId: Scalars["String"];
};
export type QueryApexGetTradeConfirmsArgs = {
  confirmEndDate: Scalars["String"];
  confirmStartDate: Scalars["String"];
  id: Scalars["String"];
};
export type QueryApexGetTradeConfirmsForInvestorArgs = {
  confirmEndDate: Scalars["String"];
  confirmStartDate: Scalars["String"];
  investorId: Scalars["String"];
};
export type QueryApexGetTransferArgs = {
  accountId: Scalars["String"];
  id: Scalars["String"];
};
export type QueryApexGetTransfersArgs = {
  id: Scalars["String"];
};
export type QueryApexTradingGetTradePostingsArgs = {
  orderId: Scalars["String"];
};
export type QueryApiManagerGetApicallRecordArgs = {
  institutionId: Scalars["String"];
  recordId: Scalars["String"];
};
export type QueryApiManagerGetApicallRecordsArgs = {
  institutionId: Scalars["String"];
};
export type QueryApiManagerGetOrderExecutionLogsArgs = {
  orderId: Scalars["String"];
};
export type QueryApiManagerGetPortfolioExecutionLogsArgs = {
  portfolioId: Scalars["String"];
};
export type QueryApiManagerGetTradeExecutionLogsArgs = {
  tradeId: Scalars["String"];
};
export type QueryAwsManagerGetSearchStackArgs = {
  id: Scalars["String"];
};
export type QueryAwsManagerGetSubscriptionArgs = {
  id: Scalars["String"];
};
export type QueryAwsManagerGetTopicArgs = {
  id: Scalars["String"];
};
export type QueryBestFitGetPreferencesArgs = {
  portfolioId: Scalars["String"];
};
export type QueryBondviewGetIndexBondsArgs = {
  date: Scalars["String"];
};
export type QueryFileManagementDownloadFileArgs = {
  fileId: Scalars["String"];
};
export type QueryFileManagementListFilesArgs = {
  affiliatedResource: AffiliatedResource;
  affiliatedResourceId: Scalars["String"];
};
export type QueryIamGetInstitutionArgs = {
  institutionId: Scalars["String"];
};
export type QueryIamGetInstitutionInventoryMappingArgs = {
  institutionId: Scalars["String"];
};
export type QueryIamGetInstitutionInvestorMappingArgs = {
  investorId: Scalars["String"];
};
export type QueryIamGetInstitutionPortfolioMappingArgs = {
  portfolioId: Scalars["String"];
};
export type QueryIamGetInstitutionProposalMappingArgs = {
  proposalId: Scalars["String"];
};
export type QueryIamGetInstitutionRolesMappingArgs = {
  institutionId: Scalars["String"];
};
export type QueryIamGetInstitutionUserMappingArgs = {
  userId: Scalars["String"];
};
export type QueryIamGetInstitutionUserMappingByEmailArgs = {
  email: Scalars["String"];
};
export type QueryIamGetPasswordResetTicketArgs = {
  ticketId: Scalars["String"];
};
export type QueryIamGetRoleArgs = {
  id: Scalars["String"];
};
export type QueryIamGetRoleBindingArgs = {
  id: Scalars["String"];
};
export type QueryIamGetRoleBindingsArgs = {
  roleId: Scalars["String"];
};
export type QueryIamGetRoleBindingsForSubjectArgs = {
  sub: Scalars["String"];
};
export type QueryIamGetRolesForSubjectArgs = {
  sub: Scalars["String"];
};
export type QueryIamGetUserArgs = {
  id: Scalars["String"];
};
export type QueryIamGetUserInviteArgs = {
  email: Scalars["String"];
};
export type QueryIamGetUserInviteListArgs = {
  institutionId: Scalars["String"];
};
export type QueryIamValidateUserInviteArgs = {
  email: Scalars["String"];
  state: Scalars["String"];
};
export type QueryIceDataGetByCusipArgs = {
  cusip: Scalars["String"];
  endDate?: Maybe<Scalars["String"]>;
  includeDeleted?: Maybe<Scalars["Boolean"]>;
  startDate?: Maybe<Scalars["String"]>;
};
export type QueryIncomePortfoliosGetComparisonsArgs = {
  getComparisonsRequestInput?: Maybe<GetComparisonsRequestInput>;
};
export type QueryIncomePortfoliosGetMinMaxRiskArgs = {
  getMinMaxRiskRequestInput?: Maybe<GetMinMaxRiskRequestInput>;
};
export type QueryIncomePortfoliosGetMinMaxYieldArgs = {
  getMinMaxYieldRequestInput?: Maybe<GetMinMaxYieldRequestInput>;
};
export type QueryIncomePortfoliosGetPortfolioMappingArgs = {
  portfolioId: Scalars["String"];
};
export type QueryIncomePortfoliosGetProposalArgs = {
  proposalId: Scalars["String"];
};
export type QueryInpaasGetPortfolioArgs = {
  institution: Scalars["String"];
  portfolioId: Scalars["String"];
};
export type QueryInpaasGetPortfolioMappingArgs = {
  institution: Scalars["String"];
  portfolioId: Scalars["String"];
};
export type QueryInpaasGetProposalArgs = {
  institution: Scalars["String"];
  proposalId: Scalars["String"];
};
export type QueryInvestorDownloadFileArgs = {
  fileId: Scalars["String"];
};
export type QueryInvestorGetArgs = {
  investorId: Scalars["String"];
};
export type QueryInvestorGetDeliveryInstructionsByIdArgs = {
  investorId: Scalars["String"];
};
export type QueryInvestorGetLinkedBankAccountArgs = {
  investorId: Scalars["String"];
  linkedBankAccountId: Scalars["String"];
};
export type QueryInvestorGetLinkedBankAccountBalanceArgs = {
  investorId: Scalars["String"];
  linkedBankAccountId: Scalars["String"];
};
export type QueryInvestorGetLinkedBankAccountsArgs = {
  investorId: Scalars["String"];
};
export type QueryInvestorGetPortfolioDeliveryInstructionArgs = {
  portfolioId: Scalars["String"];
};
export type QueryInvestorGetTransferArgs = {
  investorId: Scalars["String"];
  transferId: Scalars["String"];
};
export type QueryInvestorGetTransfersArgs = {
  investorId: Scalars["String"];
};
export type QueryInvestorInteralGetArgs = {
  investorId: Scalars["String"];
};
export type QueryInvestorInternalGetLinkedBankAccountArgs = {
  investorId: Scalars["String"];
  linkedBankAccountId: Scalars["String"];
};
export type QueryLinkBankAccountGetLinkedBankAccountArgs = {
  accountNumber: Scalars["String"];
  linkedBankAccountId: Scalars["String"];
};
export type QueryLinkBankAccountGetLinkedBankAccountBalanceArgs = {
  accountNumber: Scalars["String"];
  linkedBankAccountId: Scalars["String"];
};
export type QueryLinkBankAccountGetLinkedBankAccountsArgs = {
  accountNumber: Scalars["String"];
};
export type QueryLinkBankAccountInternalGetLinkedBankAccountArgs = {
  linkedBankAccountId: Scalars["String"];
};
export type QueryOrderManagementGetOrderArgs = {
  id: Scalars["String"];
  portfolioId: Scalars["String"];
};
export type QueryOrderManagementGetOrdersArgs = {
  portfolioId: Scalars["String"];
};
export type QueryPositionManagementGetCashBalanceArgs = {
  accountNumber: Scalars["String"];
};
export type QueryPositionManagementGetExternalPortfolioArgs = {
  id: Scalars["String"];
};
export type QueryPositionManagementGetPortfolioArgs = {
  id: Scalars["String"];
};
export type QueryPositionManagementGetPortfoliosByAccountArgs = {
  accountNumber: Scalars["String"];
};
export type QueryPositionManagementGetPositionsByAccountArgs = {
  accountNumber: Scalars["String"];
};
export type QueryPositionManagementGetTemporaryPortfolioArgs = {
  id: Scalars["String"];
};
export type QueryPositionManagementGetTradeArgs = {
  id: Scalars["String"];
  portfolioId: Scalars["String"];
};
export type QueryPositionManagementGetTradesArgs = {
  portfolioId: Scalars["String"];
};
export type QueryPositionManagementGetTradesByAccountArgs = {
  accountNumber: Scalars["String"];
};
export type QueryPositionManagementGetTransferArgs = {
  accountNumber: Scalars["String"];
  transferId: Scalars["String"];
};
export type QueryPositionManagementGetTransfersArgs = {
  accountNumber: Scalars["String"];
};
export type QueryPricesPriceAssetArgs = {
  priceAssetRequestInput?: Maybe<PriceAssetRequestInput>;
};
export type QueryRoverPortfolioAnalyzerAnalyzePortfolioArgs = {
  analyzePortfolioRequestInput?: Maybe<AnalyzePortfolioRequestInput>;
  enableEstimatedPerformance?: Maybe<Scalars["Boolean"]>;
  saveAs?: Maybe<Scalars["String"]>;
};
export type QueryRoverPortfolioAnalyzerCalculateIntradayReturnArgs = {
  calculateIntradayReturnRequestInput?: Maybe<
    CalculateIntradayReturnRequestInput
  >;
};
export type QueryRoverPortfolioAnalyzerCalculateReturnsArgs = {
  calculateReturnsRequestInput?: Maybe<CalculateReturnsRequestInput>;
};
export type QueryRoverPortfolioAnalyzerGetAnalysisArgs = {
  analysisId: Scalars["String"];
};
export type QueryRoverPortfolioAnalyzerProjectCashFlowsArgs = {
  projectCashFlowsInput?: Maybe<ProjectCashFlowsInput>;
};
export type QueryRoverPreferencesGetCartArgs = {
  userId: Scalars["String"];
};
export type QueryRoverPreferencesGetPreferencesArgs = {
  portfolioId: Scalars["String"];
};
export type QueryRoverPreferencesGetWatchListArgs = {
  userId: Scalars["String"];
};
export type QueryRoverRiskModelGetAssetRiskArgs = {
  assetId: Scalars["String"];
  date?: Maybe<Scalars["String"]>;
  frequency?: Maybe<Frequency2>;
  halfLifeAmount?: Maybe<Scalars["Int"]>;
  halfLifeUnits?: Maybe<HalfLifeUnits2>;
  lookbackPeriodAmount?: Maybe<Scalars["Int"]>;
  lookbackPeriodUnits?: Maybe<LookbackPeriodUnits2>;
  refresh?: Maybe<Scalars["Boolean"]>;
};
export type QueryRoverRiskModelGetFactorArgs = {
  id: Scalars["String"];
};
export type QueryRoverRiskModelGetFactorTimeSeriesArgs = {
  from: Scalars["String"];
  id: Scalars["String"];
  to: Scalars["String"];
};
export type QueryRoverScoreGetAssetScoresArgs = {
  assetId: Scalars["String"];
};
export type QueryRoverUniverseGetAllInventoriesArgs = {
  institutionId: Scalars["String"];
};
export type QueryRoverUniverseGetAssetArgs = {
  date?: Maybe<Scalars["String"]>;
  id: Scalars["String"];
};
export type QueryRoverUniverseGetAssetByExternalIdArgs = {
  date?: Maybe<Scalars["String"]>;
  externalId: Scalars["String"];
  sourceName: Scalars["String"];
};
export type QueryRoverUniverseGetAssetTimeSeriesArgs = {
  endDate: Scalars["String"];
  field: Scalars["String"];
  id: Scalars["String"];
  startDate: Scalars["String"];
};
export type QueryRoverUniverseGetAssetsArgs = {
  getAssetsRequestInput?: Maybe<GetAssetsRequestInput>;
};
export type QueryRoverUniverseGetExternalIdMappingArgs = {
  externalId: Scalars["String"];
  sourceName: Scalars["String"];
};
export type QueryRoverUniverseGetInventoryArgs = {
  id: Scalars["String"];
  institutionId: Scalars["String"];
};
export type QueryRoverUniverseGetIssueArgs = {
  id: Scalars["String"];
};
export type QueryRoverUniverseGetIssuerArgs = {
  id: Scalars["String"];
};
export type QueryRoverWhitelistListBestFitWhitelistCandidatesArgs = {
  institutionId?: Maybe<Scalars["String"]>;
};
export type QueryTrafixGetOrderArgs = {
  orderId: Scalars["String"];
};
export type QueryTrafixGetTradeArgs = {
  tradeId: Scalars["String"];
};
export type QueryTrafixGetTradesArgs = {
  orderId: Scalars["String"];
};
export interface GetStatementsResponse {
  __typename?: "GetStatementsResponse";
  statements: Array<Maybe<StatementResponse>>;
}
export interface StatementResponse {
  __typename?: "StatementResponse";
  accountNumber: Scalars["String"];
  documentType: Scalars["String"];
  statementURL: Scalars["String"];
  statmentDate: Scalars["String"];
}
export interface GetAchRelationshipResponse {
  __typename?: "GetAchRelationshipResponse";
  achRelationship: AchRelationship;
}
export interface AchRelationship {
  __typename?: "AchRelationship";
  /** This is the Apex Account Number */
  accountNumber: Scalars["String"];
  /** This is an Id from Apex to identify an established ACH relationship */
  achRelationshipId: Scalars["String"];
  createdAt: Scalars["String"];
  /** The linked bank account Id is from the link bank account service */
  linkedBankAccountId: Scalars["String"];
  status: AchRelationshipStatus;
  updatedAt: Scalars["String"];
}
export enum AchRelationshipStatus {
  Pending = "PENDING",
  Rejected = "REJECTED",
  Error = "ERROR",
  Canceled = "CANCELED",
  Approved = "APPROVED"
}
export interface GetApexAccountResponse {
  __typename?: "GetApexAccountResponse";
  apexAccount: ApexAccount;
}
export interface ApexAccount {
  __typename?: "ApexAccount";
  /** This is the accountNumber at Apex */
  accountNumber: Scalars["String"];
  /** this is an Id sent to Apex to track an account opening request */
  accountRequestId: Scalars["String"];
  accountType: AccountType;
  createdAt: Scalars["String"];
  status: AccountStatus;
  updatedAt: Scalars["String"];
}
export enum AccountType {
  Entity = "ENTITY",
  Individual = "INDIVIDUAL"
}
export enum AccountStatus {
  Pending = "PENDING",
  Active = "ACTIVE",
  Inactive = "INACTIVE",
  Error = "ERROR",
  Canceled = "CANCELED",
  Closed = "CLOSED",
  IdentityIssue = "IDENTITY_ISSUE",
  Restricted = "RESTRICTED"
}
export interface GetApexAccountBalanceResponse {
  __typename?: "GetApexAccountBalanceResponse";
  apexBalance: ApexBalance;
}
export interface ApexBalance {
  __typename?: "ApexBalance";
  accountNumber: Scalars["String"];
  amountAvailableForTrading: Scalars["Float"];
  amountAvailableForWithdraw: Scalars["Float"];
  amountOfPendingWithdrawals: Scalars["Float"];
  amountOfUnclearedDeposits: Scalars["Float"];
  timestamp: Scalars["String"];
}
export interface GetApexAccountMetadataResponse {
  __typename?: "GetApexAccountMetadataResponse";
  metadata: Array<Maybe<ApexAccountMetadata>>;
}
export interface ApexAccountMetadata {
  __typename?: "ApexAccountMetadata";
  accountNumber: Scalars["String"];
  accountRequestId: Scalars["String"];
  aleIds?: Maybe<Array<Maybe<Scalars["String"]>>>;
  createdAt: Scalars["String"];
  reasons?: Maybe<Array<Maybe<Scalars["String"]>>>;
  sketchIds?: Maybe<Array<Maybe<Scalars["String"]>>>;
  submittedForms: Array<Maybe<FormList2>>;
  updatedAt: Scalars["String"];
}
export interface FormList2 {
  __typename?: "FormList2";
  formId: Scalars["String"];
  formName: FormName;
}
export enum FormName {
  IndividualAccountForm = "INDIVIDUAL_ACCOUNT_FORM",
  InterestedPartyForm = "INTERESTED_PARTY_FORM",
  TrustedContactForm = "TRUSTED_CONTACT_FORM",
  EntityAccountForm = "ENTITY_ACCOUNT_FORM",
  EntityDueDiligenceForm = "ENTITY_DUE_DILIGENCE_FORM",
  EntityCorporateAgreement = "ENTITY_CORPORATE_AGREEMENT",
  EntityLlcAgreement = "ENTITY_LLC_AGREEMENT",
  EntityAccountUpdateForm = "ENTITY_ACCOUNT_UPDATE_FORM"
}
export interface GetApexTransferResponse {
  __typename?: "GetApexTransferResponse";
  transfer: Transfer;
}
export interface Transfer {
  __typename?: "Transfer";
  accountNumber: Scalars["String"];
  amount: Scalars["Float"];
  createdAt: Scalars["String"];
  direction: TransferDirection;
  linkedBankAccountId: Scalars["String"];
  status: TransferStatus;
  transferId: Scalars["String"];
  transferMethod: TransferMethod;
  transferNumber: Scalars["String"];
  updatedAt: Scalars["String"];
}
export enum TransferDirection {
  Deposit = "DEPOSIT",
  Withdraw = "WITHDRAW"
}
export enum TransferStatus {
  Pending = "PENDING",
  Complete = "COMPLETE",
  Canceled = "CANCELED",
  Returned = "RETURNED",
  Error = "ERROR"
}
export enum TransferMethod {
  Ach = "ACH",
  Wire = "WIRE"
}
export interface GetApexTransfersResponse {
  __typename?: "GetApexTransfersResponse";
  transfers: Array<Maybe<Transfer>>;
}
export interface GetCorporateAgreementFormResponse {
  __typename?: "GetCorporateAgreementFormResponse";
  /** Object for Entity Corporate Cash Account Agreement Form at Apex */
  corporateAgreementForm: CorporateAgreementForm;
}
/** Object for Entity Corporate Cash Account Agreement Form at Apex */
export interface CorporateAgreementForm {
  __typename?: "CorporateAgreementForm";
  articlesOfIncorporationSnapId: Scalars["String"];
  authorizedOfficerName: Scalars["String"];
  authorizedOfficerTitle: Scalars["String"];
  corporationName: Scalars["String"];
  createdAt?: Maybe<Scalars["String"]>;
  formId: Scalars["String"];
  isAuthorizedOfficerESigned: Scalars["Boolean"];
  isSecretaryESigned: Scalars["Boolean"];
  secretaryName: Scalars["String"];
  stateOfIncorporation: Scalars["String"];
  updatedAt?: Maybe<Scalars["String"]>;
}
export interface GetEntityAccountFormResponse {
  __typename?: "GetEntityAccountFormResponse";
  /** Object for Entity New Direct Account RIA Form at Apex */
  entityAccountForm: EntityAccountForm;
}
/** Object for Entity New Direct Account RIA Form at Apex */
export interface EntityAccountForm {
  __typename?: "EntityAccountForm";
  accountInformation?: Maybe<EntityAccountInformation>;
  accountNature?: Maybe<AccountNature>;
  additionalAccountInformation?: Maybe<EntityAdditionalAccountInformation>;
  authorizedSigner?: Maybe<EntityAuthorizedSigner>;
  beneficialOwners?: Maybe<Array<Maybe<OwnerOrOfficer>>>;
  /** A - Institutional Customer, E - Employee Account, I - Individual Customer */
  catAccountholderType?: Maybe<CatAccountHolderType>;
  createdAt?: Maybe<Scalars["String"]>;
  customerType: EntityCustomerType;
  entityOfficers?: Maybe<Array<Maybe<OwnerOrOfficer>>>;
  exemptLegalCustomer?: Maybe<EntityAccountExemptLegalCustomer>;
  formId: Scalars["String"];
  isApplicantESigned?: Maybe<Scalars["Boolean"]>;
  issuerDirectCommunicationCode?: Maybe<IssuerDirectCommunicationCode>;
  legalEntityIdentifier?: Maybe<Scalars["String"]>;
  serviceProfile?: Maybe<EntityAccountProfile>;
  suitabilityProfile?: Maybe<SuitabilityProfile>;
  updatedAt?: Maybe<Scalars["String"]>;
  w9Certification?: Maybe<W9Certification>;
}
export interface EntityAccountInformation {
  __typename?: "EntityAccountInformation";
  accountTradingInformation: EntityAccountTradingInformation;
  businessAddress: PhysicalAddress;
  businessTelephoneNumber: Scalars["String"];
  entityName: Scalars["String"];
  entityTaxId: Scalars["String"];
  isUSEntity: Scalars["Boolean"];
}
export interface EntityAccountTradingInformation {
  __typename?: "EntityAccountTradingInformation";
  /** required if isControlPerson is true */
  companyTickerSymbols?: Maybe<Array<Maybe<Scalars["String"]>>>;
  isAffiliatedExchangeOrFINRA: Scalars["Boolean"];
  isControlPerson: Scalars["Boolean"];
  memberFirmNames?: Maybe<Array<Maybe<Scalars["String"]>>>;
}
export interface PhysicalAddress {
  __typename?: "PhysicalAddress";
  city: Scalars["String"];
  country: Scalars["String"];
  postalCode: Scalars["String"];
  state: Scalars["String"];
  streetAddress: Array<Maybe<Scalars["String"]>>;
}
export enum AccountNature {
  AgricultureForestryFishing = "AGRICULTURE_FORESTRY_FISHING",
  Mining = "MINING",
  Construction = "CONSTRUCTION",
  Manufacturing = "MANUFACTURING",
  TransportationCommunicationsElectricGasSanitaryServices = "TRANSPORTATION_COMMUNICATIONS_ELECTRIC_GAS_SANITARY_SERVICES",
  WholesaleTrade = "WHOLESALE_TRADE",
  RetailTrade = "RETAIL_TRADE",
  FinanceInsuranceRealEstate = "FINANCE_INSURANCE_REAL_ESTATE",
  Services = "SERVICES",
  PublicAdministration = "PUBLIC_ADMINISTRATION"
}
export interface EntityAdditionalAccountInformation {
  __typename?: "EntityAdditionalAccountInformation";
  isForeignBank: Scalars["Boolean"];
  isMaintainedForForeignFinancialInstitution: Scalars["Boolean"];
  isPoliticallyExposed: Scalars["Boolean"];
  /** provide if and only if isPoliticallyExposed is YES */
  politicalExposureDetail?: Maybe<EntityAccountPoliticalExposureDetail>;
}
/** provide if and only if isPoliticallyExposed is YES */
export interface EntityAccountPoliticalExposureDetail {
  __typename?: "EntityAccountPoliticalExposureDetail";
  immediateFamily: Array<Maybe<Scalars["String"]>>;
  politicalOrganization: Scalars["String"];
}
export interface EntityAuthorizedSigner {
  __typename?: "EntityAuthorizedSigner";
  citizenshipCountry?: Maybe<Scalars["String"]>;
  dateOfBirth: Scalars["String"];
  emailAddress: Scalars["String"];
  isUsCitizen: Scalars["Boolean"];
  name: PrimaryName;
  taxId: Scalars["String"];
  title: Scalars["String"];
}
export interface PrimaryName {
  __typename?: "PrimaryName";
  familyName: Scalars["String"];
  givenName: Scalars["String"];
  legalName: Scalars["String"];
}
export interface OwnerOrOfficer {
  __typename?: "OwnerOrOfficer";
  address: PhysicalAddress;
  dateOfBirth: Scalars["String"];
  /** Either ssn or other identification number is required (i.e. passport) */
  identificationNumber?: Maybe<Scalars["String"]>;
  name: PrimaryName;
  /** Either ssn or other identification number is required (i.e. passport) */
  socialSecurityNumber?: Maybe<Scalars["String"]>;
}
export enum CatAccountHolderType {
  A = "A",
  E = "E",
  I = "I"
}
export enum EntityCustomerType {
  CCorporation = "C_CORPORATION",
  SCorporation = "S_CORPORATION",
  StatutoryBusinessTrust = "STATUTORY_BUSINESS_TRUST",
  LimitedLiabilityCompanyCCorporation = "LIMITED_LIABILITY_COMPANY_C_CORPORATION",
  LimitedLiabilityCompanySCorporation = "LIMITED_LIABILITY_COMPANY_S_CORPORATION",
  LimitedLiabilityCompanyPartnership = "LIMITED_LIABILITY_COMPANY_PARTNERSHIP"
}
export interface EntityAccountExemptLegalCustomer {
  __typename?: "EntityAccountExemptLegalCustomer";
  exemption?: Maybe<Exemption>;
  isExemptLegalCustomer: Scalars["Boolean"];
}
export enum Exemption {
  RegulatedFinancialInstitution = "REGULATED_FINANCIAL_INSTITUTION",
  DepartmentOrAgencyOfFederalStateOrSubdivision = "DEPARTMENT_OR_AGENCY_OF_FEDERAL_STATE_OR_SUBDIVISION",
  NonBankListedEntity = "NON_BANK_LISTED_ENTITY",
  Section_12SecuritiesExchangeAct_1934Or_15D = "SECTION_12_SECURITIES_EXCHANGE_ACT_1934_OR_15D",
  Section_3InvestmentCompanyAct_1940 = "SECTION_3_INVESTMENT_COMPANY_ACT_1940",
  Section_202AInvestmentAdvisorsAct_1940 = "SECTION_202A_INVESTMENT_ADVISORS_ACT_1940",
  Section_3SecuritiesExchangeAct_1934Section_6Or_17A = "SECTION_3_SECURITIES_EXCHANGE_ACT_1934_SECTION_6_OR_17A",
  AnyOtherSecuritiesExchangeAct_1934 = "ANY_OTHER_SECURITIES_EXCHANGE_ACT_1934",
  CommodityFuturesTradingCommisionRegistered = "COMMODITY_FUTURES_TRADING_COMMISION_REGISTERED",
  PublicAccountingFirmSection_102SarbanesOxley = "PUBLIC_ACCOUNTING_FIRM_SECTION_102_SARBANES_OXLEY",
  StateRegulatedInsuranceCompany = "STATE_REGULATED_INSURANCE_COMPANY"
}
export enum IssuerDirectCommunicationCode {
  Object = "OBJECT",
  Accept = "ACCEPT"
}
export interface EntityAccountProfile {
  __typename?: "EntityAccountProfile";
  dividendReinvestment: DividendReinvestment;
  sweepInstructions: SweepInstructions;
}
export enum DividendReinvestment {
  Reinvest = "REINVEST",
  DoNotReinvest = "DO_NOT_REINVEST"
}
export enum SweepInstructions {
  Sweep = "SWEEP",
  NoSweep = "NO_SWEEP"
}
export interface SuitabilityProfile {
  __typename?: "SuitabilityProfile";
  liquidityNeeds: LiquidityNeeds;
  timeHorizon: TimeHorizon;
}
export enum LiquidityNeeds {
  VeryImportant = "VERY_IMPORTANT",
  SomewhatImportant = "SOMEWHAT_IMPORTANT",
  NotImportant = "NOT_IMPORTANT"
}
export enum TimeHorizon {
  Short = "SHORT",
  Average = "AVERAGE",
  Longest = "LONGEST"
}
export interface W9Certification {
  __typename?: "W9Certification";
  exemptPayeeCode?: Maybe<Scalars["String"]>;
  exemptionFromFatca?: Maybe<Scalars["String"]>;
}
export interface GetEntityDueDiligenceFormResponse {
  __typename?: "GetEntityDueDiligenceFormResponse";
  /** Object for Entity Due Diligence Form at Apex */
  entityDueDiligenceForm: EntityDueDiligenceForm;
}
/** Object for Entity Due Diligence Form at Apex */
export interface EntityDueDiligenceForm {
  __typename?: "EntityDueDiligenceForm";
  accountActivity?: Maybe<DueDiligenceAccountActivity>;
  accountInformation?: Maybe<DueDiligenceAccountInformation>;
  additionalAccounts?: Maybe<DueDiligenceAdditionalAccounts>;
  assessedRiskRating?: Maybe<AssessedRiskRating>;
  createdAt?: Maybe<Scalars["String"]>;
  entityOrAssociatesHaveNegativeNews?: Maybe<Scalars["Boolean"]>;
  /** If entityOrAssociatesHaveNegativeNews is YES */
  entityOrAssociatesNegativeNewsInfo?: Maybe<Scalars["String"]>;
  formId: Scalars["String"];
  politicallyExposedPersons?: Maybe<DueDiligencePoliticallyExposedPersons>;
  principalApproverName?: Maybe<Scalars["String"]>;
  registeredRepresentativeApproverName?: Maybe<Scalars["String"]>;
  updatedAt?: Maybe<Scalars["String"]>;
}
export interface DueDiligenceAccountActivity {
  __typename?: "DueDiligenceAccountActivity";
  expectedWithdrawalFrequency: ExpectedWithdrawalFrequency;
  initialDepositAmount: Scalars["Float"];
  initialDepositSource: Scalars["String"];
  lowPricedSecuritiesPercentage?: Maybe<Scalars["Float"]>;
  primaryAccountActivity?: Maybe<PrimaryAccountActivity>;
  willTransactForeignBonds: Scalars["Boolean"];
  willTransactLowPricedSecurities: Scalars["Boolean"];
}
export enum ExpectedWithdrawalFrequency {
  Frequent = "FREQUENT",
  Occasional = "OCCASIONAL",
  Withdrawal = "WITHDRAWAL"
}
export enum PrimaryAccountActivity {
  ActiveTrading = "ACTIVE_TRADING",
  ShortTermInvesting = "SHORT_TERM_INVESTING",
  LongTermInvesting = "LONG_TERM_INVESTING"
}
export interface DueDiligenceAccountInformation {
  __typename?: "DueDiligenceAccountInformation";
  accountName: Scalars["String"];
  businessLocations: Array<Maybe<Scalars["String"]>>;
  countryOfIncorporation: Scalars["String"];
  /** Has related accounts */
  hasAccounts: Scalars["Boolean"];
  relatedAccounts?: Maybe<Array<Maybe<DueDiligenceRelatedAccounts>>>;
}
export interface DueDiligenceRelatedAccounts {
  __typename?: "DueDiligenceRelatedAccounts";
  accountNumber: Scalars["String"];
  entityName: Scalars["String"];
}
export interface DueDiligenceAdditionalAccounts {
  __typename?: "DueDiligenceAdditionalAccounts";
  confirmEntityDoesNotIssueBearerShares: Scalars["Boolean"];
  institutionNames: Array<Maybe<Scalars["String"]>>;
  primaryOngoingFundingSource: PrimaryOngoingFundingSource;
  primaryOngoingFundingSourceClarification?: Maybe<Scalars["String"]>;
  scopeOfBusiness: ScopeOfBusiness;
  scopeOfBusinessClarification?: Maybe<Scalars["String"]>;
}
export enum PrimaryOngoingFundingSource {
  CorporateIncome = "CORPORATE_INCOME",
  InvestmentCapital = "INVESTMENT_CAPITAL",
  Other = "OTHER"
}
export enum ScopeOfBusiness {
  CommercialRetailBusiness = "COMMERCIAL_RETAIL_BUSINESS",
  FinancialServicesBusiness = "FINANCIAL_SERVICES_BUSINESS",
  Other = "OTHER"
}
export enum AssessedRiskRating {
  High = "HIGH",
  Medium = "MEDIUM",
  Low = "LOW"
}
export interface DueDiligencePoliticallyExposedPersons {
  __typename?: "DueDiligencePoliticallyExposedPersons";
  isPoliticallyExposed: Scalars["Boolean"];
  politicalOfficials?: Maybe<Array<Maybe<DueDiligencePoliticalOfficials>>>;
}
export interface DueDiligencePoliticalOfficials {
  __typename?: "DueDiligencePoliticalOfficials";
  immediateFamily: Array<Maybe<Scalars["String"]>>;
  legalName: Scalars["String"];
  politicalOrganization: Scalars["String"];
  politicalTitle: Scalars["String"];
  role: Scalars["String"];
}
export interface GetIndividualAccountFormResponse {
  __typename?: "GetIndividualAccountFormResponse";
  /** Object for New Direct Account Form at Apex */
  individualAccountForm: IndividualAccountForm;
}
/** Object for New Direct Account Form at Apex */
export interface IndividualAccountForm {
  __typename?: "IndividualAccountForm";
  applicantSignature?: Maybe<ApplicantSignature>;
  /** first applicant is considered the primary applicant for all accounts. The second applicant is the joint owner */
  applicants?: Maybe<Array<Maybe<Applicant>>>;
  /** A - Institutional Customer, E - Employee Account, I - Individual Customer */
  catAccountholderType?: Maybe<CatAccountHolderType>;
  createdAt?: Maybe<Scalars["String"]>;
  customerType: CustomerType;
  formId: Scalars["String"];
  investmentProfile?: Maybe<InvestmentProfile>;
  serviceProfile?: Maybe<IndividualServiceProfile>;
  suitabilityProfile?: Maybe<SuitabilityProfile>;
  trustedContact?: Maybe<TrustedContactEnum>;
  updatedAt?: Maybe<Scalars["String"]>;
}
export interface ApplicantSignature {
  __typename?: "ApplicantSignature";
  eSigned: YesNoEnum;
}
export enum YesNoEnum {
  Yes = "YES",
  No = "NO"
}
export interface Applicant {
  __typename?: "Applicant";
  contact?: Maybe<Contact>;
  disclosures?: Maybe<Disclosures>;
  employment?: Maybe<Employment>;
  identity?: Maybe<Identity>;
}
export interface Contact {
  __typename?: "Contact";
  emailAddresses: Array<Maybe<Scalars["String"]>>;
  homeAddress: PhysicalAddress;
  phoneNumbers: Array<Maybe<PhoneNumber>>;
}
export interface PhoneNumber {
  __typename?: "PhoneNumber";
  phoneNumber: Scalars["String"];
  phoneNumberType: Scalars["String"];
}
export interface Disclosures {
  __typename?: "Disclosures";
  affiliatedApproval?: Maybe<Array<Maybe<Scalars["String"]>>>;
  /** ticker symbols of publicly traded companies. */
  companySymbols?: Maybe<Array<Maybe<Scalars["String"]>>>;
  firmName?: Maybe<Scalars["String"]>;
  isAffiliatedExchangeOrFINRA: YesNoEnum;
  isControlPerson: YesNoEnum;
  isPoliticallyExposed: YesNoEnum;
  politicalExposureDetail?: Maybe<PoliticalExposureDetail>;
}
export interface PoliticalExposureDetail {
  __typename?: "PoliticalExposureDetail";
  immediateFamily: Array<Maybe<Scalars["String"]>>;
  politicalOrganization: Scalars["String"];
}
export interface Employment {
  __typename?: "Employment";
  /** reqiored if employmentStatus is EMPLOYED */
  employer?: Maybe<Scalars["String"]>;
  employmentStatus: EmploymentStatus;
  positionEmployed?: Maybe<Scalars["String"]>;
}
export enum EmploymentStatus {
  Employed = "EMPLOYED",
  Retired = "RETIRED",
  Student = "STUDENT",
  Unemployed = "UNEMPLOYED"
}
export interface Identity {
  __typename?: "Identity";
  birthCountry?: Maybe<Scalars["String"]>;
  citizenshipCountry: Scalars["String"];
  /** Example 2003-04-23 */
  dateOfBirth?: Maybe<Scalars["String"]>;
  name: PrimaryName;
  permanentResident?: Maybe<YesNoEnum>;
  /** Example 123-45-6789 */
  socialSecurityNumber?: Maybe<Scalars["String"]>;
  /** Required when a valid visaType is selected. Example 2003-04-23 */
  visaExpirationDate?: Maybe<Scalars["String"]>;
  visaType?: Maybe<VisaType>;
}
export enum VisaType {
  E1 = "E1",
  E2 = "E2",
  E3 = "E3",
  F1 = "F1",
  G4 = "G4",
  H1B = "H1B",
  L1 = "L1",
  O1 = "O1",
  Tn1 = "TN1",
  Other = "OTHER"
}
export enum CustomerType {
  Individual = "INDIVIDUAL",
  Ira = "IRA",
  Joint = "JOINT",
  Custodian = "CUSTODIAN"
}
export interface InvestmentProfile {
  __typename?: "InvestmentProfile";
  annualIncomeUSD: Amount;
  federalTaxBracketPercent: Scalars["Float"];
  investmentExperience: InvestmentExperience;
  investmentObjective: InvestmentObjective;
  liquidNetWorthUSD: Worth;
  riskTolerance: RiskTolerance;
  totalNetWorthUSD: Worth;
}
export enum Amount {
  Upto25K = "UPTO25K",
  From25To50K = "FROM25TO50K",
  From50To100K = "FROM50TO100K",
  From100To200K = "FROM100TO200K",
  From200To300K = "FROM200TO300K",
  From300To500K = "FROM300TO500K",
  From500To1M200K = "FROM500TO1M200K",
  From1M200Kto10M = "FROM1M200KTO10M"
}
export enum InvestmentExperience {
  None = "NONE",
  Limited = "LIMITED",
  Good = "GOOD",
  Extensive = "EXTENSIVE"
}
export enum InvestmentObjective {
  CapitalPreservation = "CAPITAL_PRESERVATION",
  Income = "INCOME",
  GrowthIncome = "GROWTH_INCOME",
  Growth = "GROWTH",
  Speculation = "SPECULATION",
  MaximumGrowth = "MAXIMUM_GROWTH",
  Balanced = "BALANCED",
  Other = "OTHER"
}
export enum Worth {
  Upto50K = "UPTO50K",
  From50To100K = "FROM50TO100K",
  From100To200K = "FROM100TO200K",
  From200To500K = "FROM200TO500K",
  From500Kto1M = "FROM500KTO1M",
  From1Mto5M = "FROM1MTO5M",
  From5Mto10M = "FROM5MTO10M"
}
export enum RiskTolerance {
  Low = "LOW",
  Medium = "MEDIUM",
  High = "HIGH"
}
export interface IndividualServiceProfile {
  __typename?: "IndividualServiceProfile";
  dividendProceeds?: Maybe<DividendProceeds>;
  dividendProceedsSendFrequency?: Maybe<DividendProceedsSendFrequency>;
  dividendReinvestment?: Maybe<DividendReinvestment>;
  householdingService?: Maybe<YesNoEnum>;
  issuerDirectCommunication: IssuerDirectCommunicationCode;
  securitySaleProceeds?: Maybe<SecuritySaleProceeds>;
  sweepInstructions?: Maybe<SweepInstructions>;
}
export enum DividendProceeds {
  Hold = "HOLD",
  Send = "SEND"
}
export enum DividendProceedsSendFrequency {
  Daily = "DAILY",
  Weekly = "WEEKLY",
  Monthly = "MONTHLY"
}
export enum SecuritySaleProceeds {
  Hold = "HOLD",
  Send = "SEND"
}
export enum TrustedContactEnum {
  Include = "INCLUDE",
  Exclude = "EXCLUDE"
}
export interface GetInterestedPartyFormResponse {
  __typename?: "GetInterestedPartyFormResponse";
  /** Object for Interested Party Request Form at Apex */
  interestedPartyForm: InterestedPartyForm;
}
/** Object for Interested Party Request Form at Apex */
export interface InterestedPartyForm {
  __typename?: "InterestedPartyForm";
  createdAt?: Maybe<Scalars["String"]>;
  formId: Scalars["String"];
  /** Array of interested parties. */
  interestedParties: Array<Maybe<InterestedParties2>>;
  updatedAt?: Maybe<Scalars["String"]>;
}
export interface InterestedParties2 {
  __typename?: "InterestedParties2";
  mailingAddress: PhysicalAddress;
  /** This only applies to individual accounts */
  name: InterestedPartyName;
}
/** This only applies to individual accounts */
export interface InterestedPartyName {
  __typename?: "InterestedPartyName";
  companyName: Scalars["String"];
}
export interface GetLlcAgreementFormResponse {
  __typename?: "GetLlcAgreementFormResponse";
  /** Object for Entity LLC Agreement Form at Apex */
  llcAgreementForm: LlcAgreementForm;
}
/** Object for Entity LLC Agreement Form at Apex */
export interface LlcAgreementForm {
  __typename?: "LlcAgreementForm";
  articlesOfIncorporationOrOperatingAgreementSnapId: Scalars["String"];
  authorizedSignerName: Scalars["String"];
  authorizedSignerTitle: Scalars["String"];
  createdAt?: Maybe<Scalars["String"]>;
  entityName: Scalars["String"];
  formId: Scalars["String"];
  isAuthorizedSignerESigned: Scalars["Boolean"];
  membersAndManagers: Array<Maybe<MembersAndManagers2>>;
  /** example, 2014-10-21 */
  resolutionAdoptionDate: Scalars["String"];
  stateOfOrigin: Scalars["String"];
  updatedAt?: Maybe<Scalars["String"]>;
}
export interface MembersAndManagers2 {
  __typename?: "MembersAndManagers2";
  isManager: Scalars["Boolean"];
  isManagerESigned?: Maybe<Scalars["Boolean"]>;
  legalName: Scalars["String"];
  organizationalRole: Scalars["String"];
}
export interface GetOpenSketchesResponse {
  __typename?: "GetOpenSketchesResponse";
  sketches: Array<Maybe<Sketch>>;
}
export interface Sketch {
  __typename?: "Sketch";
  accountNumber: Scalars["String"];
  accountType: AccountType;
  createdAt: Scalars["String"];
  sketchId: Scalars["String"];
  status: SketchStatus;
  updatedAt: Scalars["String"];
}
export enum SketchStatus {
  Open = "OPEN",
  Resolved = "RESOLVED",
  Closed = "CLOSED"
}
export interface GetTradeConfirmsResponse {
  __typename?: "GetTradeConfirmsResponse";
  confirmsResponse: ConfirmsResponse;
}
export interface ConfirmsResponse {
  __typename?: "ConfirmsResponse";
  confirms: Array<Maybe<ConfirmResponse>>;
}
export interface ConfirmResponse {
  __typename?: "ConfirmResponse";
  accountNumber: Scalars["String"];
  confirmURL: Scalars["String"];
  processDate: Scalars["String"];
}
export interface GetTrustedContactFormResponse {
  __typename?: "GetTrustedContactFormResponse";
  /** Object for Trusted Contact Form at Apex */
  trustedContactForm: TrustedContactForm;
}
/** Object for Trusted Contact Form at Apex */
export interface TrustedContactForm {
  __typename?: "TrustedContactForm";
  createdAt?: Maybe<Scalars["String"]>;
  emailAddress: Scalars["String"];
  familyName: Scalars["String"];
  formId: Scalars["String"];
  givenName: Scalars["String"];
  mailingAddress?: Maybe<PhysicalAddress>;
  phoneNumber?: Maybe<PhoneNumber>;
  updatedAt?: Maybe<Scalars["String"]>;
}
export interface InvestorAccount {
  __typename?: "InvestorAccount";
  apexAccount: ApexAccount2;
}
export interface ApexAccount2 {
  __typename?: "ApexAccount2";
  /** This is an accountNumber at Apex */
  apexAccountNumber: Scalars["String"];
  /** This is an Id from Apex to track the account opening request */
  apexRequestId: Scalars["String"];
  createdAt: Scalars["String"];
  /**
   * This is the internal state of an Apex account. This resource Id is used for all internal Apex account
   * operations
   */
  id: Scalars["String"];
  /** The investorId of the investor service */
  investorId: Scalars["String"];
  metadata?: Maybe<Scalars["JSON"]>;
  status: AccountStatus2;
  updatedAt: Scalars["String"];
}
export enum AccountStatus2 {
  Pending = "PENDING",
  Active = "ACTIVE",
  Inactive = "INACTIVE",
  Error = "ERROR",
  Canceled = "CANCELED"
}
export interface AccountBalance {
  __typename?: "AccountBalance";
  apexBalance: ApexBalance2;
}
export interface ApexBalance2 {
  __typename?: "ApexBalance2";
  amountAvailableForTrading: Scalars["Float"];
  amountAvailableForWithdraw: Scalars["Float"];
  amountOfPendingWithdrawals: Scalars["Float"];
  amountOfUnclearedDeposits: Scalars["Float"];
  id: Scalars["String"];
  timestamp: Scalars["String"];
}
export interface GetApexAccountByAccountNumberResponse {
  __typename?: "GetApexAccountByAccountNumberResponse";
  apexAccount: ApexAccount2;
}
export interface GetStatementResponse {
  __typename?: "GetStatementResponse";
  statementsResponse: Array<Maybe<StatementResponse2>>;
}
export interface StatementResponse2 {
  __typename?: "StatementResponse2";
  apexAccountId?: Maybe<Scalars["String"]>;
  documentType?: Maybe<Scalars["String"]>;
  statementURL?: Maybe<Scalars["String"]>;
  statmentDate?: Maybe<Scalars["String"]>;
}
export interface GetApexAchRelationshipResponse {
  __typename?: "GetApexACHRelationshipResponse";
  apexAchRelationship: ApexAchRelationship;
}
export interface ApexAchRelationship {
  __typename?: "ApexACHRelationship";
  /**
   * This is the internal state of an Apex account. This resource Id is used for all internal Apex account
   * operations
   */
  accountId: Scalars["String"];
  /** This is an Id from Apex to identify an established ACH relationship */
  apexRelationshipId: Scalars["String"];
  createdAt: Scalars["String"];
  /** This is the internal representation of an established ACH relationship at Apex. */
  id: Scalars["String"];
  /** The linked bank account Id is from the investor service */
  linkedBankAccountId: Scalars["String"];
  metadata?: Maybe<Scalars["JSON"]>;
  status: ApexAchRelationshipStatus;
  updatedAt: Scalars["String"];
}
export enum ApexAchRelationshipStatus {
  Pending = "PENDING",
  Active = "ACTIVE",
  Inactive = "INACTIVE",
  Error = "ERROR",
  Canceled = "CANCELED"
}
export interface GetApexAchRelationshipsResponse {
  __typename?: "GetApexACHRelationshipsResponse";
  apexAchRelationships: Array<Maybe<ApexAchRelationship>>;
}
export interface GetTradeConfirmResponse {
  __typename?: "GetTradeConfirmResponse";
  confirmResponse: ConfirmResponse2;
}
export interface ConfirmResponse2 {
  __typename?: "ConfirmResponse2";
  apexAccountId: Scalars["String"];
  confirmURL: Scalars["String"];
}
export interface AccountTradeconfirms {
  __typename?: "AccountTradeconfirms";
  confirmsResponse: ConfirmsResponse2;
}
export interface ConfirmsResponse2 {
  __typename?: "ConfirmsResponse2";
  apexAccountId: Scalars["String"];
  confirms: Array<Maybe<DateConfirm>>;
}
export interface DateConfirm {
  __typename?: "DateConfirm";
  confirmURL: Scalars["String"];
  processDate: Scalars["String"];
}
export interface AccountTransfer {
  __typename?: "AccountTransfer";
  transfer: ApexTransfer;
}
export interface ApexTransfer {
  __typename?: "ApexTransfer";
  /**
   * This is the internal state of an Apex account. This resource Id is used for all internal Apex account
   * operations
   */
  accountId: Scalars["String"];
  /** This is the internal representation of an established ACH relationship at Apex. */
  achRelationshipId: Scalars["String"];
  amount: Scalars["Float"];
  /** This is the Id of the transfer created at Apex. */
  apexTransferId: Scalars["String"];
  createdAt: Scalars["String"];
  direction: TransferDirection;
  /** This is the internal representation of an initiated transfer at Apex. */
  id: Scalars["String"];
  metadata?: Maybe<Scalars["JSON"]>;
  status: TransferStatus2;
  /** This is the transferId of the investor service. */
  transferId: Scalars["String"];
  transferMethod?: Maybe<TransferMethod>;
  updatedAt: Scalars["String"];
}
export enum TransferStatus2 {
  Pending = "PENDING",
  Complete = "COMPLETE",
  Canceled = "CANCELED",
  Error = "ERROR"
}
export interface GetApexTransfersResponse2 {
  __typename?: "GetApexTransfersResponse2";
  transfers: Array<Maybe<ApexTransfer>>;
}
export interface GetTradePostingsResponse {
  __typename?: "GetTradePostingsResponse";
  tradePostings: Array<Maybe<TradePosting>>;
}
export interface TradePosting {
  __typename?: "TradePosting";
  aleId: Scalars["String"];
  direction: TradeDirection;
  errorDetails: Scalars["String"];
  orderId: Scalars["String"];
  price: Scalars["Float"];
  quantity: Scalars["Float"];
  state: TransactionState;
  ticker: Scalars["String"];
  tradePostingId: Scalars["String"];
  tradedAt: Scalars["String"];
  updatedAt: Scalars["String"];
}
export enum TradeDirection {
  Buy = "BUY",
  Sell = "SELL"
}
export enum TransactionState {
  Created = "CREATED",
  Pending = "PENDING",
  Submitted = "SUBMITTED",
  Complete = "COMPLETE",
  Deleted = "DELETED",
  Error = "ERROR",
  Corrupted = "CORRUPTED"
}
export interface GetApiCallRecordResponse {
  __typename?: "GetApiCallRecordResponse";
  apiCallRecord: ApiCallRecord;
}
export interface ApiCallRecord {
  __typename?: "ApiCallRecord";
  action: Action;
  createdAt: Scalars["String"];
  id: Scalars["String"];
  institutionId: Scalars["String"];
  metadata?: Maybe<Scalars["JSON"]>;
  responseStatus: Scalars["String"];
  updatedAt: Scalars["String"];
  url: Scalars["String"];
}
export enum Action {
  Post = "POST",
  Get = "GET",
  Put = "PUT",
  Delete = "DELETE",
  Patch = "PATCH"
}
export interface GetApiCallRecordsResponse {
  __typename?: "GetApiCallRecordsResponse";
  apiCallRecords: Array<Maybe<ApiCallRecord>>;
}
export interface GetExecutionLogsResponse {
  __typename?: "GetExecutionLogsResponse";
  executionLogs: Array<Maybe<ExecutionLog>>;
}
export interface ExecutionLog {
  __typename?: "ExecutionLog";
  application: Scalars["String"];
  endpoint: Scalars["String"];
  failure?: Maybe<Scalars["String"]>;
  id: Scalars["String"];
  orderId?: Maybe<Scalars["String"]>;
  portfolioId?: Maybe<Scalars["String"]>;
  responseCode: Scalars["Int"];
  state?: Maybe<Scalars["String"]>;
  timestamp: Scalars["String"];
  tradeId?: Maybe<Scalars["String"]>;
}
export interface GetSearchStackResponse {
  __typename?: "GetSearchStackResponse";
  searchStack: SearchStack;
}
export interface SearchStack {
  __typename?: "SearchStack";
  createdAt: Scalars["String"];
  deadLetterQueueUrl: Scalars["String"];
  functionArn: Scalars["String"];
  functionName: Scalars["String"];
  id: Scalars["String"];
  metadata?: Maybe<Scalars["JSON"]>;
  tableName: Scalars["String"];
  tableStatus: Scalars["String"];
  updatedAt: Scalars["String"];
}
export interface GetSubscriptionResponse {
  __typename?: "GetSubscriptionResponse";
  subscription: Subscription2;
}
export interface Subscription2 {
  __typename?: "Subscription2";
  createdAt: Scalars["String"];
  /** A unique ID */
  id: Scalars["String"];
  /**
   * The [Amazon Resource Name](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html) of
   * the SQS queue to listen for updates
   */
  queueArn: Scalars["String"];
  /** The URL of the SQS queue to listen for updates */
  queueUrl: Scalars["String"];
  /**
   * The [Amazon Resource Name](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html) of
   * the SNS-to-SQS subscription
   */
  subscriptionArn: Scalars["String"];
  /**
   * The [Amazon Resource Name](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html) of
   * the SNS topic
   */
  topicArn: Scalars["String"];
  updatedAt: Scalars["String"];
}
export interface GetTopicResponse {
  __typename?: "GetTopicResponse";
  topic: Topic;
}
export interface Topic {
  __typename?: "Topic";
  /**
   * The [Amazon Resource Name](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html) of
   * the SNS topic
   */
  arn: Scalars["String"];
  createdAt: Scalars["String"];
  /** A unique ID */
  id: Scalars["String"];
  updatedAt: Scalars["String"];
}
export interface GetPreferencesResponse {
  __typename?: "GetPreferencesResponse";
  /** BestFit preferences */
  preferences: Preferences;
}
/** BestFit preferences */
export interface Preferences {
  __typename?: "Preferences";
  /** Target credit quality for a BestFit portfolio */
  assetClass?: Maybe<AssetClass>;
  /** Target number of bonds in your portfolio */
  count?: Maybe<Scalars["Int"]>;
  /** Credit quality buckets */
  creditQualityBuckets?: Maybe<Array<Maybe<CreditQuality>>>;
  /** Target duration in years */
  duration?: Maybe<Scalars["Float"]>;
  /** Subsectors to exclude, such as ["Oil and Gas", "Tobacco"] */
  excludedSubsectors?: Maybe<Array<Maybe<Scalars["String"]>>>;
  /** Target maturity in years */
  maturity?: Maybe<Scalars["Float"]>;
  /** Target yield. Not used currently. */
  yield?: Maybe<Scalars["Float"]>;
}
export enum AssetClass {
  CorporateBonds = "CORPORATE_BONDS",
  MunicipalBonds = "MUNICIPAL_BONDS"
}
export enum CreditQuality {
  HighestQuality = "HIGHEST_QUALITY",
  InvestmentGrade = "INVESTMENT_GRADE",
  HighYield = "HIGH_YIELD",
  Speculative = "SPECULATIVE"
}
export interface GetIndexBondsResponse {
  __typename?: "GetIndexBondsResponse";
  indexBonds: Array<Maybe<IndexBond>>;
}
export interface IndexBond {
  __typename?: "IndexBond";
  amountForSale90Days?: Maybe<Scalars["Float"]>;
  coupon?: Maybe<Scalars["Float"]>;
  cusip: Scalars["String"];
  figi?: Maybe<Scalars["String"]>;
  fundsHolding?: Maybe<Scalars["Int"]>;
  marketSector?: Maybe<Scalars["String"]>;
  maturityDate?: Maybe<Scalars["String"]>;
  percentHeldInFunds?: Maybe<Scalars["Float"]>;
  price?: Maybe<Scalars["Float"]>;
  rank: Scalars["Int"];
  securityDescription?: Maybe<Scalars["String"]>;
  state?: Maybe<Scalars["String"]>;
  totalSharesHeldInFunds?: Maybe<Scalars["Float"]>;
  tradeVolume90Days?: Maybe<Scalars["Float"]>;
}
export interface LoadAllIndexBondsResponse {
  __typename?: "LoadAllIndexBondsResponse";
  numLoaded: Scalars["Int"];
}
export interface DownloadFileResponse {
  __typename?: "DownloadFileResponse";
  /** Base64 */
  file: Scalars["String"];
}
export interface ListFilesResponse {
  __typename?: "ListFilesResponse";
  filesList: Array<Maybe<FileInfo>>;
}
export interface FileInfo {
  __typename?: "FileInfo";
  affiliatedResource: AffiliatedResource;
  affiliatedResourceId: Scalars["String"];
  createdAt: Scalars["String"];
  documentName: DocumentName;
  fileExtension: FileExtension;
  fileId: Scalars["String"];
}
export enum AffiliatedResource {
  AccountForms = "ACCOUNT_FORMS",
  IdentityInvestigations = "IDENTITY_INVESTIGATIONS"
}
export enum DocumentName {
  W9Certification = "W9_CERTIFICATION",
  AffiliatedApprovalForm = "AFFILIATED_APPROVAL_FORM",
  IncorporationArticles = "INCORPORATION_ARTICLES",
  IdentityVerification = "IDENTITY_VERIFICATION"
}
export enum FileExtension {
  Docx = "DOCX",
  Pdf = "PDF",
  Png = "PNG",
  Jpg = "JPG",
  Jpeg = "JPEG"
}
export interface AuthorizeResponse {
  __typename?: "AuthorizeResponse";
  /** Specifies whether the request is authorized */
  allowed: Scalars["Boolean"];
  message: Scalars["String"];
  timestamp: Scalars["String"];
}
export interface GetCurrentUserResponse {
  __typename?: "GetCurrentUserResponse";
  user: User;
}
export interface User {
  __typename?: "User";
  createdAt?: Maybe<Scalars["String"]>;
  email: Scalars["String"];
  first: Scalars["String"];
  id: Scalars["String"];
  institutionId?: Maybe<Scalars["String"]>;
  last: Scalars["String"];
  metadata?: Maybe<Scalars["JSON"]>;
  policies?: Maybe<Array<Maybe<Policy>>>;
  status?: Maybe<UserStatus>;
  terms: Scalars["Boolean"];
  updatedAt?: Maybe<Scalars["String"]>;
  userType: UserType;
}
export interface Policy {
  __typename?: "Policy";
  actions: Array<Maybe<Scalars["String"]>>;
  resource: Scalars["String"];
}
export enum UserStatus {
  Active = "ACTIVE",
  Blocked = "BLOCKED",
  Deleted = "DELETED"
}
export enum UserType {
  Default = "DEFAULT",
  Admin = "ADMIN",
  Trial = "TRIAL"
}
export interface GetInstitutionResponse {
  __typename?: "GetInstitutionResponse";
  institution: Institution;
}
export interface Institution {
  __typename?: "Institution";
  createdAt: Scalars["String"];
  id: Scalars["String"];
  machineUsers: Array<Maybe<MachineUser>>;
  metadata?: Maybe<Scalars["JSON"]>;
  name: Scalars["String"];
  primaryContact: PrimaryContact;
  updatedAt: Scalars["String"];
}
export interface MachineUser {
  __typename?: "MachineUser";
  clientId: Scalars["String"];
  clientSecret?: Maybe<Scalars["String"]>;
}
export interface PrimaryContact {
  __typename?: "PrimaryContact";
  email: Scalars["String"];
  first: Scalars["String"];
  last: Scalars["String"];
}
export interface GetInventoryMappingResponse {
  __typename?: "GetInventoryMappingResponse";
  inventoryMapping: InventoryMapping;
}
export interface InventoryMapping {
  __typename?: "InventoryMapping";
  assetExplorer?: Maybe<Scalars["String"]>;
  bestFit?: Maybe<Scalars["String"]>;
  inpaas?: Maybe<Scalars["String"]>;
  institutionId: Scalars["String"];
  muniBestFit?: Maybe<Scalars["String"]>;
}
export interface GetInvestorMappingResponse {
  __typename?: "GetInvestorMappingResponse";
  investorMapping: InvestorMapping;
}
export interface InvestorMapping {
  __typename?: "InvestorMapping";
  institutionId: Scalars["String"];
  investorId: Scalars["String"];
}
export interface GetPortfolioMappingResponse {
  __typename?: "GetPortfolioMappingResponse";
  portfolioMapping: PortfolioMapping;
}
export interface PortfolioMapping {
  __typename?: "PortfolioMapping";
  institutionId: Scalars["String"];
  portfolioId: Scalars["String"];
}
export interface GetProposalMappingResponse {
  __typename?: "GetProposalMappingResponse";
  proposalMapping: ProposalMapping;
}
export interface ProposalMapping {
  __typename?: "ProposalMapping";
  institutionId: Scalars["String"];
  proposalId: Scalars["String"];
}
export interface GetRolesMappingResponse {
  __typename?: "GetRolesMappingResponse";
  roles: Array<Maybe<RoleMapping>>;
}
export interface RoleMapping {
  __typename?: "RoleMapping";
  institutionId: Scalars["String"];
  roleId: Scalars["String"];
  userType: Scalars["String"];
}
export interface GetUserMappingResponse {
  __typename?: "GetUserMappingResponse";
  userMapping: UserMapping;
}
export interface UserMapping {
  __typename?: "UserMapping";
  email: Scalars["String"];
  institutionId: Scalars["String"];
  roles?: Maybe<Array<Maybe<Scalars["String"]>>>;
  userId?: Maybe<Scalars["String"]>;
  userType: Scalars["String"];
}
export interface GetPasswordResetTicketResponse {
  __typename?: "GetPasswordResetTicketResponse";
  expired: Scalars["Boolean"];
}
export interface GetRoleResponse {
  __typename?: "GetRoleResponse";
  role: Role;
}
export interface Role {
  __typename?: "Role";
  /** Unique id for the role */
  id: Scalars["String"];
  /** Policies associated with the role */
  policies: Array<Maybe<Policy>>;
}
export interface GetRoleBindingResponse {
  __typename?: "GetRoleBindingResponse";
  roleBinding: RoleBinding;
}
export interface RoleBinding {
  __typename?: "RoleBinding";
  id: Scalars["String"];
  principalId: Scalars["String"];
  principalType?: Maybe<Scalars["String"]>;
  roleId: Scalars["String"];
}
export interface GetRoleBindingsResponse {
  __typename?: "GetRoleBindingsResponse";
  roleBindings: Array<Maybe<RoleBinding>>;
}
export interface GetRoleBindingsForSubjectResponse {
  __typename?: "GetRoleBindingsForSubjectResponse";
  roleBindings: Array<Maybe<RoleBinding>>;
}
export interface GetRolesForSubjectResponse {
  __typename?: "GetRolesForSubjectResponse";
  roles: Array<Maybe<Role>>;
}
export interface GetUserResponse {
  __typename?: "GetUserResponse";
  user: User;
}
export interface GetUserInviteResponse {
  __typename?: "GetUserInviteResponse";
  invitedUser: InvitedUser;
}
export interface InvitedUser {
  __typename?: "InvitedUser";
  createdAt: Scalars["String"];
  email: Scalars["String"];
  firstName: Scalars["String"];
  institutionId?: Maybe<Scalars["String"]>;
  invitedBy: Scalars["String"];
  lastName: Scalars["String"];
  nonce: Scalars["String"];
  status: InviteStatus;
  userType: UserType;
}
export enum InviteStatus {
  NotFound = "NOT_FOUND",
  Registered = "REGISTERED",
  Expired = "EXPIRED",
  Invited = "INVITED"
}
export interface GetUserInviteListResponse {
  __typename?: "GetUserInviteListResponse";
  invitedUsers: Array<Maybe<InvitedUser>>;
}
export interface ValidateUserInviteResponse {
  __typename?: "ValidateUserInviteResponse";
  inviteStatus: InviteStatus;
}
export interface GetByCusipResponse {
  __typename?: "GetByCusipResponse";
  iceData: Array<Maybe<IncrementalData>>;
}
export interface IncrementalData {
  __typename?: "IncrementalData";
  benchmarkCusip?: Maybe<Scalars["String"]>;
  benchmarkPrice?: Maybe<Scalars["String"]>;
  benchmarkPriceType?: Maybe<Scalars["String"]>;
  coverBid?: Maybe<Scalars["String"]>;
  cusip: Scalars["String"];
  entryDate?: Maybe<Scalars["String"]>;
  entryPrice: Scalars["Float"];
  entrySize: Scalars["Int"];
  entryTime?: Maybe<Scalars["String"]>;
  entryType: EntryType;
  entryUpdateAction: Action2;
  executionType?: Maybe<Scalars["String"]>;
  hitOrLiftSide?: Maybe<Scalars["String"]>;
  id: Scalars["String"];
  impliedSpread?: Maybe<Scalars["String"]>;
  mineFlag?: Maybe<Scalars["String"]>;
  minimumBalanceRemaining?: Maybe<Scalars["Int"]>;
  minimumIncrement?: Maybe<Scalars["Int"]>;
  minimumQuantity?: Maybe<Scalars["Int"]>;
  product?: Maybe<Scalars["String"]>;
  updatedAt: Scalars["String"];
  yieldToMaturity?: Maybe<Scalars["Float"]>;
  yieldToWorst?: Maybe<Scalars["Float"]>;
}
export enum EntryType {
  Bid = "BID",
  Offer = "OFFER",
  Trade = "TRADE"
}
export enum Action2 {
  New = "NEW",
  Update = "UPDATE",
  Delete = "DELETE"
}
export interface GetComparisonsResponse {
  __typename?: "GetComparisonsResponse";
  comparisons: Array<Maybe<Comparison>>;
}
/** Comparison of the portfolio */
export interface Comparison {
  __typename?: "Comparison";
  /** Value for average fund */
  average: Scalars["Float"];
  /** Type of comparison */
  comparisonType: Scalars["String"];
  /** Absolute difference between InPaaS portfolio and average fund */
  difference: Scalars["Float"];
  /** Value for InPaaS portfolio */
  inpaas: Scalars["Float"];
  /** Percentage difference between InPaaS portfolio and average fund */
  percentageDifference: Scalars["Float"];
}
export type GetComparisonsRequestInput = {
  portfolioAnalyzerAnalysis: PortfolioAnalyzerAnalysisInput;
};
export type PortfolioAnalyzerAnalysisInput = {
  allocations?: Maybe<AllocationsInput>;
  createdAt: Scalars["String"];
  /** The weighted average current coupon of the portfolio */
  currentCoupon?: Maybe<Scalars["Float"]>;
  /** The weighted average duration of the portfolio */
  duration?: Maybe<Scalars["Float"]>;
  /** Scores for Environmental, Social, and Governance */
  esgScores?: Maybe<EsgScoresInput>;
  estimatedPerformance?: Maybe<EstimatedPerformanceInput>;
  /** Fund expense ratio */
  expenseRatio?: Maybe<Scalars["Float"]>;
  /** Unique identifier for this analysis */
  id: Scalars["String"];
  /** A measure of issuer concentration, computed as 1 - square(sum(percentNetAssetValue to issuer)) */
  issuerConcentration?: Maybe<Scalars["Float"]>;
  metadata?: Maybe<Scalars["JSON"]>;
  /** The NAV of the Entire Portfolio */
  netAssetValue?: Maybe<Scalars["Float"]>;
  /** The identifier of the portfolio the analysis was conducted on */
  portfolioId: Scalars["String"];
  /** The analytical risk of the portfolio */
  risk?: Maybe<Scalars["Float"]>;
  /** The weighted average spread of the portfolio */
  spread?: Maybe<Scalars["Float"]>;
  updatedAt: Scalars["String"];
  /** Projections of portfolio growth over time */
  wealthProjections?: Maybe<Array<Maybe<WealthProjectionsListItemInput>>>;
  yearsToMaturity?: Maybe<Scalars["Float"]>;
  /** The weighted average yield of the portfolio */
  yield?: Maybe<Scalars["Float"]>;
  /** Contribution of each asset to the portfolio's yield */
  yieldContributions?: Maybe<Array<Maybe<YieldContributionsListItemInput>>>;
};
export type AllocationsInput = {
  /** Country allocation data */
  country?: Maybe<Scalars["JSON"]>;
  /** Currency allocation data */
  currency?: Maybe<Scalars["JSON"]>;
  datastreamSubtype?: Maybe<DatastreamTypeInput>;
  datastreamType?: Maybe<DatastreamTypeInput>;
  debtType?: Maybe<DebtTypeInput>;
  /** Maturity allocation data */
  maturity?: Maybe<MaturityInput>;
  /** Rating allocation data */
  rating?: Maybe<RatingInput>;
  /** Region allocation data */
  region?: Maybe<RegionInput>;
  /** Sector allocation */
  sector?: Maybe<SectorInput>;
};
export type DatastreamTypeInput = {
  buckets: Array<Maybe<BucketsListItemInput>>;
};
export type BucketsListItemInput = {
  contributors?: Maybe<Array<Maybe<ContributorsListItemInput>>>;
  name: Scalars["String"];
  percentOfNetAssetValue: Scalars["Float"];
};
export type ContributorsListItemInput = {
  assetId: Scalars["String"];
  percentOfNetAssetValue: Scalars["Float"];
  positionId: Scalars["String"];
};
export type DebtTypeInput = {
  buckets: Array<Maybe<ItemsInput>>;
};
export type ItemsInput = {
  contributors?: Maybe<Array<Maybe<ContributorsListItemInput>>>;
  name: Scalars["String"];
  percentOfNetAssetValue: Scalars["Float"];
};
/** Maturity allocation data */
export type MaturityInput = {
  /** Allocation to securities maturing in 5-10 years */
  fiveToTenYears?: Maybe<Scalars["Float"]>;
  /** Allocation to securities maturing in greater than 30 years */
  greaterThanThirtyYears?: Maybe<Scalars["Float"]>;
  /** Allocation to securities maturing in less than 1 years */
  lessThanOneYear?: Maybe<Scalars["Float"]>;
  /** Allocation to securities maturing in 1-3 years */
  oneToThreeYears?: Maybe<Scalars["Float"]>;
  /** Allocation to securities with an unknown or uncategorizable maturity */
  other?: Maybe<Scalars["Float"]>;
  /** Allocation to securities maturing in 10-20 years */
  tenToTwentyYears?: Maybe<Scalars["Float"]>;
  /** Allocation to securities maturing in 3-5 years */
  threeToFiveYears?: Maybe<Scalars["Float"]>;
  /** Allocation to securities maturing in 20-30 years */
  twentyToThirtyYears?: Maybe<Scalars["Float"]>;
};
/** Rating allocation data */
export type RatingInput = {
  investmentGrade?: Maybe<InvestmentGradeInput>;
  nonInvestmentGrade?: Maybe<NonInvestmentGradeInput>;
};
export type InvestmentGradeInput = {
  a?: Maybe<Scalars["Float"]>;
  aa?: Maybe<Scalars["Float"]>;
  aaa?: Maybe<Scalars["Float"]>;
  bbb?: Maybe<Scalars["Float"]>;
  total?: Maybe<Scalars["Float"]>;
};
export type NonInvestmentGradeInput = {
  b?: Maybe<Scalars["Float"]>;
  bb?: Maybe<Scalars["Float"]>;
  c?: Maybe<Scalars["Float"]>;
  d?: Maybe<Scalars["Float"]>;
  nr?: Maybe<Scalars["Float"]>;
  total?: Maybe<Scalars["Float"]>;
};
/** Region allocation data */
export type RegionInput = {
  /** Allocation to Africa ex-North Africa */
  africaExNorthAfrica?: Maybe<Scalars["Float"]>;
  /** Allocation to Asia Pacific ex-Japan */
  asiaPacificExJapan?: Maybe<Scalars["Float"]>;
  /** Allocation to emerging markets in Asia */
  emergingMarketsAsia?: Maybe<Scalars["Float"]>;
  /** Allocation to emerging markets in Europe */
  emergingMarketsEurope?: Maybe<Scalars["Float"]>;
  /** Allocation to Europe ex-United Kingdom */
  europeExUnitedKingdom?: Maybe<Scalars["Float"]>;
  /** Allocation to Japan */
  japan?: Maybe<Scalars["Float"]>;
  /** Allocation to Latin America */
  latinAmerica?: Maybe<Scalars["Float"]>;
  /** Allocation to the Middle East and North Africa */
  middleEastNorthAfrica?: Maybe<Scalars["Float"]>;
  /** Allocation to North America ex-United States */
  northAmericaExUnitedStates?: Maybe<Scalars["Float"]>;
  /** Allocation to other or unknown regions */
  other?: Maybe<Scalars["Float"]>;
  /** Allocation to the United Kingdom */
  unitedKingdom?: Maybe<Scalars["Float"]>;
  /** Allocation to the United States */
  unitedStates?: Maybe<Scalars["Float"]>;
};
/** Sector allocation */
export type SectorInput = {
  /** Allocation to the agency sector */
  agency?: Maybe<Scalars["Float"]>;
  /** Allocation to the communications sector */
  communications?: Maybe<Scalars["Float"]>;
  /** Allocation to the consumer goods sector */
  consumerGoods?: Maybe<Scalars["Float"]>;
  /** Allocation to the energy sector */
  energy?: Maybe<Scalars["Float"]>;
  /** Allocation to the financials sector */
  financials?: Maybe<Scalars["Float"]>;
  /** Allocation to the manufacturing sector */
  manufacturing?: Maybe<Scalars["Float"]>;
  /** Allocation to the municipal sector */
  municipal?: Maybe<Scalars["Float"]>;
  /** Allocation to the other sector */
  other?: Maybe<Scalars["Float"]>;
  /** Allocation to the services sector */
  services?: Maybe<Scalars["Float"]>;
  /** Allocation to the sovereign sector */
  sovereign?: Maybe<Scalars["Float"]>;
  /** Allocation to the supranational sector */
  supranational?: Maybe<Scalars["Float"]>;
  /** Allocation to the transportation sector */
  transportation?: Maybe<Scalars["Float"]>;
};
/** Scores for Environmental, Social, and Governance */
export type EsgScoresInput = {
  /** Environmental score */
  environmental?: Maybe<Scalars["Float"]>;
  /** Governance score */
  governance?: Maybe<Scalars["Float"]>;
  /** Social score */
  social?: Maybe<Scalars["Float"]>;
  /** Overall score */
  total?: Maybe<Scalars["Float"]>;
};
export type EstimatedPerformanceInput = {
  averageMaximumDrawdown?: Maybe<AverageMaximumDrawdownInput>;
  endDate: Scalars["String"];
  estimatedMaximumDrawdown: EstimatedMaximumDrawdownInput;
  startDate: Scalars["String"];
  timeSeries: Array<Maybe<TimeSeriesListItemInput>>;
};
export type AverageMaximumDrawdownInput = {
  averageValue: Scalars["Float"];
  rankedMaximumDrawdowns: Array<Maybe<RankedMaximumDrawdownsListItemInput>>;
};
export type RankedMaximumDrawdownsListItemInput = {
  endDate: Scalars["String"];
  rank: Scalars["Int"];
  startDate: Scalars["String"];
  value: Scalars["Float"];
};
export type EstimatedMaximumDrawdownInput = {
  endDate: Scalars["String"];
  startDate: Scalars["String"];
  value: Scalars["Float"];
};
export type TimeSeriesListItemInput = {
  cumulativeReturn: Scalars["Float"];
  endDate: Scalars["String"];
  periodReturn: Scalars["Float"];
  startDate: Scalars["String"];
};
/** Wealth projection as of a particular date */
export type WealthProjectionsListItemInput = {
  /** Wealth projection as of date */
  date: Scalars["String"];
  percentiles: Array<Maybe<PercentilesListItemInput>>;
};
/** Wealth projection NAVs with percentiles */
export type PercentilesListItemInput = {
  /** Cumulative Return */
  cumulativeReturn: Scalars["Float"];
  /** NAV */
  nav: Scalars["Float"];
  /** Percentile */
  percentile: Scalars["Float"];
};
/** An asset's contribution to portfolio yield */
export type YieldContributionsListItemInput = {
  /** Asset ID */
  assetId: Scalars["String"];
  /** Percent contribution to portfolio yield */
  percentContribution: Scalars["Float"];
};
export interface GetMinMaxRiskResponse {
  __typename?: "GetMinMaxRiskResponse";
  maxRisk: Scalars["Float"];
  minRisk: Scalars["Float"];
}
export type GetMinMaxRiskRequestInput = {
  /** Array of assetId. If provided, this will be used in place of the default whitelist. */
  whitelist?: Maybe<Array<Maybe<Scalars["String"]>>>;
};
export interface GetMinMaxYieldResponse {
  __typename?: "GetMinMaxYieldResponse";
  maxYield: Scalars["Float"];
  minYield: Scalars["Float"];
}
export type GetMinMaxYieldRequestInput = {
  /** Array of assetId. If provided, this will be used in place of the default whitelist. */
  whitelist?: Maybe<Array<Maybe<Scalars["String"]>>>;
};
export interface GetPortfolioMappingResponse2 {
  __typename?: "GetPortfolioMappingResponse2";
  portfolioMapping: PortfolioMapping2;
}
export interface PortfolioMapping2 {
  __typename?: "PortfolioMapping2";
  portfolioId: Scalars["String"];
  portfolioType: PortfolioType;
  proposalId: Scalars["String"];
}
export enum PortfolioType {
  Live = "LIVE",
  External = "EXTERNAL"
}
export interface GetProposalResponse {
  __typename?: "GetProposalResponse";
  proposal: Proposal;
}
export interface Proposal {
  __typename?: "Proposal";
  /** A list of paragraphs of commentary describing the impact of the proposal */
  commentary: Array<Maybe<CommentaryItem>>;
  incomePortfoliosAnalysis: IncomePortfoliosAnalysis;
  /** The proposed orders required to implement the proposal */
  orders?: Maybe<Array<Maybe<Order>>>;
  originalIncomePortfoliosAnalysis?: Maybe<IncomePortfoliosAnalysis>;
  portfolio: Portfolio;
  proposalId: Scalars["String"];
  proposalRequest: ProposalRequest;
  updatedAt: Scalars["String"];
}
/** An item of commentary */
export interface CommentaryItem {
  __typename?: "CommentaryItem";
  /** Free-form text commentary on the topic */
  content: Scalars["String"];
  /** The topic the commentary item relates to */
  topic: Scalars["String"];
}
export interface IncomePortfoliosAnalysis {
  __typename?: "IncomePortfoliosAnalysis";
  /** The portfolio's yield after considering taxes */
  afterTaxYield: Scalars["Float"];
  /** A list of paragraphs of commentary describing the current state of the portfolio */
  commentary?: Maybe<Array<Maybe<CommentaryItem>>>;
  /** Comparisons of the portfolio to an average fund */
  comparisons?: Maybe<Array<Maybe<Comparison>>>;
  /** The portfolio's expected annualized expense ratio */
  expenseRatio: Scalars["Float"];
  /** The portfolio's expected monthly income */
  income: Scalars["Float"];
  /** The portfolio's maximum drawdown */
  maxDrawdown: Scalars["Float"];
  /** The portfolio's risk value */
  risk: Scalars["Float"];
  /** The portfolio's expected yield */
  yield: Scalars["Float"];
}
export interface Order {
  __typename?: "Order";
  /** The unique identifier for the asset on BondHouse's systems */
  assetId: Scalars["String"];
  /** The order direction (BUY, SELL, etc.) */
  direction: Direction;
  /** The position's market value */
  marketValue?: Maybe<Scalars["Float"]>;
  /**
   * The position's quantity in market standard units. In general, equities, exchange-traded products and mutual
   * funds are quoted in shares, while bonds are quoted in face value.
   */
  quantity: Scalars["Float"];
}
export enum Direction {
  Buy = "BUY",
  Sell = "SELL"
}
export interface Portfolio {
  __typename?: "Portfolio";
  accountNumber?: Maybe<Scalars["String"]>;
  app?: Maybe<App>;
  createdAt: Scalars["String"];
  currency: Scalars["String"];
  description?: Maybe<Scalars["String"]>;
  id: Scalars["String"];
  metadata?: Maybe<Scalars["JSON"]>;
  name: Scalars["String"];
  positions: Array<Maybe<PositionsListItem>>;
  status: Status;
  updatedAt?: Maybe<Scalars["String"]>;
}
export enum App {
  Inpaas = "INPAAS",
  Custom = "CUSTOM"
}
export interface PositionsListItem {
  __typename?: "PositionsListItem";
  /** The BondHouse unique identifier for the asset */
  assetId: Scalars["String"];
  /** The total cost basis of the position (not basis per share) */
  costBasis?: Maybe<Scalars["Float"]>;
  createdAt?: Maybe<Scalars["String"]>;
  /** A unique identifier for the position */
  id: Scalars["String"];
  metadata?: Maybe<Scalars["JSON"]>;
  /** The unique identifier for the portfolio */
  portfolioId: Scalars["String"];
  /** The position quantity in standard market units (face for bonds, shares for equities, etc.) */
  quantity: Scalars["Float"];
  settled?: Maybe<Scalars["Float"]>;
  /** The trade date */
  tradeDate?: Maybe<Scalars["String"]>;
  unsettled?: Maybe<Scalars["Float"]>;
  updatedAt?: Maybe<Scalars["String"]>;
}
export enum Status {
  Pending = "PENDING",
  Ready = "READY",
  Terminated = "TERMINATED"
}
export interface ProposalRequest {
  __typename?: "ProposalRequest";
  /** Portfolio constraints */
  constraints?: Maybe<Constraints>;
  /** Investment goal for a portfolio - either income, yield, or risk is required */
  goal: Goal;
  /**
   * The initial amount of money to invest into the portfolio, or the NAV of the existing portfolio +/- a cash
   * transfer
   */
  investmentAmount: Scalars["Float"];
  /** If rebalancing a proposal, the portfolioId must be provided in the response. */
  portfolioId?: Maybe<Scalars["String"]>;
  /** Tax bracket information. Reserved for future use. */
  taxBrackets?: Maybe<TaxBrackets>;
  /** Array of assetId. If provided, this will be used in place of the default whitelist. */
  whitelist?: Maybe<Array<Maybe<Scalars["String"]>>>;
}
/** Portfolio constraints */
export interface Constraints {
  __typename?: "Constraints";
  /** Maximum weight of each position, expressed as a portion of the portfolio, where 100% is 1 */
  maximumWeight?: Maybe<Scalars["Float"]>;
  /** Minimum weight of each position, expressed as a portion of the portfolio, where 100% is 1 */
  minimumWeight?: Maybe<Scalars["Float"]>;
}
/** Investment goal for a portfolio - either income, yield, or risk is required */
export interface Goal {
  __typename?: "Goal";
  /** The target amount of income in dollar terms that the portfolio is trying to earn */
  income?: Maybe<Scalars["Float"]>;
  /** The annualized risk or volatility in percentage terms for the portfolio */
  risk?: Maybe<Scalars["Float"]>;
  /** The annualized target yield in percentage terms that the portfolio is trying to earn */
  yield?: Maybe<Scalars["Float"]>;
}
/** Tax bracket information. Reserved for future use. */
export interface TaxBrackets {
  __typename?: "TaxBrackets";
  /** Federal tax rate in percent e.g. 35% */
  federalTaxRate?: Maybe<Scalars["Float"]>;
  /** State tax rate in percent e.g. 5% */
  stateTaxRate?: Maybe<Scalars["Float"]>;
}
export interface GetPortfolioResponse {
  __typename?: "GetPortfolioResponse";
  analysis: Analysis;
  /** A portfolio */
  portfolio: Portfolio2;
  proposalRequest: ProposalRequest2;
}
export interface Analysis {
  __typename?: "Analysis";
  /** The portfolio's yield after considering taxes */
  afterTaxYield: Scalars["Float"];
  /** A list of paragraphs of commentary describing the current state of the portfolio */
  commentary?: Maybe<Array<Maybe<CommentaryItem>>>;
  /** Comparisons of the portfolio to an average fund */
  comparisons?: Maybe<Array<Maybe<Comparison2>>>;
  /** The portfolio's expected annualized expense ratio */
  expenseRatio: Scalars["Float"];
  /** The portfolio's expected monthly income */
  income: Scalars["Float"];
  /** The portfolio's maximum drawdown */
  maxDrawdown: Scalars["Float"];
  /** The portfolio's risk value */
  risk: Scalars["Float"];
  /** The portfolio's expected yield */
  yield: Scalars["Float"];
}
/** Comparison of the portfolio */
export interface Comparison2 {
  __typename?: "Comparison2";
  /** Value for average fund */
  average?: Maybe<Scalars["Float"]>;
  /** Type of comparison */
  comparisonType?: Maybe<Scalars["String"]>;
  /** Absolute difference between InPaaS portfolio and average fund */
  difference?: Maybe<Scalars["Float"]>;
  /** Value for InPaaS portfolio */
  inpaas?: Maybe<Scalars["Float"]>;
  /** Percentage difference between InPaaS portfolio and average fund */
  percentageDifference?: Maybe<Scalars["Float"]>;
}
/** A portfolio */
export interface Portfolio2 {
  __typename?: "Portfolio2";
  /** When the portfolio was created */
  createdAt: Scalars["String"];
  /** The base currency of the portfolio */
  currency: Scalars["String"];
  /** A unique portfolio identifier */
  id: Scalars["String"];
  /** Arbitrary key-value pairs */
  metadata?: Maybe<Scalars["JSON"]>;
  /** The name of the portfolio */
  name: Scalars["String"];
  /** A list of the positions in the portfolio */
  positions: Array<Maybe<Position>>;
  /** When the portfolio was last updated */
  updatedAt: Scalars["String"];
}
/** A position */
export interface Position {
  __typename?: "Position";
  /** The unique identifier for the asset on BondHouse's systems */
  assetId: Scalars["String"];
  /** A unique identifier for the position within the portfolio */
  id: Scalars["String"];
  /** The position's market value */
  marketValue: Scalars["Float"];
  /** The name of the asset */
  name?: Maybe<Scalars["String"]>;
  /** The price of the instrument */
  price: Scalars["Float"];
  publicIdentifiers: PublicIdentifiers;
  /**
   * The position's quantity in market standard units. In general, equities, exchange-traded products and mutual
   * funds are quoted in shares, while bonds are quoted in face value.
   */
  quantity: Scalars["Float"];
  /** The weight of the position in the portfolio */
  weight: Scalars["Float"];
  /** Yield on the position */
  yield: Scalars["Float"];
}
export interface PublicIdentifiers {
  __typename?: "PublicIdentifiers";
  /** The instrument's [CUSIP](https://www.cusip.com/). Availability may be affected by licensing. */
  cusip?: Maybe<Scalars["String"]>;
  /** The instrument's [ISIN](https://www.isin.org/). Availability may be affected by licensing. */
  isin?: Maybe<Scalars["String"]>;
  /** The instrument's [SEDOL](https://www.lseg.com/sedol). Availability may be affected by licensing. */
  sedol?: Maybe<Scalars["String"]>;
  /** The instrument's primary market ticker */
  ticker?: Maybe<Scalars["String"]>;
}
export interface ProposalRequest2 {
  __typename?: "ProposalRequest2";
  /** Portfolio constraints */
  constraints?: Maybe<Constraints>;
  /** Investment goal for a portfolio - either income, yield, or risk is required */
  goal: Goal;
  /**
   * The initial amount of money to invest into the portfolio, or the NAV of the existing portfolio +/- a cash
   * transfer
   */
  investmentAmount: Scalars["Float"];
  /** If rebalancing a proposal, the portfolioId must be provided in the response. */
  portfolioId?: Maybe<Scalars["String"]>;
  /** Tax bracket information */
  taxBrackets?: Maybe<TaxBrackets2>;
}
/** Tax bracket information */
export interface TaxBrackets2 {
  __typename?: "TaxBrackets2";
  /** Federal tax rate in percent e.g. 35% */
  federalTaxRate?: Maybe<Scalars["Float"]>;
  /** State tax rate in percent e.g. 5% */
  stateTaxRate?: Maybe<Scalars["Float"]>;
}
export interface GetProposalResponse2 {
  __typename?: "GetProposalResponse2";
  proposal: Proposal2;
}
export interface Proposal2 {
  __typename?: "Proposal2";
  analysis: Analysis;
  /** A list of paragraphs of commentary describing the impact of the proposal */
  commentary: Array<Maybe<CommentaryItem>>;
  /** The proposed orders required to implement the proposal */
  orders?: Maybe<Array<Maybe<Order>>>;
  originalAnalysis?: Maybe<Analysis>;
  /** A portfolio */
  portfolio: Portfolio2;
  proposalId: Scalars["String"];
  proposalRequest: ProposalRequest2;
  updatedAt: Scalars["String"];
}
export interface GetInvestorResponse {
  __typename?: "GetInvestorResponse";
  investor: Investor;
}
export interface Investor {
  __typename?: "Investor";
  createdAt: Scalars["String"];
  id: Scalars["String"];
  investorInfo: InvestorInfo;
  /** cannot be updated */
  investorType: InvestorType;
  metadata?: Maybe<Scalars["JSON"]>;
  status?: Maybe<InvestorStatus>;
  updatedAt: Scalars["String"];
}
export interface InvestorInfo {
  __typename?: "InvestorInfo";
  applicantSignature: ApplicantSignature2;
  /** Only required for organizations */
  beneficialOwnersAndOfficers?: Maybe<BeneficialOwnersAndOfficers>;
  birthCountry?: Maybe<Scalars["String"]>;
  /** Agreement for corporations. Required for organizations with entityType of C_CORPORATION or S_CORPORATION */
  cashAccountAgreement?: Maybe<CashAccountAgreement>;
  catAccountHolderType?: Maybe<CatAccountHolderType2>;
  citizenshipCountry: Scalars["String"];
  contactInformation: ContactInformation;
  disclosures: Disclosures2;
  /** Only required for individuals */
  employment?: Maybe<Employment2>;
  entityDueDiligence?: Maybe<EntityDueDiligence>;
  /** Only required for organizations */
  exemptLegalCustomer?: Maybe<ExemptLegalCustomer>;
  familyName: Scalars["String"];
  givenName: Scalars["String"];
  /** Only required for individuals */
  investmentProfile?: Maybe<InvestmentProfile2>;
  /** cannot be updated */
  investorType?: Maybe<InvestorType>;
  isPermanentResident?: Maybe<Scalars["Boolean"]>;
  /** cannot be updated, defaults to accept */
  issuerDirectCommunication?: Maybe<IssuerDirectCommunication>;
  /**
   * Agreement for LLCs. Required for organizations with entityType of LIMITED_LIABILITY_COMPANY_C_CORPORATION,
   * LIMITED_LIABILITY_COMPANY_S_CORPORATION, or LIMITED_LIABILITY_COMPANY_PARTNERSHIP
   */
  llcAccountAgreement?: Maybe<LlcAccountAgreement>;
  /** Only required for organizations */
  organization?: Maybe<Organization>;
  organizationName?: Maybe<Scalars["String"]>;
  suitabilityProfile: SuitabilityProfile;
  title?: Maybe<Scalars["String"]>;
  trustedContactInfo: TrustedContactInfo;
  /** Only required for organizations */
  wnineTaxForm?: Maybe<WNineTaxForm>;
}
export interface ApplicantSignature2 {
  __typename?: "ApplicantSignature2";
  eSigned: Scalars["Boolean"];
}
/** Only required for organizations */
export interface BeneficialOwnersAndOfficers {
  __typename?: "BeneficialOwnersAndOfficers";
  beneficialOwners: Array<Maybe<BeneficialOwners3>>;
  businessClassification: BusinessClassification;
  officers: Array<Maybe<Officers2>>;
}
export interface BeneficialOwners3 {
  __typename?: "BeneficialOwners3";
  address: Address;
  dateOfBirth: Scalars["String"];
  /** Either ssn or other identification number is required (i.e. passport) */
  identificationNumber?: Maybe<Scalars["String"]>;
  name: Name;
  /** Either ssn or other identification number is required (i.e. passport) */
  socialSecurityNumber?: Maybe<Scalars["String"]>;
}
export interface Address {
  __typename?: "Address";
  city: Scalars["String"];
  country: Scalars["String"];
  postalCode?: Maybe<Scalars["String"]>;
  state?: Maybe<Scalars["String"]>;
  /** Upto 3 rows */
  streetAddress: Array<Maybe<Scalars["String"]>>;
}
export interface Name {
  __typename?: "Name";
  familyName: Scalars["String"];
  givenName: Scalars["String"];
  legalName: Scalars["String"];
}
export enum BusinessClassification {
  AgricultureForestryFishing = "AGRICULTURE_FORESTRY_FISHING",
  Mining = "MINING",
  Construction = "CONSTRUCTION",
  Manufacturing = "MANUFACTURING",
  TransportationCommunicationsElectricGasSanitaryServices = "TRANSPORTATION_COMMUNICATIONS_ELECTRIC_GAS_SANITARY_SERVICES",
  WholesaleTrade = "WHOLESALE_TRADE",
  RetailTrade = "RETAIL_TRADE",
  FinanceInsuranceRealEstate = "FINANCE_INSURANCE_REAL_ESTATE",
  Services = "SERVICES",
  PublicAdministration = "PUBLIC_ADMINISTRATION"
}
export interface Officers2 {
  __typename?: "Officers2";
  address: Address;
  dateOfBirth: Scalars["String"];
  /** Either ssn or other identification number is required (i.e. passport) */
  identificationNumber?: Maybe<Scalars["String"]>;
  name: Name;
  /** Either ssn or other identification number is required (i.e. passport) */
  socialSecurityNumber?: Maybe<Scalars["String"]>;
}
/** Agreement for corporations. Required for organizations with entityType of C_CORPORATION or S_CORPORATION */
export interface CashAccountAgreement {
  __typename?: "CashAccountAgreement";
  /** upload articles of incorporation and place the document Id string here */
  articlesOfIncorporationSnapId: Scalars["String"];
  authorizedOfficerName: Scalars["String"];
  authorizedOfficerTitle: Scalars["String"];
  /** organizationName can be placed here */
  corporationName: Scalars["String"];
  isAuthorizedOfficerESigned: Scalars["Boolean"];
  isSecretaryESigned: Scalars["Boolean"];
  secretaryName: Scalars["String"];
  /** 2 character state abbreviation */
  stateOfIncorporation: Scalars["String"];
}
export enum CatAccountHolderType2 {
  InstitutionalCustomer = "INSTITUTIONAL_CUSTOMER",
  EmployeeAccount = "EMPLOYEE_ACCOUNT",
  IndividualCustomer = "INDIVIDUAL_CUSTOMER"
}
export interface ContactInformation {
  __typename?: "ContactInformation";
  city: Scalars["String"];
  country: Scalars["String"];
  /** The organization form only takes one email so only the first will be taken */
  emailAddresses: Array<Maybe<Scalars["String"]>>;
  phone: Scalars["String"];
  phoneType: PhoneType;
  postalCode: Scalars["String"];
  state: Scalars["String"];
  streetAddress: Scalars["String"];
}
export enum PhoneType {
  Home = "HOME",
  Work = "WORK",
  Mobile = "MOBILE",
  Fax = "FAX",
  Other = "OTHER"
}
export interface Disclosures2 {
  __typename?: "Disclosures2";
  /**
   * The form Ids of the 407 approval form. Required if isAffiliatedExchangeOrFINRA is true AND investorType is
   * INDIVIDUAL. Not required for organizations.
   */
  affiliatedApproval?: Maybe<Array<Maybe<Scalars["String"]>>>;
  /** required if isControlPerson is true */
  companySymbols?: Maybe<Array<Maybe<Scalars["String"]>>>;
  /** required if isAffiliatedExchangeOrFINRA is true */
  firmName?: Maybe<Scalars["String"]>;
  interestedParties?: Maybe<Array<Maybe<InterestedParties4>>>;
  isAffiliatedExchangeOrFINRA: Scalars["Boolean"];
  isControlPerson: Scalars["Boolean"];
  isPoliticallyExposed: Scalars["Boolean"];
  politicalExposureDetail?: Maybe<PoliticalExposureDetail2>;
}
/** required if isAffiliatedExchangeOrFINRA is true AND employer requires notices. Cannot be updated. */
export interface InterestedParties4 {
  __typename?: "InterestedParties4";
  mailingAddress: InterestedPartyAddress;
  /** This only applies to individual accounts */
  name: InterestedPartyName;
}
export interface InterestedPartyAddress {
  __typename?: "InterestedPartyAddress";
  city: Scalars["String"];
  country: Scalars["String"];
  postalCode: Scalars["String"];
  state: Scalars["String"];
  streetAddress: Array<Maybe<Scalars["String"]>>;
}
export interface PoliticalExposureDetail2 {
  __typename?: "PoliticalExposureDetail2";
  /** required if isPoliticallyExposed is true */
  immediateFamily: Array<Maybe<Scalars["String"]>>;
  /** required if isPoliticallyExposed is true */
  politicalOrganization: Scalars["String"];
}
/** Only required for individuals */
export interface Employment2 {
  __typename?: "Employment2";
  /** required if employed is true */
  employer?: Maybe<Scalars["String"]>;
  employmentStatus: EmploymentStatus;
  /** required if employed is true */
  positionEmployed?: Maybe<Scalars["String"]>;
}
export interface EntityDueDiligence {
  __typename?: "EntityDueDiligence";
  accountActivity: AccountActivity;
  accountInformation: DueDiligenceAccountInformation2;
  additionalAccounts: AdditionalAccounts;
  assessedRiskRating: AssessedRiskRating;
  entityOrAssociatesHaveNegativeNews: Scalars["Boolean"];
  politicallyExposedPersons: PoliticallyExposedPersons;
}
export interface AccountActivity {
  __typename?: "AccountActivity";
  expectedWithdrawalFrequency: ExpectedWithdrawalFrequency;
  initialDepositAmount: Scalars["Float"];
  initialDepositSource: Scalars["String"];
  primaryEntityAccountActivity: PrimaryEntityAccountActivity;
  willTransactForeignBonds: Scalars["Boolean"];
  willTransactLowPricedSecurities: Scalars["Boolean"];
}
export enum PrimaryEntityAccountActivity {
  ActiveTrading = "ACTIVE_TRADING",
  ShortTermInvesting = "SHORT_TERM_INVESTING",
  LongTermInvesting = "LONG_TERM_INVESTING"
}
export interface DueDiligenceAccountInformation2 {
  __typename?: "DueDiligenceAccountInformation2";
  accountName: Scalars["String"];
  businessLocations: Array<Maybe<Scalars["String"]>>;
  countryOfIncorporation: Scalars["String"];
  hasRelatedAccounts: Scalars["Boolean"];
  relatedAccountList?: Maybe<Array<Maybe<RelatedAccounts2>>>;
}
export interface RelatedAccounts2 {
  __typename?: "RelatedAccounts2";
  accountNumber: Scalars["String"];
  entityName: Scalars["String"];
}
export interface AdditionalAccounts {
  __typename?: "AdditionalAccounts";
  confirmEntityDoesNotIssueBearerShares: Scalars["Boolean"];
  institutionNames: Array<Maybe<Scalars["String"]>>;
  primaryOngoingFundingSource: PrimaryOngoingFundingSource;
  primaryOngoingFundingSourceClarification?: Maybe<Scalars["String"]>;
  scopeOfBusiness: ScopeOfBusiness;
  scopeOfBusinessClarification?: Maybe<Scalars["String"]>;
}
export interface PoliticallyExposedPersons {
  __typename?: "PoliticallyExposedPersons";
  isPoliticallyExposed: Scalars["Boolean"];
  politicalOfficials?: Maybe<Array<Maybe<PoliticalOfficials3>>>;
}
export interface PoliticalOfficials3 {
  __typename?: "PoliticalOfficials3";
  immediateFamily: Array<Maybe<Scalars["String"]>>;
  legalName: Scalars["String"];
  politicalOrganization: Scalars["String"];
  politicalTitle: Scalars["String"];
  role: Scalars["String"];
}
/** Only required for organizations */
export interface ExemptLegalCustomer {
  __typename?: "ExemptLegalCustomer";
  /** required if customerExempt is true */
  exemption?: Maybe<CustomerExemption>;
  isExemptLegalCustomer: Scalars["Boolean"];
}
export enum CustomerExemption {
  DepartmentOrAgencyOfFederalStateOrSubdivision = "DEPARTMENT_OR_AGENCY_OF_FEDERAL_STATE_OR_SUBDIVISION",
  NonBankListedEntity = "NON_BANK_LISTED_ENTITY",
  Section_12SecuritiesExchangeAct_1934Or_15D = "SECTION_12_SECURITIES_EXCHANGE_ACT_1934_OR_15D",
  Section_3InvestmentCompanyAct_1940 = "SECTION_3_INVESTMENT_COMPANY_ACT_1940",
  Section_202AInvestmentAdvisorsAct_1940 = "SECTION_202A_INVESTMENT_ADVISORS_ACT_1940",
  Section_3SecuritiesExchangeAct_1934Section_6Or_17A = "SECTION_3_SECURITIES_EXCHANGE_ACT_1934_SECTION_6_OR_17A",
  AnyOtherSecuritiesExchangeAct_1934 = "ANY_OTHER_SECURITIES_EXCHANGE_ACT_1934",
  CommodityFuturesTradingCommisionRegistered = "COMMODITY_FUTURES_TRADING_COMMISION_REGISTERED",
  PublicAccountingFirmSection_102SarbanesOxley = "PUBLIC_ACCOUNTING_FIRM_SECTION_102_SARBANES_OXLEY",
  StateRegulatedInsuranceCompany = "STATE_REGULATED_INSURANCE_COMPANY"
}
/** Only required for individuals */
export interface InvestmentProfile2 {
  __typename?: "InvestmentProfile2";
  annualIncomeUSD: Amount;
  /** a number between 0 and 100 */
  federalTaxBracketPercent: Scalars["Float"];
  investmentExperience: InvestmentExperience;
  investmentObjective: InvestmentObjective2;
  liquidNetWorthUSD: Worth;
  riskTolerance: RiskTolerance2;
  totalNetWorthUSD: Worth;
}
export enum InvestmentObjective2 {
  Growth = "GROWTH",
  Income = "INCOME",
  CapitalPreservation = "CAPITAL_PRESERVATION",
  Speculation = "SPECULATION",
  Other = "OTHER"
}
export enum RiskTolerance2 {
  High = "HIGH",
  Medium = "MEDIUM",
  Low = "LOW"
}
export enum InvestorType {
  Individual = "INDIVIDUAL",
  Organization = "ORGANIZATION"
}
export enum IssuerDirectCommunication {
  Object = "OBJECT",
  Accept = "ACCEPT"
}
/**
 * Agreement for LLCs. Required for organizations with entityType of LIMITED_LIABILITY_COMPANY_C_CORPORATION,
 * LIMITED_LIABILITY_COMPANY_S_CORPORATION, or LIMITED_LIABILITY_COMPANY_PARTNERSHIP
 */
export interface LlcAccountAgreement {
  __typename?: "LlcAccountAgreement";
  authorizedSignerName: Scalars["String"];
  authorizedSignerTitle: Scalars["String"];
  /** organizationName can be placed here */
  entityName: Scalars["String"];
  isAuthorizedSignerESigned: Scalars["Boolean"];
  membersAndManagers: Array<Maybe<MembersAndManagers2>>;
  /** date format YYYY-MM-DD */
  resolutionAdoptionDate: Scalars["String"];
  /** 2 character state abbreviation */
  stateOfOrigin: Scalars["String"];
}
/** Only required for organizations */
export interface Organization {
  __typename?: "Organization";
  entityType: EntityType;
  /** required if isForeignBank is TRUE */
  foreignBankUSAgent?: Maybe<Scalars["String"]>;
  isForeignBank: Scalars["Boolean"];
  isMaintainedForForeignFinancialInstitution: Scalars["Boolean"];
  uploadedWNineForm?: Maybe<Scalars["String"]>;
  usEntity: Scalars["Boolean"];
}
export enum EntityType {
  CCorporation = "C_CORPORATION",
  SCorporation = "S_CORPORATION",
  LimitedLiabilityCompanyCCorporation = "LIMITED_LIABILITY_COMPANY_C_CORPORATION",
  LimitedLiabilityCompanySCorporation = "LIMITED_LIABILITY_COMPANY_S_CORPORATION",
  LimitedLiabilityCompanyPartnership = "LIMITED_LIABILITY_COMPANY_PARTNERSHIP"
}
export interface TrustedContactInfo {
  __typename?: "TrustedContactInfo";
  trustedContact: TrustedContact;
  /** required if trustedContact is INCLUDE */
  trustedContactPerson?: Maybe<TrustedContactPerson>;
}
export enum TrustedContact {
  Include = "INCLUDE",
  Exclude = "EXCLUDE"
}
/** required if trustedContact is INCLUDE */
export interface TrustedContactPerson {
  __typename?: "TrustedContactPerson";
  emailAddress: Scalars["String"];
  familyName: Scalars["String"];
  givenName: Scalars["String"];
}
/** Only required for organizations */
export interface WNineTaxForm {
  __typename?: "WNineTaxForm";
  exemptPayeeCode?: Maybe<Scalars["String"]>;
  exemptionFromFatca?: Maybe<Scalars["String"]>;
}
export enum InvestorStatus {
  Active = "ACTIVE",
  Inactive = "INACTIVE",
  Removed = "REMOVED"
}
export interface GetDeliveryInstructionsByInvestorIdResponse {
  __typename?: "GetDeliveryInstructionsByInvestorIdResponse";
  deliveryInstructions: Array<Maybe<PortfolioDeliveryInstruction>>;
}
export interface PortfolioDeliveryInstruction {
  __typename?: "PortfolioDeliveryInstruction";
  cashOnly?: Maybe<Scalars["Boolean"]>;
  createdAt: Scalars["String"];
  id: Scalars["String"];
  instructions: Array<Maybe<ExternalEntity>>;
  investorId: Scalars["String"];
  metadata?: Maybe<Scalars["JSON"]>;
  portfolioId: Scalars["String"];
  updatedAt: Scalars["String"];
}
export interface ExternalEntity {
  __typename?: "ExternalEntity";
  externalEntityId: Scalars["String"];
  externalEntityType: ExternalEntityType;
}
export enum ExternalEntityType {
  Apex = "APEX",
  Ultimus = "ULTIMUS",
  StoneCastle = "STONE_CASTLE"
}
export interface GetLinkedBankAccountResponse {
  __typename?: "GetLinkedBankAccountResponse";
  linkedBankAccount: LinkedBankAccount;
}
export interface LinkedBankAccount {
  __typename?: "LinkedBankAccount";
  accountType: AccountType2;
  bankName: Scalars["String"];
  createdAt: Scalars["String"];
  id: Scalars["String"];
  investorId: Scalars["String"];
  mask: Scalars["String"];
  metadata?: Maybe<Scalars["JSON"]>;
  status: LinkedBankAccountStatus;
  updatedAt: Scalars["String"];
}
export enum AccountType2 {
  Checking = "CHECKING",
  Savings = "SAVINGS"
}
export enum LinkedBankAccountStatus {
  Active = "ACTIVE",
  Inactive = "INACTIVE",
  Removed = "REMOVED"
}
export interface GetLinkedBankAccountBalanceResponse {
  __typename?: "GetLinkedBankAccountBalanceResponse";
  balance: Balance;
}
export interface Balance {
  __typename?: "Balance";
  availableBalance: Scalars["Float"];
  /** bankId */
  id: Scalars["String"];
  timestamp?: Maybe<Scalars["String"]>;
}
export interface GetLinkedBankAccountsResponse {
  __typename?: "GetLinkedBankAccountsResponse";
  linkedBankAccounts: Array<Maybe<LinkedBankAccount>>;
}
export interface GetPortfolioDeliveryInstructionResponse {
  __typename?: "GetPortfolioDeliveryInstructionResponse";
  portfolioDeliveryInstruction: PortfolioDeliveryInstruction;
}
export interface GetTransferResponse {
  __typename?: "GetTransferResponse";
  transfer: Transfer3;
}
export interface Transfer3 {
  __typename?: "Transfer3";
  amount: Scalars["Float"];
  createdAt: Scalars["String"];
  currency: Scalars["String"];
  direction: TransferDirection;
  externalEntity?: Maybe<ExternalEntity>;
  id: Scalars["String"];
  investorId: Scalars["String"];
  ledgerId: Scalars["String"];
  linkedBankAccountId: Scalars["String"];
  metadata?: Maybe<Scalars["JSON"]>;
  portfolioId: Scalars["String"];
  status: TransferStatus3;
  transferMethod?: Maybe<TransferMethod>;
  updatedAt: Scalars["String"];
}
export enum TransferStatus3 {
  Pending = "PENDING",
  Completed = "COMPLETED",
  Error = "ERROR",
  Cancelled = "CANCELLED"
}
export interface GetTransfersResponse {
  __typename?: "GetTransfersResponse";
  transfers: Array<Maybe<Transfer>>;
}
export interface GetInvestorsResponse {
  __typename?: "GetInvestorsResponse";
  investors: Array<Maybe<InvestorWithApexAccount>>;
}
export interface InvestorWithApexAccount {
  __typename?: "InvestorWithApexAccount";
  apexAccount?: Maybe<ApexAccount3>;
  investor: Investor;
}
export interface ApexAccount3 {
  __typename?: "ApexAccount3";
  /** This is an accountNumber at Apex */
  apexAccountNumber: Scalars["String"];
  /** This is an Id from Apex to track the account opening request */
  apexRequestId: Scalars["String"];
  createdAt: Scalars["String"];
  /**
   * This is the internal state of an Apex account. This resource Id is used for all internal Apex account
   * operations
   */
  id: Scalars["String"];
  /** The investorId of the investor service */
  investorId: Scalars["String"];
  metadata?: Maybe<Scalars["JSON"]>;
  status: Status2;
  updatedAt: Scalars["String"];
}
export enum Status2 {
  Pending = "PENDING",
  Active = "ACTIVE",
  Inactive = "INACTIVE",
  Error = "ERROR",
  Canceled = "CANCELED"
}
export interface InternalGetInvestorResponse {
  __typename?: "InternalGetInvestorResponse";
  investor: InternalInvestor;
}
export interface InternalInvestor {
  __typename?: "InternalInvestor";
  createdAt?: Maybe<Scalars["String"]>;
  id: Scalars["String"];
  investorInfo: InternalInvestorInfo;
  /** cannot be updated */
  investorType: InvestorType;
  metadata?: Maybe<Scalars["JSON"]>;
  updatedAt?: Maybe<Scalars["String"]>;
}
export interface InternalInvestorInfo {
  __typename?: "InternalInvestorInfo";
  applicantSignature: ApplicantSignature2;
  /** Only required for organizations */
  beneficialOwnersAndOfficers?: Maybe<BeneficialOwnersAndOfficers>;
  birthCountry?: Maybe<Scalars["String"]>;
  /** Agreement for corporations. Required for organizations with entityType of C_CORPORATION or S_CORPORATION */
  cashAccountAgreement?: Maybe<CashAccountAgreement>;
  catAccountHolderType?: Maybe<CatAccountHolderType2>;
  citizenshipCountry: Scalars["String"];
  contactInformation: ContactInformation;
  dateOfBirth: Scalars["String"];
  disclosures: Disclosures2;
  /** Only required for individuals */
  employment?: Maybe<Employment2>;
  entityDueDiligence?: Maybe<EntityDueDiligence>;
  /** Only required for organizations */
  exemptLegalCustomer?: Maybe<ExemptLegalCustomer>;
  familyName: Scalars["String"];
  givenName: Scalars["String"];
  /** Only required for individuals */
  investmentProfile?: Maybe<InvestmentProfile2>;
  /** cannot be updated */
  investorType?: Maybe<InvestorType>;
  isPermanentResident?: Maybe<Scalars["Boolean"]>;
  /** cannot be updated, defaults to accept */
  issuerDirectCommunication?: Maybe<IssuerDirectCommunication>;
  /**
   * Agreement for LLCs. Required for organizations with entityType of LIMITED_LIABILITY_COMPANY_C_CORPORATION,
   * LIMITED_LIABILITY_COMPANY_S_CORPORATION, or LIMITED_LIABILITY_COMPANY_PARTNERSHIP
   */
  llcAccountAgreement?: Maybe<LlcAccountAgreement>;
  /** Only required for organizations */
  organization?: Maybe<Organization>;
  organizationName?: Maybe<Scalars["String"]>;
  organizationTaxId?: Maybe<Scalars["String"]>;
  socialSecurityNumber: Scalars["String"];
  suitabilityProfile: SuitabilityProfile;
  title?: Maybe<Scalars["String"]>;
  trustedContactInfo: TrustedContactInfo;
  /** Only required for organizations */
  wnineTaxForm?: Maybe<WNineTaxForm>;
}
export interface InternalGetLinkedBankAccountResponse {
  __typename?: "InternalGetLinkedBankAccountResponse";
  linkedBankAccount: InternalLinkedBankAccount;
}
export interface InternalLinkedBankAccount {
  __typename?: "InternalLinkedBankAccount";
  accountNumber: Scalars["String"];
  accountType: AccountType2;
  bankName: Scalars["String"];
  createdAt: Scalars["String"];
  id: Scalars["String"];
  investorId: Scalars["String"];
  mask: Scalars["String"];
  metadata?: Maybe<Scalars["JSON"]>;
  routing: Scalars["String"];
  status: LinkedBankAccountStatus;
  updatedAt: Scalars["String"];
  wire: Scalars["String"];
}
export interface GetOrderResponse {
  __typename?: "GetOrderResponse";
  order: Order2;
}
export interface Order2 {
  __typename?: "Order2";
  assetId: Scalars["String"];
  assignedTo?: Maybe<Scalars["String"]>;
  comment?: Maybe<Scalars["String"]>;
  createdAt: Scalars["String"];
  filled?: Maybe<Scalars["Float"]>;
  fullFillRequired?: Maybe<Scalars["Boolean"]>;
  goodTillCancel?: Maybe<Scalars["Boolean"]>;
  id: Scalars["String"];
  metadata?: Maybe<Scalars["JSON"]>;
  portfolioId: Scalars["String"];
  /** On a BUY this is the upper limit. On a SELL the lower limit. */
  priceLimit?: Maybe<Scalars["Float"]>;
  quantity: Scalars["Float"];
  spotPrice?: Maybe<Scalars["Float"]>;
  status?: Maybe<OrderStatus>;
  updatedAt?: Maybe<Scalars["String"]>;
}
export enum OrderStatus {
  Canceled = "CANCELED",
  Open = "OPEN",
  Executing = "EXECUTING",
  Closed = "CLOSED",
  Staged = "STAGED"
}
export interface GetOrdersResponse {
  __typename?: "GetOrdersResponse";
  orders: Array<Maybe<Order2>>;
}
export interface GetCashBalanceResponse {
  __typename?: "GetCashBalanceResponse";
  balance: CashBalance;
}
export interface CashBalance {
  __typename?: "CashBalance";
  accountNumber: Scalars["String"];
  quantity: Scalars["Float"];
  settled: Scalars["Float"];
  unsettled: Scalars["Float"];
}
export interface GetExternalPortfolioResponse {
  __typename?: "GetExternalPortfolioResponse";
  portfolio: Portfolio3;
}
export interface Portfolio3 {
  __typename?: "Portfolio3";
  accountNumber?: Maybe<Scalars["String"]>;
  app?: Maybe<AppType2>;
  createdAt: Scalars["String"];
  currency: Scalars["String"];
  description?: Maybe<Scalars["String"]>;
  id: Scalars["String"];
  metadata?: Maybe<Scalars["JSON"]>;
  name: Scalars["String"];
  positions: Array<Maybe<Position2>>;
  status: PortfolioStatus;
  updatedAt?: Maybe<Scalars["String"]>;
}
export enum AppType2 {
  Inpaas = "INPAAS",
  Custom = "CUSTOM"
}
export interface Position2 {
  __typename?: "Position2";
  /** The BondHouse unique identifier for the asset */
  assetId: Scalars["String"];
  /** The total cost basis of the position (not basis per share) */
  costBasis?: Maybe<Scalars["Float"]>;
  createdAt?: Maybe<Scalars["String"]>;
  /** A unique identifier for the position */
  id: Scalars["String"];
  metadata?: Maybe<Scalars["JSON"]>;
  /** The unique identifier for the portfolio */
  portfolioId: Scalars["String"];
  /** The position quantity in standard market units (face for bonds, shares for equities, etc.) */
  quantity: Scalars["Float"];
  settled?: Maybe<Scalars["Float"]>;
  /** The trade date */
  tradeDate?: Maybe<Scalars["String"]>;
  unsettled?: Maybe<Scalars["Float"]>;
  updatedAt?: Maybe<Scalars["String"]>;
}
export enum PortfolioStatus {
  Pending = "PENDING",
  Ready = "READY",
  Terminated = "TERMINATED"
}
export interface GetExternalPortfoliosResponse {
  __typename?: "GetExternalPortfoliosResponse";
  portfolios: Array<Maybe<Portfolio3>>;
}
export interface GetPortfolioResponse2 {
  __typename?: "GetPortfolioResponse2";
  portfolio: Portfolio3;
}
export interface GetPortfoliosResponse {
  __typename?: "GetPortfoliosResponse";
  portfolios: Array<Maybe<Portfolio3>>;
}
export interface GetPortfoliosByAccountResponse {
  __typename?: "GetPortfoliosByAccountResponse";
  portfolios: Array<Maybe<Portfolio3>>;
}
export interface GetPositionsByAccountResponse {
  __typename?: "GetPositionsByAccountResponse";
  positions: Array<Maybe<AccountPosition>>;
}
export interface AccountPosition {
  __typename?: "AccountPosition";
  assetId: Scalars["String"];
  quantity: Scalars["Float"];
  settled: Scalars["Float"];
  unsettled: Scalars["Float"];
}
export interface GetTemporaryPortfolioResponse {
  __typename?: "GetTemporaryPortfolioResponse";
  portfolio: Portfolio3;
}
export interface GetTradeResponse {
  __typename?: "GetTradeResponse";
  ledgerEntries: Array<Maybe<LedgerEntry>>;
}
export interface LedgerEntry {
  __typename?: "LedgerEntry";
  accountNumber?: Maybe<Scalars["String"]>;
  assetId: Scalars["String"];
  comment?: Maybe<Scalars["String"]>;
  counterPartyId: Scalars["String"];
  createdAt?: Maybe<Scalars["String"]>;
  fee?: Maybe<Scalars["Float"]>;
  id: Scalars["String"];
  metadata?: Maybe<Scalars["JSON"]>;
  orderId?: Maybe<Scalars["String"]>;
  portfolioId: Scalars["String"];
  quantity: Scalars["Float"];
  relatedPositions: Array<Maybe<RelatedPosition>>;
  status: Status3;
  /**
   * The tradeId denote the identification of a trade. A trade can result in multiple ledger entries, all of
   * which belongs to the trade. In other words, the Trade object is the series of LedgerEntry objects with
   * the same tradeId
   */
  tradeId: Scalars["String"];
  tradePrice: Scalars["Float"];
  updatedAt?: Maybe<Scalars["String"]>;
}
export interface RelatedPosition {
  __typename?: "RelatedPosition";
  positionId: Scalars["String"];
  quantity: Scalars["Float"];
}
export enum Status3 {
  Unknown = "UNKNOWN",
  Confirmed = "CONFIRMED",
  Settled = "SETTLED",
  Canceled = "CANCELED"
}
export interface GetTradesResponse {
  __typename?: "GetTradesResponse";
  ledgerEntries: Array<Maybe<LedgerEntry>>;
}
export interface GetTradesByAccountResponse {
  __typename?: "GetTradesByAccountResponse";
  trades: Array<Maybe<LedgerEntry>>;
}
export interface PriceAssetResponse {
  __typename?: "PriceAssetResponse";
  prices: Array<Maybe<Price>>;
}
/** Price and related metadata */
export interface Price {
  __typename?: "Price";
  /** The time of a trade or order */
  dateTime?: Maybe<Scalars["String"]>;
  /**
   * The minimum multiples in which a bond can be held in the secondary market above the minimum denomination.
   * Only available for bonds.
   */
  denominationIncrement?: Maybe<Scalars["Int"]>;
  /** Minimum balance remaining. Only available for bonds. */
  minimumBalanceRemaining?: Maybe<Scalars["Int"]>;
  /**
   * The smallest amount in which a bond may be purchased in the secondary market, expressed in face value also
   * known as par value. Only available for bonds.
   */
  minimumDenomination?: Maybe<Scalars["Int"]>;
  /** The price of a trade or order */
  price: Scalars["Float"];
  priceType?: Maybe<PriceType>;
  /** Order or trade size */
  size?: Maybe<Scalars["Int"]>;
  /** Yield to maturity. Only available for bonds. */
  yieldToMaturity?: Maybe<Scalars["Float"]>;
  /** Yield to worst. Only available for bonds. */
  yieldToWorst?: Maybe<Scalars["Float"]>;
}
export enum PriceType {
  Bid = "BID",
  Offer = "OFFER",
  Trade = "TRADE"
}
/**
 * Request to price an asset. If any identifiers are provided, the ID mapping step may be skipped, and if the asset
 * type and subtype are provided, asset lookup may be skipped.
 */
export type PriceAssetRequestInput = {
  /** BondHouse unique identifier for an asset. This is not a public identifier. */
  assetId?: Maybe<Scalars["String"]>;
  /** Asset sub-types specific to an instrument type */
  assetSubtype?: Maybe<AssetSubtype>;
  /** Higher level asset and instrument types, for instance bonds, stocks, funds, etc. */
  assetType?: Maybe<AssetType>;
  /** 9-character alphanumeric CUSIP identifier */
  cusip?: Maybe<Scalars["String"]>;
  /** Request to buy or sell */
  direction?: Maybe<Direction3>;
  /** Quantity to buy or sell */
  quantity?: Maybe<Scalars["Float"]>;
  /** Primary exchange ticker */
  ticker?: Maybe<Scalars["String"]>;
};
export enum AssetSubtype {
  Sovereign = "SOVEREIGN",
  Corporate = "CORPORATE",
  Supranational = "SUPRANATIONAL",
  MutualFunds = "MUTUAL_FUNDS",
  ExchangeTradedFunds = "EXCHANGE_TRADED_FUNDS",
  ClosedEndFunds = "CLOSED_END_FUNDS",
  InsuranceFunds = "INSURANCE_FUNDS",
  HedgeFunds = "HEDGE_FUNDS",
  Cash = "CASH"
}
export enum AssetType {
  Bond = "BOND",
  Fund = "FUND",
  Cash = "CASH"
}
export enum Direction3 {
  Buy = "BUY",
  Sell = "SELL"
}
export interface AnalyzePortfolioResponse {
  __typename?: "AnalyzePortfolioResponse";
  analysis: Analysis2;
}
export interface Analysis2 {
  __typename?: "Analysis2";
  allocations?: Maybe<Allocations2>;
  createdAt: Scalars["String"];
  /** The weighted average current coupon of the portfolio */
  currentCoupon?: Maybe<Scalars["Float"]>;
  /** The weighted average duration of the portfolio */
  duration?: Maybe<Scalars["Float"]>;
  /** Scores for Environmental, Social, and Governance */
  esgScores?: Maybe<EsgScores>;
  estimatedPerformance?: Maybe<EstimatedPerformance2>;
  /** Fund expense ratio */
  expenseRatio?: Maybe<Scalars["Float"]>;
  /** Unique identifier for this analysis */
  id: Scalars["String"];
  /** A measure of issuer concentration, computed as 1 - square(sum(percentNetAssetValue to issuer)) */
  issuerConcentration?: Maybe<Scalars["Float"]>;
  metadata?: Maybe<Scalars["JSON"]>;
  /** The NAV of the Entire Portfolio */
  netAssetValue?: Maybe<Scalars["Float"]>;
  /** The identifier of the portfolio the analysis was conducted on */
  portfolioId: Scalars["String"];
  /** The analytical risk of the portfolio */
  risk?: Maybe<Scalars["Float"]>;
  /** The weighted average spread of the portfolio */
  spread?: Maybe<Scalars["Float"]>;
  updatedAt: Scalars["String"];
  /** Projections of portfolio growth over time */
  wealthProjections?: Maybe<Array<Maybe<WealthProjection>>>;
  yearsToMaturity?: Maybe<Scalars["Float"]>;
  /** The weighted average yield of the portfolio */
  yield?: Maybe<Scalars["Float"]>;
  /** Contribution of each asset to the portfolio's yield */
  yieldContributions?: Maybe<Array<Maybe<YieldContribution>>>;
}
export interface Allocations2 {
  __typename?: "Allocations2";
  /** Country allocation data */
  country?: Maybe<Scalars["JSON"]>;
  /** Currency allocation data */
  currency?: Maybe<Scalars["JSON"]>;
  datastreamSubtype?: Maybe<Allocation4>;
  datastreamType?: Maybe<Allocation4>;
  debtType?: Maybe<DebtTypeAllocation>;
  /** Maturity allocation data */
  maturity?: Maybe<Maturity>;
  /** Rating allocation data */
  rating?: Maybe<RatingAllocation>;
  /** Region allocation data */
  region?: Maybe<Region>;
  /** Sector allocation */
  sector?: Maybe<Sector>;
}
export interface Allocation4 {
  __typename?: "Allocation4";
  buckets: Array<Maybe<Bucket>>;
}
export interface Bucket {
  __typename?: "Bucket";
  contributors?: Maybe<Array<Maybe<Contributor>>>;
  name: Scalars["String"];
  percentOfNetAssetValue: Scalars["Float"];
}
export interface Contributor {
  __typename?: "Contributor";
  assetId: Scalars["String"];
  percentOfNetAssetValue: Scalars["Float"];
  positionId: Scalars["String"];
}
export interface DebtTypeAllocation {
  __typename?: "DebtTypeAllocation";
  buckets: Array<Maybe<Bucket>>;
}
/** Maturity allocation data */
export interface Maturity {
  __typename?: "Maturity";
  /** Allocation to securities maturing in 5-10 years */
  fiveToTenYears?: Maybe<Scalars["Float"]>;
  /** Allocation to securities maturing in greater than 30 years */
  greaterThanThirtyYears?: Maybe<Scalars["Float"]>;
  /** Allocation to securities maturing in less than 1 years */
  lessThanOneYear?: Maybe<Scalars["Float"]>;
  /** Allocation to securities maturing in 1-3 years */
  oneToThreeYears?: Maybe<Scalars["Float"]>;
  /** Allocation to securities with an unknown or uncategorizable maturity */
  other?: Maybe<Scalars["Float"]>;
  /** Allocation to securities maturing in 10-20 years */
  tenToTwentyYears?: Maybe<Scalars["Float"]>;
  /** Allocation to securities maturing in 3-5 years */
  threeToFiveYears?: Maybe<Scalars["Float"]>;
  /** Allocation to securities maturing in 20-30 years */
  twentyToThirtyYears?: Maybe<Scalars["Float"]>;
}
/** Rating allocation data */
export interface RatingAllocation {
  __typename?: "RatingAllocation";
  investmentGrade?: Maybe<InvestmentGradeRatingAllocation>;
  nonInvestmentGrade?: Maybe<NonInvestmentGradeRatingAllocation>;
}
export interface InvestmentGradeRatingAllocation {
  __typename?: "InvestmentGradeRatingAllocation";
  a?: Maybe<Scalars["Float"]>;
  aa?: Maybe<Scalars["Float"]>;
  aaa?: Maybe<Scalars["Float"]>;
  bbb?: Maybe<Scalars["Float"]>;
  total?: Maybe<Scalars["Float"]>;
}
export interface NonInvestmentGradeRatingAllocation {
  __typename?: "NonInvestmentGradeRatingAllocation";
  b?: Maybe<Scalars["Float"]>;
  bb?: Maybe<Scalars["Float"]>;
  c?: Maybe<Scalars["Float"]>;
  d?: Maybe<Scalars["Float"]>;
  nr?: Maybe<Scalars["Float"]>;
  total?: Maybe<Scalars["Float"]>;
}
/** Region allocation data */
export interface Region {
  __typename?: "Region";
  /** Allocation to Africa ex-North Africa */
  africaExNorthAfrica?: Maybe<Scalars["Float"]>;
  /** Allocation to Asia Pacific ex-Japan */
  asiaPacificExJapan?: Maybe<Scalars["Float"]>;
  /** Allocation to emerging markets in Asia */
  emergingMarketsAsia?: Maybe<Scalars["Float"]>;
  /** Allocation to emerging markets in Europe */
  emergingMarketsEurope?: Maybe<Scalars["Float"]>;
  /** Allocation to Europe ex-United Kingdom */
  europeExUnitedKingdom?: Maybe<Scalars["Float"]>;
  /** Allocation to Japan */
  japan?: Maybe<Scalars["Float"]>;
  /** Allocation to Latin America */
  latinAmerica?: Maybe<Scalars["Float"]>;
  /** Allocation to the Middle East and North Africa */
  middleEastNorthAfrica?: Maybe<Scalars["Float"]>;
  /** Allocation to North America ex-United States */
  northAmericaExUnitedStates?: Maybe<Scalars["Float"]>;
  /** Allocation to other or unknown regions */
  other?: Maybe<Scalars["Float"]>;
  /** Allocation to the United Kingdom */
  unitedKingdom?: Maybe<Scalars["Float"]>;
  /** Allocation to the United States */
  unitedStates?: Maybe<Scalars["Float"]>;
}
/** Sector allocation */
export interface Sector {
  __typename?: "Sector";
  /** Allocation to the agency sector */
  agency?: Maybe<Scalars["Float"]>;
  /** Allocation to the communications sector */
  communications?: Maybe<Scalars["Float"]>;
  /** Allocation to the consumer goods sector */
  consumerGoods?: Maybe<Scalars["Float"]>;
  /** Allocation to the energy sector */
  energy?: Maybe<Scalars["Float"]>;
  /** Allocation to the financials sector */
  financials?: Maybe<Scalars["Float"]>;
  /** Allocation to the manufacturing sector */
  manufacturing?: Maybe<Scalars["Float"]>;
  /** Allocation to the municipal sector */
  municipal?: Maybe<Scalars["Float"]>;
  /** Allocation to the other sector */
  other?: Maybe<Scalars["Float"]>;
  /** Allocation to the services sector */
  services?: Maybe<Scalars["Float"]>;
  /** Allocation to the sovereign sector */
  sovereign?: Maybe<Scalars["Float"]>;
  /** Allocation to the supranational sector */
  supranational?: Maybe<Scalars["Float"]>;
  /** Allocation to the transportation sector */
  transportation?: Maybe<Scalars["Float"]>;
}
/** Scores for Environmental, Social, and Governance */
export interface EsgScores {
  __typename?: "EsgScores";
  /** Environmental score */
  environmental?: Maybe<Scalars["Float"]>;
  /** Governance score */
  governance?: Maybe<Scalars["Float"]>;
  /** Social score */
  social?: Maybe<Scalars["Float"]>;
  /** Overall score */
  total?: Maybe<Scalars["Float"]>;
}
export interface EstimatedPerformance2 {
  __typename?: "EstimatedPerformance2";
  averageMaximumDrawdown?: Maybe<AverageMaximumDrawdown2>;
  endDate: Scalars["String"];
  estimatedMaximumDrawdown: EstimatedMaximumDrawdown;
  startDate: Scalars["String"];
  timeSeries: Array<Maybe<SinglePeriodPerformance>>;
}
export interface AverageMaximumDrawdown2 {
  __typename?: "AverageMaximumDrawdown2";
  averageValue: Scalars["Float"];
  rankedMaximumDrawdowns: Array<Maybe<RankedMaximumDrawdown>>;
}
export interface RankedMaximumDrawdown {
  __typename?: "RankedMaximumDrawdown";
  endDate: Scalars["String"];
  rank: Scalars["Int"];
  startDate: Scalars["String"];
  value: Scalars["Float"];
}
export interface EstimatedMaximumDrawdown {
  __typename?: "EstimatedMaximumDrawdown";
  endDate: Scalars["String"];
  startDate: Scalars["String"];
  value: Scalars["Float"];
}
export interface SinglePeriodPerformance {
  __typename?: "SinglePeriodPerformance";
  cumulativeReturn: Scalars["Float"];
  endDate: Scalars["String"];
  periodReturn: Scalars["Float"];
  startDate: Scalars["String"];
}
/** Wealth projection as of a particular date */
export interface WealthProjection {
  __typename?: "WealthProjection";
  /** Wealth projection as of date */
  date: Scalars["String"];
  percentiles: Array<Maybe<WealthProjectionPercentile>>;
}
/** Wealth projection NAVs with percentiles */
export interface WealthProjectionPercentile {
  __typename?: "WealthProjectionPercentile";
  /** Cumulative Return */
  cumulativeReturn: Scalars["Float"];
  /** NAV */
  nav: Scalars["Float"];
  /** Percentile */
  percentile: Scalars["Float"];
}
/** An asset's contribution to portfolio yield */
export interface YieldContribution {
  __typename?: "YieldContribution";
  /** Asset ID */
  assetId: Scalars["String"];
  /** Percent contribution to portfolio yield */
  percentContribution: Scalars["Float"];
}
export type AnalyzePortfolioRequestInput = {
  /** Defaults to the previous business day. */
  date?: Maybe<Scalars["String"]>;
  portfolio: PortfolioInput;
};
export type PortfolioInput = {
  accountNumber?: Maybe<Scalars["String"]>;
  app?: Maybe<App>;
  createdAt: Scalars["String"];
  currency: Scalars["String"];
  description?: Maybe<Scalars["String"]>;
  id: Scalars["String"];
  metadata?: Maybe<Scalars["JSON"]>;
  name: Scalars["String"];
  positions: Array<Maybe<PositionsListItemInput>>;
  status: Status;
  updatedAt?: Maybe<Scalars["String"]>;
};
export type PositionsListItemInput = {
  /** The BondHouse unique identifier for the asset */
  assetId: Scalars["String"];
  /** The total cost basis of the position (not basis per share) */
  costBasis?: Maybe<Scalars["Float"]>;
  createdAt?: Maybe<Scalars["String"]>;
  /** A unique identifier for the position */
  id: Scalars["String"];
  metadata?: Maybe<Scalars["JSON"]>;
  /** The unique identifier for the portfolio */
  portfolioId: Scalars["String"];
  /** The position quantity in standard market units (face for bonds, shares for equities, etc.) */
  quantity: Scalars["Float"];
  settled?: Maybe<Scalars["Float"]>;
  /** The trade date */
  tradeDate?: Maybe<Scalars["String"]>;
  unsettled?: Maybe<Scalars["Float"]>;
  updatedAt?: Maybe<Scalars["String"]>;
};
export interface CalculateIntradayReturnResponse {
  __typename?: "CalculateIntradayReturnResponse";
  /** Intraday total return in market value per unit */
  marketValueReturn: Scalars["Float"];
  /** Intraday total return in percent */
  percentReturn: Scalars["Float"];
  /** Intraday total return */
  totalReturn: Scalars["Float"];
}
export type CalculateIntradayReturnRequestInput = {
  portfolio: PortfolioInput;
};
export interface CalculateReturnsResponse {
  __typename?: "CalculateReturnsResponse";
  estimatedPerformance: EstimatedPerformance2;
}
export type CalculateReturnsRequestInput = {
  endDate: Scalars["String"];
  portfolio: PortfolioInput;
  startDate: Scalars["String"];
};
export interface GetAnalysisResponse {
  __typename?: "GetAnalysisResponse";
  analysis: Analysis2;
}
export interface ProjectCashFlowsResponse {
  __typename?: "ProjectCashFlowsResponse";
  cashFlows: Array<Maybe<CashFlow>>;
}
/** Represents a cash flow for a single period */
export interface CashFlow {
  __typename?: "CashFlow";
  cashFlow: Scalars["Float"];
  date: Scalars["String"];
  interest: Scalars["Float"];
  principal: Scalars["Float"];
}
/** Project cash flows for a portfolio */
export type ProjectCashFlowsInput = {
  portfolio: PortfolioInput;
};
export interface GetCartResponse {
  __typename?: "GetCartResponse";
  cart: Cart;
}
export interface Cart {
  __typename?: "Cart";
  id: Scalars["String"];
  items: Array<Maybe<CartItem>>;
}
/** A single asset in the cart */
export interface CartItem {
  __typename?: "CartItem";
  assetId: Scalars["String"];
  quantity: Scalars["Float"];
}
export interface GetPreferencesResponse2 {
  __typename?: "GetPreferencesResponse2";
  preference?: Maybe<Scalars["JSON"]>;
}
export interface GetWatchListResponse {
  __typename?: "GetWatchListResponse";
  watchList: WatchList;
}
export interface WatchList {
  __typename?: "WatchList";
  id: Scalars["String"];
  items: Array<Maybe<WatchListItem>>;
}
export interface WatchListItem {
  __typename?: "WatchListItem";
  assetId: Scalars["String"];
}
export interface Factor {
  __typename?: "Factor";
  /** Description of what the factor represents, where it comes from, etc. */
  description?: Maybe<Scalars["String"]>;
  /** Factor ID */
  id: Scalars["String"];
  /** Units that levels are quoted in */
  levelUnits: LevelUnits;
  /** Human-readable factor name */
  name: Scalars["String"];
  /** Method for calculating returns from day over day levels */
  returnsCalculationMethod: ReturnsCalculationMethod;
}
export enum LevelUnits {
  BasisPoints = "BASIS_POINTS",
  Percents = "PERCENTS"
}
export enum ReturnsCalculationMethod {
  AbsoluteChange = "ABSOLUTE_CHANGE",
  RelativeChange = "RELATIVE_CHANGE"
}
export interface GetAssetRiskResponse {
  __typename?: "GetAssetRiskResponse";
  risk: Scalars["Float"];
}
export enum Frequency2 {
  Daily = "DAILY"
}
export enum HalfLifeUnits2 {
  Days = "DAYS",
  Months = "MONTHS",
  Years = "YEARS"
}
export enum LookbackPeriodUnits2 {
  Days = "DAYS",
  Months = "MONTHS",
  Years = "YEARS"
}
export interface FactorTimeSeries {
  __typename?: "FactorTimeSeries";
  /** Factor ID */
  factorId: Scalars["String"];
  timeSeries: Array<Maybe<FactorTimeSeriesDatum>>;
}
export interface FactorTimeSeriesDatum {
  __typename?: "FactorTimeSeriesDatum";
  /** Factor observation date */
  date: Scalars["String"];
  /** Factor level in standard market convention */
  level: Scalars["Float"];
}
export interface GetAssetScoresResponse {
  __typename?: "GetAssetScoresResponse";
  /**
   * BondHouse's proprietary measure for the attractiveness of an asset, which is a function of its expected
   * return and risk
   */
  attractiveness?: Maybe<Scalars["Float"]>;
  /**
   * BondHouse's proprietary credit score, based on a number of inputs to evaluate the credit-worthiness of a
   * bond
   */
  credit?: Maybe<Scalars["Float"]>;
  /**
   * (Funds only) BondHouse's proprietary efficiency score, measuring the effectiveness of fund management in
   * managing taxes, expenses, etc.
   */
  efficiency?: Maybe<Scalars["Float"]>;
  /** BondHouse's proprietary liquidity score, which measures the investor's ability to transact in an asset */
  liquidity?: Maybe<Scalars["Float"]>;
  /** BondHouse's proprietary risk measure based on our risk model */
  risk?: Maybe<Scalars["Float"]>;
}
export interface GetAllInventoriesResponse {
  __typename?: "GetAllInventoriesResponse";
  /** Metadata for all inventories associated with the institution */
  inventories: Array<Maybe<InventoryMetadata>>;
}
/** Inventory metadata. Does not include assetIds. */
export interface InventoryMetadata {
  __typename?: "InventoryMetadata";
  /** Name of the app the inventory applies to */
  app: App2;
  /** Unique inventory identifier */
  id: Scalars["String"];
  /** The inventory's user-friendly name */
  name: Scalars["String"];
  updatedAt: Scalars["String"];
}
export enum App2 {
  AssetExplorer = "ASSET_EXPLORER",
  Bestfit = "BESTFIT",
  MuniBestfit = "MUNI_BESTFIT",
  Inpaas = "INPAAS"
}
export interface GetAssetResponse {
  __typename?: "GetAssetResponse";
  asset: Asset5;
}
export interface Asset5 {
  __typename?: "Asset5";
  /** Allocation data */
  allocation?: Maybe<Allocation7>;
  analytics?: Maybe<Analytics>;
  /** Asset sub-types specific to an instrument type */
  assetSubtype?: Maybe<AssetSubtype>;
  /** Higher level asset and instrument types, for instance bonds, stocks, funds, etc. */
  assetType?: Maybe<AssetType>;
  /** Bond object, which include Corp/Muni/Sovereign etc. */
  bond?: Maybe<Bond4>;
  country?: Maybe<Scalars["String"]>;
  createdAt?: Maybe<Scalars["String"]>;
  createdBy?: Maybe<Scalars["String"]>;
  /** The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) currency code for the asset currency */
  currency?: Maybe<Scalars["String"]>;
  description?: Maybe<Scalars["String"]>;
  /** BondHouse generated readable id that should have 1 to 1 relationship with the generated ID */
  displayId?: Maybe<Scalars["String"]>;
  equity?: Maybe<Equity>;
  /** Scores for Environmental, Social, and Governance */
  esgScores?: Maybe<EsgScores2>;
  fund?: Maybe<Fund4>;
  /** BondHouse unique identifier for an asset. This is not a public identifier. */
  id: Scalars["String"];
  /**
   * asset/security identifier:
   * * cusip - 9 alpha-numeric characters that includes the check digit, first 6 alpha numeric characters refers to
   *   the issuer
   * * isin - 12 alpha-numeric characters, first 2 characters contains country code, last character is a check
   *   digit
   * * sedol - 7 alpha-numeric characters, single security can have multiple SEDOL, handle later
   * * primaryTicker - primary exchange ticker
   * * cins - 9 alpha-numeric characters managed by cusip
   * * bbGlobal - 12 alpha-numeric characters managed by Bloomberg
   * The first 2 characters are upper-case consonants (including "Y"),
   * the third character is the upper-case "G",
   * characters 4 -11 are any upper-case consonant (including "Y")
   * or integer between 0 and 9, and the last character is a check-digit.
   * An identifier is assigned to instruments of all asset classes,
   * is unique to an individual instrument and once issued will not change for an instrument.
   * * refinitivAssetId - 18 alpha-numeric characters asset id, example sourced from DSFI
   * * refinitivIssuePermId - unique Refinitiv system-generated PermID for an asset
   * * refinitivLipperId - id to specify a share class of a fund and also
   * * refinitivLipperPermId - lipper permanent id
   * * valoren - nine digits for official Swiss Identification number
   * * cik - SEC's central index key for corporations/individuals
   * * apex - APEX identifier
   */
  identifiers?: Maybe<Identifiers>;
  legalEntity?: Maybe<LegalEntity>;
  /** Indicates whether there are current bids/offers that makes the asset transactable */
  liquid?: Maybe<Scalars["Boolean"]>;
  market?: Maybe<Scalars["String"]>;
  metadata?: Maybe<Scalars["JSON"]>;
  name?: Maybe<Scalars["String"]>;
  /**
   * BondHouse best price from available pricing sources, quote following market conventions:
   * * Clean price for most bonds
   * * Dirty price for preferred stock
   * * Close-mid for equities
   * * Market price for funds
   */
  price?: Maybe<Scalars["Float"]>;
  priceDate?: Maybe<Scalars["String"]>;
  priceQuotes?: Maybe<Array<Maybe<PriceQuote>>>;
  primaryExchange?: Maybe<Scalars["String"]>;
  primaryExchangeMic?: Maybe<Scalars["String"]>;
  /** Normalized rating */
  rating?: Maybe<Scalars["String"]>;
  /** BondHouse's proprietary scores */
  scores?: Maybe<RoverScores>;
  /**
   * The common street ticker for a security. For bonds, ticker code used to identify the common stock when
   * available, else common acronym of company if known, else matched to immediate parent, else unique value
   * based on name for standalone organizations.
   */
  ticker?: Maybe<Scalars["String"]>;
  unit?: Maybe<Scalars["String"]>;
  /** Universe inclusion information */
  universes?: Maybe<Universes>;
  updatedAt?: Maybe<Scalars["String"]>;
  updatedBy?: Maybe<Scalars["String"]>;
}
/** Allocation data */
export interface Allocation7 {
  __typename?: "Allocation7";
  /** Country allocation data */
  country?: Maybe<Scalars["JSON"]>;
  /** Currency allocation data */
  currency?: Maybe<Scalars["JSON"]>;
  /** Debt type allocation */
  debtType?: Maybe<DebtTypeAllocation2>;
  /** Maturity allocation data */
  maturity?: Maybe<MaturityAllocation>;
  /** Rating allocation data */
  rating?: Maybe<RatingAllocation2>;
  /** Region allocation data */
  region?: Maybe<RegionAllocation>;
  /** Sector allocation */
  sector?: Maybe<SectorAllocation>;
}
/** Debt type allocation */
export interface DebtTypeAllocation2 {
  __typename?: "DebtTypeAllocation2";
  /** Allocation to asset-backed securities not covered by other categories */
  assetBackedSecurities?: Maybe<Scalars["Float"]>;
  /** Allocation to bonds */
  bonds?: Maybe<Scalars["Float"]>;
  /** Allocation to debentures */
  debentures?: Maybe<Scalars["Float"]>;
  /** Allocation to mortgage-backed securities, including collateralized mortgage obligations (CMOs) */
  mortgageBackedSecurities?: Maybe<Scalars["Float"]>;
  /** Allocation to municipal bonds and similar products such as tax anticipation notes */
  municipalBonds?: Maybe<Scalars["Float"]>;
  /** Allocation to notes */
  notes?: Maybe<Scalars["Float"]>;
  /** Allocation to other or unknown debt products */
  other?: Maybe<Scalars["Float"]>;
  /** Allocation to preferred stock */
  preferredStock?: Maybe<Scalars["Float"]>;
  /** Allocation to supranational bonds */
  supranationalBonds?: Maybe<Scalars["Float"]>;
}
/** Maturity allocation data */
export interface MaturityAllocation {
  __typename?: "MaturityAllocation";
  /** Allocation to securities maturing in 5-10 years */
  fiveToTenYears?: Maybe<Scalars["Float"]>;
  /** Allocation to securities maturing in greater than 30 years */
  greaterThanThirtyYears?: Maybe<Scalars["Float"]>;
  /** Allocation to securities maturing in less than 1 years */
  lessThanOneYear?: Maybe<Scalars["Float"]>;
  /** Allocation to securities maturing in 1-3 years */
  oneToThreeYears?: Maybe<Scalars["Float"]>;
  /** Allocation to securities with an unknown or uncategorizable maturity */
  other?: Maybe<Scalars["Float"]>;
  /** Allocation to securities maturing in 10-20 years */
  tenToTwentyYears?: Maybe<Scalars["Float"]>;
  /** Allocation to securities maturing in 3-5 years */
  threeToFiveYears?: Maybe<Scalars["Float"]>;
  /** Allocation to securities maturing in 20-30 years */
  twentyToThirtyYears?: Maybe<Scalars["Float"]>;
}
/** Rating allocation data */
export interface RatingAllocation2 {
  __typename?: "RatingAllocation2";
  a?: Maybe<Scalars["Float"]>;
  aa?: Maybe<Scalars["Float"]>;
  aaa?: Maybe<Scalars["Float"]>;
  b?: Maybe<Scalars["Float"]>;
  bb?: Maybe<Scalars["Float"]>;
  bbb?: Maybe<Scalars["Float"]>;
  c?: Maybe<Scalars["Float"]>;
  cc?: Maybe<Scalars["Float"]>;
  ccc?: Maybe<Scalars["Float"]>;
  d?: Maybe<Scalars["Float"]>;
  nr?: Maybe<Scalars["Float"]>;
}
/** Region allocation data */
export interface RegionAllocation {
  __typename?: "RegionAllocation";
  /** Allocation to Africa ex-North Africa */
  africaExNorthAfrica?: Maybe<Scalars["Float"]>;
  /** Allocation to Asia Pacific ex-Japan */
  asiaPacificExJapan?: Maybe<Scalars["Float"]>;
  /** Allocation to emerging markets in Asia */
  emergingMarketsAsia?: Maybe<Scalars["Float"]>;
  /** Allocation to emerging markets in Europe */
  emergingMarketsEurope?: Maybe<Scalars["Float"]>;
  /** Allocation to Europe ex-United Kingdom */
  europeExUnitedKingdom?: Maybe<Scalars["Float"]>;
  /** Allocation to Japan */
  japan?: Maybe<Scalars["Float"]>;
  /** Allocation to Latin America */
  latinAmerica?: Maybe<Scalars["Float"]>;
  /** Allocation to the Middle East and North Africa */
  middleEastNorthAfrica?: Maybe<Scalars["Float"]>;
  /** Allocation to North America ex-United States */
  northAmericaExUnitedStates?: Maybe<Scalars["Float"]>;
  /** Allocation to other or unknown regions */
  other?: Maybe<Scalars["Float"]>;
  /** Allocation to the United Kingdom */
  unitedKingdom?: Maybe<Scalars["Float"]>;
  /** Allocation to the United States */
  unitedStates?: Maybe<Scalars["Float"]>;
}
/** Sector allocation */
export interface SectorAllocation {
  __typename?: "SectorAllocation";
  /** Allocation to the agency sector */
  agency?: Maybe<Scalars["Float"]>;
  /** Allocation to the communications sector */
  communications?: Maybe<Scalars["Float"]>;
  /** Allocation to the consumer goods sector */
  consumerGoods?: Maybe<Scalars["Float"]>;
  /** Allocation to the energy sector */
  energy?: Maybe<Scalars["Float"]>;
  /** Allocation to the financials sector */
  financials?: Maybe<Scalars["Float"]>;
  /** Allocation to the manufacturing sector */
  manufacturing?: Maybe<Scalars["Float"]>;
  /** Allocation to the municipal sector */
  municipal?: Maybe<Scalars["Float"]>;
  /** Allocation to the other sector */
  other?: Maybe<Scalars["Float"]>;
  /** Allocation to the services sector */
  services?: Maybe<Scalars["Float"]>;
  /** Allocation to the sovereign sector */
  sovereign?: Maybe<Scalars["Float"]>;
  /** Allocation to the supranational sector */
  supranational?: Maybe<Scalars["Float"]>;
  /** Allocation to the transportation sector */
  transportation?: Maybe<Scalars["Float"]>;
}
export interface Analytics {
  __typename?: "Analytics";
  /**
   * A measure of the curvature of the price-yield relationship of a fixed income security, calculated using a
   * model that accounts for any embedded options
   */
  convexity?: Maybe<Scalars["Float"]>;
  creditBeta?: Maybe<Scalars["Float"]>;
  /** Current yield, coupon divided by price, expressed as a percent */
  currentYield?: Maybe<Scalars["Float"]>;
  /** Analysis date */
  date?: Maybe<Scalars["String"]>;
  /** Default-adjusted yield */
  defaultAdjustedYield?: Maybe<Scalars["Float"]>;
  distributionYield?: Maybe<Scalars["Float"]>;
  dividendYield?: Maybe<Scalars["Float"]>;
  /**
   * The duration of a security calculated using an option-based model that accounts for embedded options. This
   * measure indicates how cash flows change when interest rates change.
   */
  duration?: Maybe<Scalars["Float"]>;
  /**
   * The duration of a security calculated using an option-based model that accounts for embedded options. This
   * measure indicates how cash flows change when interest rates change.
   */
  effectiveDuration?: Maybe<Scalars["Float"]>;
  /**
   * The difference between the yield on a bond and yield on Treasury Bonds of the same maturity, expressed in
   * basis points
   */
  gSpread?: Maybe<Scalars["Float"]>;
  /** A measure of a security's extra return over the risk-free return after accounting for any embedded options */
  optionAdjustedSpread?: Maybe<Scalars["Float"]>;
  recoveryRate?: Maybe<Scalars["Float"]>;
  secYield?: Maybe<Scalars["Float"]>;
  /** Analysis source */
  source?: Maybe<Scalars["String"]>;
  /**
   * Duration with respect to a change in the option adjusted spread. The calculation is identical to
   * option-adjusted duration except that the option-adjusted spread is shifted rather than the term structure.
   */
  spreadDuration?: Maybe<Scalars["Float"]>;
  standaloneRisk?: Maybe<Scalars["Float"]>;
  /**
   * The average life, computed using cash-flow assumptions that represent expected outcome. For mortgage-backed
   * securities, prepayment speeds are applied. For corporates and governments, this incorporates the worst
   * sinking fund and call, and the best put.
   */
  yearsToMaturity?: Maybe<Scalars["Float"]>;
  /** Yield to maturity adjusted for the value of embedded options */
  yield?: Maybe<Scalars["Float"]>;
  /** Yield to next call */
  yieldToCall?: Maybe<Scalars["Float"]>;
  /** Yield to contractual maturity */
  yieldToMaturity?: Maybe<Scalars["Float"]>;
  /**
   * The yield on the bond calculated using the cash flow assumptions described in the definition of
   * yearsToMaturity
   */
  yieldToWorst?: Maybe<Scalars["Float"]>;
  /**
   * The constant spread in basis points that will make the price equal to the present value of the cash flows
   * when added to each relevant point of the yield curve
   */
  zSpread?: Maybe<Scalars["Float"]>;
}
/** Bond object, which include Corp/Muni/Sovereign etc. */
export interface Bond4 {
  __typename?: "Bond4";
  accruedInterest?: Maybe<Scalars["Float"]>;
  /** Indicates if the bond is active */
  active?: Maybe<Scalars["Boolean"]>;
  /** Current outstanding amount expressed in the currency of denomination */
  amountOutstanding?: Maybe<Scalars["Float"]>;
  /** Current outstanding amount date */
  amountOutstandingDate?: Maybe<Scalars["String"]>;
  /**
   * A flag indicating that the security pays equal amounts on each payment date. Each such payment consists of
   * a decreasing interest amount and an increasing principal amount
   */
  annuity?: Maybe<Scalars["Boolean"]>;
  /** Description representing the asset status */
  assetStatus?: Maybe<Scalars["String"]>;
  /** Call type for callable bonds */
  callType?: Maybe<Scalars["String"]>;
  /** Indicates if the bond is callable */
  callable?: Maybe<Scalars["Boolean"]>;
  /** Type of allocation of municipal bond proceeds */
  capType?: Maybe<Scalars["String"]>;
  classifications?: Maybe<Classifications>;
  /** Bond price excluding accrued interest */
  cleanPrice?: Maybe<Scalars["Float"]>;
  /** Indicates if the bond has a clean-up call */
  cleanUpCallable?: Maybe<Scalars["Boolean"]>;
  /** Indicates if the bond is convertible */
  convertible?: Maybe<Scalars["Boolean"]>;
  /**
   * Code representing the country in which the security was issued.
   * This is usually, the country of residence of the issuer. For Global
   * bonds the Country of Issue is determined by the country of the
   * currency_cd, for Eurobonds it is always 'EU'.
   */
  countryOfIssue?: Maybe<Scalars["String"]>;
  /** Description representing the coupon type */
  couponClass?: Maybe<Scalars["String"]>;
  couponResetHistory?: Maybe<Array<Maybe<CouponResetPeriod>>>;
  /**
   * list of coupone period, where each of the coupone period
   * can contain complex logic for coupon calculation
   */
  couponSchedule?: Maybe<Array<Maybe<CouponPeriod>>>;
  /** Coupon type */
  couponType?: Maybe<Scalars["String"]>;
  /**
   * Indicates if the bond is a covered bond. Covered bonds are debt securities issued by a bank or mortgage
   * institution and collateralised against a pool of assets that, in case of failure of the issuer, can cover
   * claims at any point of time.
   */
  covered?: Maybe<Scalars["Boolean"]>;
  /** Creation information */
  creationUnit?: Maybe<Scalars["String"]>;
  /** Credit enhancements including guarantor information for principal and interest payments */
  creditEnhancement?: Maybe<CreditEnhancement>;
  /** current coupon of the bond */
  currentCoupon?: Maybe<Scalars["Float"]>;
  /** Date from which interest on the bond begins accruing. */
  datedDate?: Maybe<Scalars["String"]>;
  /**
   * Day count convention.
   *
   * The rules for each day count are listed below. More than one rule may take effect. They are applied in
   * order, and if a date is changed in one rule the changed value is used in the following rules. Where Date1
   * is mentioned, it can be decomposed as Date1 = (D1,M1,Y1), with the same principle applied to Date2, etc.
   *
   * * 30U/360 - If (Date2 is end of the month) and (Date1 is the last day of February) and (Date2 is the last
   *   day of February), then change D2 to 30. If (Date2 is end of the month) and (Date1 is the last day of
   *   February), then change D1 to 30. If D2 is 31 and D1 is 30 or 31, then change D2 to 30. If D1 is 31, then
   *   change D1 to 30. Day Count Fraction = (360*(Y2-Y1)+30*(M2-M1)+D2-D1) / 360
   * * 30/360_ISDA - If D1=31, then change D1 to 30 If D2=31 and D1=30, then change D2 to 30. Day Count
   *   Fraction = (360 * (Y2 - Y1) + 30 * (M2 - M1) + D2 - D1) / 360
   * * A/360 - Day Count Fraction = Days(Date1, Date2) / 360
   * * A/365C - Date3 is the next interest payment date. If the number of days of interest accrual is less than
   *   the actual number of days in the interest period: Day Count Fraction = (Days(Date1, Date2) * Pay
   *   frequency) / 365. If the number of days of interest accrual exceeds 365 / Pay frequency, or 182.5 days for
   *   a semi-annual pay security: Day Count Fraction = 1- (Days(Date2, Date3) * Pay frequency) / 365
   * * A/A_ICMA - Date3 is the previous interest payment date. Date4 is the next interest payment date. Day
   *   Count Fraction = Days(Date1, Date2) / (Days(Date3, Date4) * Pay frequency)
   * * NL/365 - If period between Date1 and Date2 contains 29 February: Day Count Fraction = (Days(Date1,
   *   Date2)-1) / 365 Else: Day Count Fraction = Days(Date1, Date2) / 365
   * * A/A_ISDA - Day Count Fraction = Days(Date1, Date2) / 365
   * * A/365 - Day Count Fraction = (Days not in leap year / 365) + (Days in leap year / 366)
   * * 30E/360_ICMA - If D1 is 31, then change D1 to 30. If D2 is 31, then change D2 to 30. Day Count Fraction
   *   = (360 * (Y2 - Y1) + 30 * (M2 - M1) + D2 - D1) / 360
   * * 30E/360_ISDA - If D1 is last day of the month, then change D1 to 30. If D2 is last day of the month,
   *   then change D2 to 30. Day Count Fraction = (360 * (Y2 - Y1) + 30 * (M2 - M1) + D2 - D1) / 360
   * * A/365L - If payment frequency is annual and 29 February is included in the interest period or if payment
   *   frequency is more frequent than annual and payment date falls in a leap year: Day Count Fraction =
   *   Days(Date1, Date2) / 366 Else: Day Count Fraction = Days(Date1, Date2) / 365
   * * A/A_AFB - If period between Date1 and Date2 contains 29 February: Day Count Fraction =
   *   Days(Date1, Date2) / 366 Else: Day Count Fraction = Days(Date1, Date2) / 365
   * * 30/A - Date3 is the previous interest payment date. Date4 is the next interest payment date. If (Date2
   *   is end of the month) and (Date1 is the last day of February) and (Date2 is the last day of February), then
   *   change D2 to 30. If (Date2 is end of the month) and (Date1 is the last day of February), then change D1
   *   to 30. If D2 is 31 and D1 is 30 or 31, then change D2 to 30. If D1 is 31, then change D1 to 30. Day Count
   *   Fraction = (360 * (Y2 - Y1) + 30 * (M2 - M1) + D2 - D1) / (Days(Date3, Date4) * Pay frequency)
   * * Changeable - Changeable day count convention. Arbitrary/unpredictable changes to the day count can
   *   occur.
   * * Unknown - Unknown day count convention
   * * 30/365G - If D1 is last day of the month, then change D1 to 30. If D2 is last day of the month, then
   *   change D2 to 30. Day Count Fraction = (360 * (Y2 - Y1) + 30 * (M2 - M1) + D2 - D1) / 365
   * * A/364 - Day Count Fraction = Days(Date1, Date2) / 364
   * * NL/360 - If period between Date1 and Date2 contains 29 February: Day Count Fraction = (Days(Date1,
   *   Date2) - 1) / 360 Else: Day Count Fraction = Days(Date1, Date2) / 360
   * * B/252 - Day Count Fraction = Business Days(Date1, Date2) / 252
   */
  dayCount?: Maybe<Scalars["String"]>;
  /** Debt service type */
  debtServiceType?: Maybe<Scalars["String"]>;
  /**
   * A flag indicating whether the security has the option to be legally or economically defeased in the future,
   * as specified in the prospectus. That is, the issuing company has either provided money for all coupon and
   * principal payments to the trustee (economic) or, the bond issuer sets up an irrevocable trust for the profit
   * of the bondholder and is no longer legally bound by the convenants of the issue.
   */
  defeasable?: Maybe<Scalars["Boolean"]>;
  /**
   * The minimum multiples in which a bond can be held in the secondary market above the Minimum
   * Denomination
   */
  denominationIncrement?: Maybe<Scalars["Float"]>;
  /** Bond price including accrued interest */
  dirtyPrice?: Maybe<Scalars["Float"]>;
  dualCurrency?: Maybe<Scalars["Boolean"]>;
  /** Textual description of calendar adjustment methodology */
  exDividendCalendarAdjustment?: Maybe<Scalars["String"]>;
  /**
   * Integer used in conjunction with the ex-dividend calendar code. For example, if the calendar is a
   * "_n_th calendar day of month" value and the ex-dividend date is on the 30th calendar day of the month, 30
   * would show in this field. If the ex-dividend calendar description is a "_n_ calendar day(s) prior" value,
   * then it is an offset from the pay date. For example, 15 means "15 calendar days prior to the pay date."
   */
  exDividendCalendarAdjustmentValue?: Maybe<Scalars["Int"]>;
  exchangeListed?: Maybe<Scalars["Boolean"]>;
  /**
   * Date on which the first coupon payment (either cash, capitalization, PIK or some combination of these) is
   * made. Date is not adjusted for nonbusiness days.
   */
  firstCouponDate?: Maybe<Scalars["String"]>;
  /** Indicates if the bond has a floating rate coupon */
  floating?: Maybe<Scalars["Boolean"]>;
  /**
   * Indicates whether a bond is a green bond. Green bonds are fixed income products where the proceeds are used
   * or earmarked for environmentally beneficial projects. This also includes ESG bonds where the proceeds are
   * used only for environmental projects. Thomson Reuters definition of this field is in line with that of
   * Climate Bond Initiative’s definition.
   */
  green?: Maybe<Scalars["Boolean"]>;
  /**
   * A flag flag indicating whether there is a third party guarantee or, in some rare instances, a self guarantee
   * in effect as to the timely payment of interest and principal applicable to the asset within the guaranteed
   * period terms.
   */
  guaranteed?: Maybe<Scalars["Boolean"]>;
  /** warrants were attached to the bond at issue */
  hasWarrantsAttached?: Maybe<Scalars["Boolean"]>;
  inflationProtected?: Maybe<Scalars["Boolean"]>;
  /**
   * A description of the security itself. For example, bond, note, bill, debenture, preferred stock, warrant, or
   * commercial paper.
   */
  instrumentType?: Maybe<Scalars["String"]>;
  issue?: Maybe<Issue>;
  /** The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) currency code for the currency of issue */
  issueCurrency?: Maybe<Scalars["String"]>;
  /**
   * The settlement date for the initial placement of the security, except when a market designates a different
   * issue date.
   */
  issueDate?: Maybe<Scalars["String"]>;
  issuer?: Maybe<Issuer4>;
  /**
   * Date on which the last coupon payment (either cash, capitalization, PIK or some combination of these) prior
   * to the expected maturity date or the maturity date, whichever is currently applicable, is made. Date is not
   * adjusted for non-business days.
   */
  lastCouponDate?: Maybe<Scalars["String"]>;
  /** The last date on which this asset was included as a liquid ETF constituent */
  lastLiquidEtfConstituentDate?: Maybe<Scalars["String"]>;
  /** Liquidity criteria */
  liquidityCriteria?: Maybe<BondLiquidityCriteria>;
  marketData?: Maybe<MarketData2>;
  /**
   * Date on which the principal amount of the security becomes due
   * and payable, as stated in the terms of the security.
   */
  maturityDate?: Maybe<Scalars["String"]>;
  /** A flag indicating whether the security is a issued under a medium term note program. */
  mediumTermNote?: Maybe<Scalars["Boolean"]>;
  /**
   * The smallest amount in which a bond may be purchased in the secondary market,
   * expressed in face value also known as par value
   */
  minimumDenomination?: Maybe<Scalars["Float"]>;
  /** The nearest call period's end date */
  nearestCallPeriodEndDate?: Maybe<Scalars["String"]>;
  /**
   * The nearest ordinary call period's start date. The nearest call may start before the loading date, as long
   * as the end date occurs afterward.
   */
  nearestCallPeriodStartDate?: Maybe<Scalars["String"]>;
  /** The nearest call's price */
  nearestCallPrice?: Maybe<Scalars["Float"]>;
  /** The date of the next coupon rate change */
  nextResetDate?: Maybe<Scalars["String"]>;
  /** The maximum notice period for the ordinary call */
  ordinaryCallNoticePeriodMaximumAmount?: Maybe<Scalars["Int"]>;
  /** The minimum notice period for the ordinary call */
  ordinaryCallNoticePeriodMinimumAmount?: Maybe<Scalars["Int"]>;
  /** The notice period units for the ordinary call */
  ordinaryCallNoticePeriodUnits?: Maybe<Scalars["String"]>;
  /** The option type for the bond's ordinary call */
  ordinaryCallOptionType?: Maybe<Scalars["String"]>;
  /** Indicates if the bond has an ordinary call option */
  ordinaryCallable?: Maybe<Scalars["Boolean"]>;
  originalAmountIssued?: Maybe<Scalars["Float"]>;
  /** Underlying benchmark */
  originalBenchmark?: Maybe<Scalars["String"]>;
  /**
   * Price at which the public may purchase the offered security from the underwriters, expressed as a percentage
   * of par
   */
  originalIssuePrice?: Maybe<Scalars["Float"]>;
  /** Difference between the yield of the security issued vs pricing security in basis points */
  originalIssueSpread?: Maybe<Scalars["Float"]>;
  originalYieldToMaturity?: Maybe<Scalars["Float"]>;
  /**
   * Identifies the defined par value at the initial issuance of the security, also known as stated or face
   * value, expressed in units of the current currency of denomination and usually updated based on the following
   * criteria:
   *
   * * For convertibles, it is the conversion par value and when in the initial segment with conversion terms
   * * For preferreds, it is the par value
   * * For all other cases and securities, it is the denomination amount
   *
   * Note that the value in the field may be different than the value produced by one of these criteria. Also, if
   * an applicable Denomination Amount is not available to display as the par value, a value may still be updated
   * in the field based on source documentation.
   */
  parValue?: Maybe<Scalars["Float"]>;
  partlyPaid?: Maybe<Scalars["Boolean"]>;
  /**
   * A flag indicating if the security can pay interest/dividends in the form of additional securities or equity
   * instead of, or in addition to, cash. This flag is set to true where the issuer (or borrower) has the
   * obligation to pay interest (or a portion of the interest) in-kind, which is compulsory and is predefined in
   * the terms of the security.
   */
  payableInKind?: Maybe<Scalars["Boolean"]>;
  /** Indicates if the bond is paying coupons & principals and not in default */
  performing?: Maybe<Scalars["Boolean"]>;
  perpetual?: Maybe<Scalars["Boolean"]>;
  /**
   * Price quote convention:
   * * 128THS
   * * 16THS
   * * 256THS
   * * 32NDS
   * * 320THS
   * * 64THS
   * * 8THS
   * * DECIMAL
   * * PRICE
   * * SPREAD
   * * UPFRONT
   */
  priceQuoteConvention?: Maybe<Scalars["String"]>;
  /** A description of whether a security is quoted in currency per unit or points of 100% */
  priceQuoteMethod?: Maybe<Scalars["String"]>;
  /** Textual description of rounding method */
  priceQuoteRoundingMethod?: Maybe<Scalars["String"]>;
  /**
   * The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the currency in which the principal is paid
   * in the current principal period
   */
  principalCurrency?: Maybe<Scalars["String"]>;
  /**
   * If the issuer's offering documentation (e.g., prospectus or offering memorandum) includes a statement to the
   * effect that the security will be offered and sold in reliance upon Rule 144A of the U.S. Securities Act of
   * 1933. It allows privately placed securities to be traded among qualified institutional buyers.
   */
  private144a?: Maybe<Scalars["Boolean"]>;
  privatePlacement?: Maybe<Scalars["Boolean"]>;
  /** Indicates if the bond is puttable */
  puttable?: Maybe<Scalars["Boolean"]>;
  /** True for bonds quoted at their full (dirty) price and false for those quoted at their clean price */
  quotedDirty?: Maybe<Scalars["Boolean"]>;
  /** Issue ratings */
  ratings?: Maybe<IssueRatings>;
  /** Textual description of calendar adjustment methodology */
  recordDateCalendarAdjustment?: Maybe<Scalars["String"]>;
  recordDateCalendarAdjustmentValue?: Maybe<Scalars["Int"]>;
  /**
   * The redemption value of the asset at maturity. Generally this is par value (100.00) but may be different
   * for certain securities.
   */
  redemptionValue?: Maybe<Scalars["Float"]>;
  /** Rich/Cheap information */
  richCheap?: Maybe<RichCheap>;
  /** Description of the level of seniority, secured/unsecured status, preferred, non-preferred, etc. */
  seniority?: Maybe<Scalars["String"]>;
  /**
   * The series number, for example, 1998-F. This column may also be
   * used for hybrid securities, for example, MIPPS. For the Danish
   * market, the series number and Capital Centre information will be
   * available.
   */
  series?: Maybe<Scalars["String"]>;
  /** Sinking/Amortization Indicator */
  sinkingOrAmortizing?: Maybe<Scalars["Boolean"]>;
  /**
   * Further detail on the classification of sovereign securities:
   * * Agency
   * * Central Bank
   * * Government/Treasury
   * * Municipal
   * * Provincial
   */
  sovereignClass?: Maybe<Scalars["String"]>;
  /** The state of issuance for a US-based municipal security */
  state?: Maybe<Scalars["String"]>;
  /** Indicates whether the security is tax exempt by the state where it was issued */
  stateTaxExempt?: Maybe<Scalars["Boolean"]>;
  /**
   * Indicates if the bond is straight. A straight bond is a bullet bond that pays a fixed interest rate through
   * its life and has no embedded options.
   */
  straight?: Maybe<Scalars["Boolean"]>;
  /**
   * A flag indicating whether the coupon payments may be "stripped" from the offered security. Stripping is the
   * process of separating a bond into its principal component and interest components. These components are then
   * sold separately.
   */
  strippable?: Maybe<Scalars["Boolean"]>;
  /** Indicates whether the interest of a tax-exempt security is subject to the US Alternative Minimum Tax (AMT) */
  subjectToAlternativeMinimumTax?: Maybe<Scalars["Boolean"]>;
  /**
   * The total amount issued. For Treasuries, this represents amt_iss_public plus an amount that is kept by the
   * Federal Reserve for their own investing or made available to foreign banks and investors. For strips, this
   * represents the portion held in a stripped form. Expressed in thousands.
   */
  totalAmountIssued?: Maybe<Scalars["Float"]>;
  /** Indicates whether a security is exempt from federal taxes in the United States */
  unitedStatesTaxExempt?: Maybe<Scalars["Boolean"]>;
  /** Description of the registrant's planned use of its proceeds from the offering */
  useOfProceeds?: Maybe<Scalars["String"]>;
  /**
   * The tax deducted at source on interest or dividends to be paid by the investor. This is most often given
   * for international government issues.
   */
  withholdingTax?: Maybe<Scalars["Float"]>;
}
export interface Classifications {
  __typename?: "Classifications";
  barclaysLevel1?: Maybe<Scalars["String"]>;
  barclaysLevel2?: Maybe<Scalars["String"]>;
  barclaysLevel3?: Maybe<Scalars["String"]>;
  barclaysLevel4?: Maybe<Scalars["String"]>;
  bondhouse?: Maybe<Scalars["String"]>;
  datastreamSubtype?: Maybe<Scalars["String"]>;
  datastreamType?: Maybe<Scalars["String"]>;
  gics?: Maybe<Scalars["String"]>;
}
export interface CouponResetPeriod {
  __typename?: "CouponResetPeriod";
  effectiveDate: Scalars["String"];
  rate?: Maybe<Scalars["Float"]>;
  rateNonAnnual?: Maybe<Scalars["Float"]>;
}
export interface CouponPeriod {
  __typename?: "CouponPeriod";
  /**
   * The maximum coupon rate to which the security can be reset associated with the particular leg number.
   * Note: This field is only applicable when couponClass = FLT, RNG, or TBP.
   */
  cap?: Maybe<Scalars["Float"]>;
  /**
   * Description representing the coupon type:
   * * DSC - Discount/Zero Coupon
   * * FIX - Fixed Coupon
   * * FLT - Floating Coupon
   * * RNG - Range Coupon
   * * STR - Stripped Coupon
   * * TBP - To Be Priced Coupon
   * * UNK - Unknown
   * * VAR - Variable Coupon
   */
  couponClass?: Maybe<Scalars["String"]>;
  /**
   * Details of the formula used to calculate the new rate of
   * interest.
   * * Formula Structure -->
   * multiplier|index|lookback|spread
   * * Multiplier Typically --> one.
   * * Index --> See the RIGs database or base_index_cds for description. Indices with pricing are in
   * RIGs. Others can be found in the base_index_cds table in the GCodes
   * Database Viewer.
   * * Lookback --> Identifies rate determination date (for example, 2 business days prior to reset date).
   * * Spread --> 0.10 = 10 basis points.
   * ***Example 1.00*#US3MLIB<2d+0.10
   * Note: This field is only applicable when couponClass =
   * FLT, RNG, or TBP.***
   */
  couponFormula?: Maybe<Scalars["JSON"]>;
  /** Human-friendly description of rounding method */
  couponRateRoundingMethod?: Maybe<Scalars["String"]>;
  /** Day count convention */
  dayCount?: Maybe<Scalars["String"]>;
  effectiveDate: Scalars["String"];
  floor?: Maybe<Scalars["Float"]>;
  indexDescription?: Maybe<Scalars["String"]>;
  /** Human-friendly name for holiday calendar */
  indexHolidayCalendar?: Maybe<Scalars["String"]>;
  numberCutOffDays?: Maybe<Scalars["Int"]>;
  /** Business day rule, often known as the business day adjustment */
  paymentBusinessDayRule?: Maybe<Scalars["String"]>;
  /** Human-friendly description of calendar adjustment methodology */
  paymentCalendarAdjustment?: Maybe<Scalars["String"]>;
  paymentCalendarAdjustmentValue?: Maybe<Scalars["Int"]>;
  /** The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) currency code for the payment currency */
  paymentCurrency?: Maybe<Scalars["String"]>;
  /** Human-friendly description of frequency */
  paymentFrequency?: Maybe<Scalars["String"]>;
  /** Human-friendly name for holiday calendar */
  paymentHolidayCalendar?: Maybe<Scalars["String"]>;
  /** Business day rule, often known as the business day adjustment */
  resetBusinessDayRule?: Maybe<Scalars["String"]>;
  /** Human-friendly description of calendar adjustment methodology */
  resetCalendarAdjustment?: Maybe<Scalars["String"]>;
  resetCalendarAdjustmentValue?: Maybe<Scalars["Int"]>;
  /** Human-friendly description of frequency */
  resetFrequency?: Maybe<Scalars["String"]>;
  /** Human-friendly name for holiday calendar */
  resetHolidayCalendar?: Maybe<Scalars["String"]>;
}
/** Credit enhancements including guarantor information for principal and interest payments */
export interface CreditEnhancement {
  __typename?: "CreditEnhancement";
  /** The type of credit enhancement. */
  additionalCreditType?: Maybe<Scalars["String"]>;
  /**
   * A y/n flag indicating if a borrower or guarantor defaults on one of its loans, it will constitute a default
   * on all of its borrowing.
   */
  crossDefaultForGuarantor?: Maybe<Scalars["Boolean"]>;
  /** Date on which the enhancement credit becomes effective. */
  enhancementEffectiveDate?: Maybe<Scalars["String"]>;
  /** Last date for which the credit enhancement is effective. */
  enhancementEndDate?: Maybe<Scalars["String"]>;
  /** A number to differentiate between multiple guarantors on the same effective date. */
  enhancementLegNumber?: Maybe<Scalars["Float"]>;
  /** A flag indicating whether money is held in escrow for this security. */
  escrowAccount?: Maybe<Scalars["Boolean"]>;
  /**
   * A flag indicating the contractually specified events that allow lenders to demand immediate repayment of a
   * debt.
   */
  eventsofDefaultforGuarantor?: Maybe<Scalars["Boolean"]>;
  /** Whether a bond is explicitly guaranteed or another type of guarantee is applicable. */
  guarantee?: Maybe<Scalars["String"]>;
  /**
   * This is the permanent identifier of the entity(s) guaranteeing the payment of principal and/or interest of
   * the security.
   */
  guarantorPermId?: Maybe<Scalars["String"]>;
  /** Type of guarantor program */
  guarantorProgram?: Maybe<Scalars["String"]>;
  /**
   * A flag indicating whether the respective guarantee is provided via insurance, purchased by either the issuer
   * or the holder of the security with an insurer.
   */
  insurance?: Maybe<Scalars["Boolean"]>;
  /** The insurer insuring interest of the security either at issuance or in the secondary market. */
  interestCollateralType?: Maybe<Scalars["String"]>;
  /** Expiration date for the letter of credit. */
  letterOfCreditExpirationDate?: Maybe<Scalars["String"]>;
  /**
   * A flag indicating the Guarantor would not issue another bond of the same type in the future that will have
   * higher priority in case the Guarantor defaults.
   */
  negativePledgeForGuarantor?: Maybe<Scalars["Boolean"]>;
  /** A flag indicating if the Guarantor has any other covenants. */
  otherCovenantsForGuarantor?: Maybe<Scalars["Boolean"]>;
  /** Specifies how much of the interest is collateralized or guaranteed for each corresponding guarantor. */
  percentInterestCollateralized?: Maybe<Scalars["Float"]>;
  /** Specifies how much of the principal is collateralized or guaranteed for each corresponding guarantor. */
  percentPrincipalCollateralized?: Maybe<Scalars["Float"]>;
  /** The insurer insuring principal of the security either at issuance or in the secondary market. */
  principalCollateralType?: Maybe<Scalars["String"]>;
}
export interface Issue {
  __typename?: "Issue";
  /**
   * Indicates whether all or a portion of this issue remains outstanding, possessing an amount outstanding
   * greater than zero
   */
  active?: Maybe<Scalars["Boolean"]>;
  /** Unique identifier for an issue */
  id: Scalars["String"];
  /** Description of the issue */
  issueDescription?: Maybe<Scalars["String"]>;
  /** Unique Refinitiv system-generated identifier for a muni issue */
  issueIdentifier?: Maybe<Scalars["String"]>;
  /** Unique Refinitiv system-generated identifier for a party */
  issuerIdentifier?: Maybe<Scalars["String"]>;
  /** Offering date */
  offeringDate?: Maybe<Scalars["String"]>;
  /** Offering description */
  offeringDescription?: Maybe<Scalars["String"]>;
  /**
   * If the issuer's offering documentation (e.g., prospectus or offering memorandum) includes a statement to the
   * effect that the security will be offered and sold in reliance upon Rule 144A of the U.S. Securities Act of
   * 1933. It allows privately placed securities to be traded among qualified institutional buyers.
   */
  private144a?: Maybe<Scalars["Boolean"]>;
  /** Indicates whether the issue is a private placement */
  privatePlacement?: Maybe<Scalars["Boolean"]>;
  /** The total par value (or discounted value) of debt initially issued as per the offering statement */
  totalProgramAmount?: Maybe<Scalars["Float"]>;
}
export interface Issuer4 {
  __typename?: "Issuer4";
  /** Whether the issuer still exists as a company */
  active?: Maybe<Scalars["Boolean"]>;
  /** Whether the issuer is currently in bankruptcy */
  bankrupt?: Maybe<Scalars["Boolean"]>;
  /** Country of domicile for the issuer's principal executive offices */
  country?: Maybe<Scalars["String"]>;
  /** A physical address */
  headquartersAddress?: Maybe<Address2>;
  /** Unique identifier for an issuer */
  id: Scalars["String"];
  /**
   * Unique identifier for the immediate parent of the issuer, defined as a company that owns or controls greater
   * than 50% of the voting stock
   */
  immediateParentId?: Maybe<Scalars["String"]>;
  /** Current legal name of the issuer */
  legalName?: Maybe<Scalars["String"]>;
  /** Long name of the issuer */
  longName?: Maybe<Scalars["String"]>;
  /** Issuer ratings */
  ratings?: Maybe<IssuerRatings>;
  /** A physical address */
  registeredAddress?: Maybe<Address2>;
  /** Industry of the issuer */
  sector?: Maybe<Scalars["String"]>;
  /** Short name of the issuer */
  shortName?: Maybe<Scalars["String"]>;
  /** Description of the sovereign entity */
  sovereignClass?: Maybe<Scalars["String"]>;
  /** Within sector, further breakdown of the industry of the issuer */
  subsector?: Maybe<Scalars["String"]>;
  /**
   * Ticker code used to identify the common stock when available, else common acronym of company if known, else
   * matched to immediate parent, else unique value based on name for standalone organizations.
   */
  ticker?: Maybe<Scalars["String"]>;
  /**
   * Unique identifier for the ultimate parent of the issuer, defined as a company that owns or controls greater
   * than 50% of the voting stock at the highest level of the issuer tree
   */
  ultimateParentId?: Maybe<Scalars["String"]>;
  /**
   * URL of the legal entity's corporate website or company homepage. For funds, this is the URL of the fund
   * family.
   */
  url?: Maybe<Scalars["String"]>;
}
/** A physical address */
export interface Address2 {
  __typename?: "Address2";
  /** City/town as published in valid source documents */
  cityOrTown?: Maybe<Scalars["String"]>;
  /** Code indicating the ISO country */
  country?: Maybe<Scalars["String"]>;
  /** Region within the country as defined by the postal authority/agency */
  stateOrCountyOrRegion?: Maybe<Scalars["String"]>;
  /** Building name, floor, suite or level */
  street1?: Maybe<Scalars["String"]>;
  /** Street number and name or post office box */
  street2?: Maybe<Scalars["String"]>;
  /** Additional address information required by the postal authority/agency, such as zone or urbanization */
  street3?: Maybe<Scalars["String"]>;
  /** Designated postal code/zip code as assigned by the postal authority/agency */
  zipCode?: Maybe<Scalars["String"]>;
}
/** Issuer ratings */
export interface IssuerRatings {
  __typename?: "IssuerRatings";
  /** Rating */
  snpLongTerm?: Maybe<Rating3>;
  /** Rating */
  snpSeniorSecured?: Maybe<Rating3>;
  /** Rating */
  snpSeniorUnsecured?: Maybe<Rating3>;
  /** Rating */
  snpShortTerm?: Maybe<Rating3>;
  /** Rating */
  snpSubordinated?: Maybe<Rating3>;
}
/** Rating */
export interface Rating3 {
  __typename?: "Rating3";
  /** Effective date */
  effectiveDate: Scalars["String"];
  /** S&P equivalent rank */
  rank: Scalars["Float"];
  /** Rating */
  rating: Scalars["String"];
}
/** Liquidity criteria */
export interface BondLiquidityCriteria {
  __typename?: "BondLiquidityCriteria";
  /** Has quote from four days ago */
  hasAdequateQuotes?: Maybe<Scalars["Boolean"]>;
  /** Date liquidity criteria was last evaluated */
  liquidityCriteriaDate: Scalars["String"];
}
export interface MarketData2 {
  __typename?: "MarketData2";
  ejv?: Maybe<MarketQuote>;
}
export interface MarketQuote {
  __typename?: "MarketQuote";
  /** Accrued interest */
  accruedInterest?: Maybe<Scalars["Float"]>;
  /** The ask price, yield, or discount of the security */
  askPrice?: Maybe<Scalars["Float"]>;
  /** The ask yield of the security */
  askYield?: Maybe<Scalars["Float"]>;
  /** The difference between the bond's native bid yield to maturity and the interest rate swap */
  assetSwapSpread?: Maybe<Scalars["Float"]>;
  /** The difference between the bond's yield and the yield of its benchmark */
  benchmarkSpread?: Maybe<Scalars["Float"]>;
  /** The bid price, yield, or discount of the security */
  bidPrice?: Maybe<Scalars["Float"]>;
  /** The bid yield of the security */
  bidYield?: Maybe<Scalars["Float"]>;
  /**
   * The corporate bond equivalent cash flow yield using the cash-flow assumptions described as follows: the
   * average life of the security, calculated with the cash-flow assumption that corporate and government
   * securities trade to maturity
   */
  cbeYieldToMaturity?: Maybe<Scalars["Float"]>;
  /**
   * The corporate bond equivalent cash-flow yield using the cash-flow assumptions described as follows: the
   * average life, computed using cash-flow assumptions that represent expected outcome.
   */
  cbeYieldToWorst?: Maybe<Scalars["Float"]>;
  /** The exchange contributed market closing price for the security */
  closePrice?: Maybe<Scalars["Float"]>;
  /** The effective date of the price */
  date: Scalars["String"];
  /** The exchange contributed highest market price of the day for the security */
  highPrice?: Maybe<Scalars["Float"]>;
  /** The exchange contributed lowest market price of the day for the security */
  lowPrice?: Maybe<Scalars["Float"]>;
  /** The exchange contributed market open price for the security */
  openPrice?: Maybe<Scalars["Float"]>;
  /** Price following market and vendor conventions */
  price?: Maybe<Scalars["Float"]>;
  /** Pricing vendor or contributor */
  source?: Maybe<Scalars["String"]>;
  /** The difference between the bond’s yield and the LIBOR curve, expressed in basis points */
  swapSpread?: Maybe<Scalars["Float"]>;
  /** The exchange contributed trade volume for the day for the security */
  volume?: Maybe<Scalars["Float"]>;
  /** Yield is calculated using the native yield to maturity convention */
  yieldToMaturity?: Maybe<Scalars["Float"]>;
  /**
   * Yield is calculated based on the native yield to worst formula, after taking all of the bond redemption
   * features into account
   */
  yieldToWorst?: Maybe<Scalars["Float"]>;
  /**
   * The constant spread in basis points that will make the price equal to the present value of the cash flows
   * when added to each relevant point of the yield curve
   */
  zSpread?: Maybe<Scalars["Float"]>;
}
/** Issue ratings */
export interface IssueRatings {
  __typename?: "IssueRatings";
  /** Rating */
  snpLongTerm?: Maybe<Rating3>;
  /** Rating */
  snpShortTerm?: Maybe<Rating3>;
}
/** Rich/Cheap information */
export interface RichCheap {
  __typename?: "RichCheap";
  effectiveDate: Scalars["String"];
  /** Rich/cheap relative to historical range, bound by 0 (rich) and 100 (cheap) */
  interquartileRange?: Maybe<Scalars["Float"]>;
  /** Rich/cheap in basis points */
  richCheapBps: Scalars["Float"];
}
export interface Equity {
  __typename?: "Equity";
  eps?: Maybe<Scalars["Float"]>;
  marketCap?: Maybe<Scalars["Float"]>;
  peRatio?: Maybe<Scalars["Float"]>;
  shareClass?: Maybe<Scalars["String"]>;
  tradeLotRoundSize?: Maybe<Scalars["Float"]>;
  tradeLotSize?: Maybe<Scalars["Float"]>;
}
/** Scores for Environmental, Social, and Governance */
export interface EsgScores2 {
  __typename?: "EsgScores2";
  /** Environmental score */
  environmental?: Maybe<Scalars["Int"]>;
  /** Governance score */
  governance?: Maybe<Scalars["Int"]>;
  /** Social score */
  social?: Maybe<Scalars["Int"]>;
  timestamp?: Maybe<Scalars["String"]>;
  /** Overall score */
  total?: Maybe<Scalars["Int"]>;
}
export interface Fund4 {
  __typename?: "Fund4";
  /** Fund allocation data */
  allocation?: Maybe<FundAllocation>;
  /** Information on whether a fund is supported by Apex. Only applies to mutual funds. */
  apexSupport?: Maybe<ApexSupport>;
  /** Description representing the asset status */
  assetStatus?: Maybe<Scalars["String"]>;
  benchmark?: Maybe<Scalars["String"]>;
  /** BondHouse classification */
  classification?: Maybe<Scalars["String"]>;
  /** Fund distributions */
  distributions?: Maybe<FundDistributions>;
  fees?: Maybe<Fees>;
  focus?: Maybe<Focus>;
  /** fund type, should matches assetType on the parent level */
  fundType?: Maybe<Scalars["String"]>;
  inceptionDate?: Maybe<Scalars["String"]>;
  /** Indicates whether the share class is institutional only */
  institutional?: Maybe<Scalars["Boolean"]>;
  /** The fund management company */
  managementCompany?: Maybe<Scalars["String"]>;
  /**
   * The market mid price. Certain types of funds, including closed-end funds (CEFs) and exchange-traded funds
   * (ETFs) may trade at a premium or discount.
   */
  midPrice?: Maybe<Scalars["Float"]>;
  /**
   * The net asset value (NAV) per share, equivalent to the market value of the underlying securities divided by
   * the number of shares outstanding
   */
  netAssetValuePerShare?: Maybe<Scalars["Float"]>;
  /** Fund net assets */
  netAssets?: Maybe<Scalars["Float"]>;
  /** Date of the latest fund assets value */
  netAssetsDate?: Maybe<Scalars["String"]>;
  /** The date of the latest price and NAV/share figures */
  priceDate?: Maybe<Scalars["String"]>;
  regulatoryStructure?: Maybe<Scalars["String"]>;
  replicationStrategy?: Maybe<Scalars["String"]>;
  /** Lipper Leaders scores */
  scores?: Maybe<Scores6>;
  /** Specifies the minimum number of shares that can be purchased, as regulated by an exchange */
  tradeLotSize?: Maybe<Scalars["Float"]>;
  /** Fund yields */
  yields?: Maybe<FundYields>;
}
/** Fund allocation data */
export interface FundAllocation {
  __typename?: "FundAllocation";
  /** Asset allocation data */
  asset?: Maybe<AssetAllocation>;
  /** Currency allocation data */
  currency?: Maybe<Scalars["JSON"]>;
  /** Debt type allocation */
  debtType?: Maybe<DebtTypeAllocation2>;
  /** Country allocation data */
  equityCountry?: Maybe<Scalars["JSON"]>;
  /** Region allocation data */
  equityRegion?: Maybe<RegionAllocation>;
  /** Country allocation data */
  fixedIncomeCountry?: Maybe<Scalars["JSON"]>;
  /** Region allocation data */
  fixedIncomeRegion?: Maybe<RegionAllocation>;
  /** GICS sub-industry allocation data */
  gicsSubIndustry?: Maybe<GicsSubIndustryAllocation>;
  /** Maturity allocation data */
  maturity?: Maybe<MaturityAllocation>;
  /** Rating allocation data */
  rating?: Maybe<RatingAllocation2>;
  /** Region allocation data */
  region?: Maybe<RegionAllocation>;
  /** TRBC Industry allocation data */
  trbcIndustry?: Maybe<TrbcIndustryAllocation>;
}
/** Asset allocation data */
export interface AssetAllocation {
  __typename?: "AssetAllocation";
  /** Allocation to the cash sector */
  cash?: Maybe<Scalars["Float"]>;
  /** Allocation to the equity sector */
  equity?: Maybe<Scalars["Float"]>;
  /** Allocation to the fixed income sector */
  fixedIncome?: Maybe<Scalars["Float"]>;
  /** Allocation to other or unknown sectors */
  other?: Maybe<Scalars["Float"]>;
}
/** GICS sub-industry allocation data */
export interface GicsSubIndustryAllocation {
  __typename?: "GicsSubIndustryAllocation";
  /** Allocation to the communication services sub-industry */
  communicationServices?: Maybe<Scalars["Float"]>;
  /** Allocation to the consumer discretionary sub-industry */
  consumerDiscretionary?: Maybe<Scalars["Float"]>;
  /** Allocation to the consumer staples sub-industry */
  consumerStaples?: Maybe<Scalars["Float"]>;
  /** Allocation to the energy sub-industry */
  energy?: Maybe<Scalars["Float"]>;
  /** Allocation to the financials sub-industry */
  financials?: Maybe<Scalars["Float"]>;
  /** Allocation to the health care sub-industry */
  healthCare?: Maybe<Scalars["Float"]>;
  /** Allocation to the industrials sub-industry */
  industrials?: Maybe<Scalars["Float"]>;
  /** Allocation to the information technology sub-industry */
  informationTechnology?: Maybe<Scalars["Float"]>;
  /** Allocation to the materials sub-industry */
  materials?: Maybe<Scalars["Float"]>;
  /** Allocation to other or unknown sub-industries */
  other?: Maybe<Scalars["Float"]>;
  /** Allocation to the real estate sub-industry */
  realEstate?: Maybe<Scalars["Float"]>;
  /** Allocation to the utilities sub-industry */
  utilities?: Maybe<Scalars["Float"]>;
}
/** TRBC Industry allocation data */
export interface TrbcIndustryAllocation {
  __typename?: "TrbcIndustryAllocation";
  /** Allocation to the basic materials sector */
  basicMaterials?: Maybe<Scalars["Float"]>;
  /** Allocation to the consumer cyclicals sector */
  consumerCyclicals?: Maybe<Scalars["Float"]>;
  /** Allocation to the consumer non-cyclicals sector */
  consumerNonCyclicals?: Maybe<Scalars["Float"]>;
  /** Allocation to the energy sector */
  energy?: Maybe<Scalars["Float"]>;
  /** Allocation to the financials sector */
  financials?: Maybe<Scalars["Float"]>;
  /** Allocation to the healthcare sector */
  healthcare?: Maybe<Scalars["Float"]>;
  /** Allocation to the industrials sector */
  industrials?: Maybe<Scalars["Float"]>;
  /** Allocation to the other sector */
  other?: Maybe<Scalars["Float"]>;
  /** Allocation to the technology sector */
  technology?: Maybe<Scalars["Float"]>;
  /** Allocation to the telecommunications services sector */
  telecommunicationsServices?: Maybe<Scalars["Float"]>;
  /** Allocation to the utilities sector */
  utilities?: Maybe<Scalars["Float"]>;
}
/** Information on whether a fund is supported by Apex. Only applies to mutual funds. */
export interface ApexSupport {
  __typename?: "ApexSupport";
  /** Date that Apex trade support was evaluated */
  supportDate: Scalars["String"];
  /** Whether the fund is supported for trading on Apex */
  supported: Scalars["Boolean"];
}
/** Fund distributions */
export interface FundDistributions {
  __typename?: "FundDistributions";
  capitalGain?: Maybe<CapitalGainDistributions>;
  foreignTaxCredit?: Maybe<ForeignTaxCreditDistributions>;
  income?: Maybe<IncomeDistributions>;
  repaymentCategory?: Maybe<RepaymentCategoryDistributions>;
}
export interface CapitalGainDistributions {
  __typename?: "CapitalGainDistributions";
  capitalGain?: Maybe<FundDistribution>;
  collectibles?: Maybe<FundDistribution>;
  longTermCapitalGain?: Maybe<FundDistribution>;
  mediumTermCapitalGain?: Maybe<FundDistribution>;
  nonQualifiedShortTermCapitalGain?: Maybe<FundDistribution>;
  qualifiedShortTermCapitalGain?: Maybe<FundDistribution>;
  returnOfCapital?: Maybe<FundDistribution>;
  shortTermCapitalGain?: Maybe<FundDistribution>;
  superLongTermCapitalGain?: Maybe<FundDistribution>;
}
export interface FundDistribution {
  __typename?: "FundDistribution";
  /** Accounting date */
  accountingDate?: Maybe<Scalars["String"]>;
  /** Ex date */
  exDate?: Maybe<Scalars["String"]>;
  /** Distribution amount */
  exValue?: Maybe<Scalars["Float"]>;
  /** Payment date */
  paymentDate?: Maybe<Scalars["String"]>;
  /** Record date */
  recordDate?: Maybe<Scalars["String"]>;
  /** Reinvestment date */
  reinvestmentDate?: Maybe<Scalars["String"]>;
  /** Reinvestment type */
  reinvestmentType?: Maybe<Scalars["String"]>;
  /** Reinvestment value */
  reinvestmentValue?: Maybe<Scalars["Float"]>;
  /** Taxable interest income */
  taxableInterestIncome?: Maybe<Scalars["Float"]>;
}
export interface ForeignTaxCreditDistributions {
  __typename?: "ForeignTaxCreditDistributions";
  foreignTaxCredit?: Maybe<FundDistribution>;
  nonQualifiedForeignTaxPaid?: Maybe<FundDistribution>;
  qualifiedForeignTaxPaid?: Maybe<FundDistribution>;
}
export interface IncomeDistributions {
  __typename?: "IncomeDistributions";
  aggregateAccrual?: Maybe<FundDistribution>;
  exemptIncome?: Maybe<FundDistribution>;
  incomeDividend?: Maybe<FundDistribution>;
  interestIncome?: Maybe<FundDistribution>;
  nonQualifiedIncomeDividend?: Maybe<FundDistribution>;
  qualifiedIncomeDividend?: Maybe<FundDistribution>;
}
export interface RepaymentCategoryDistributions {
  __typename?: "RepaymentCategoryDistributions";
  bonusIssue?: Maybe<FundDistribution>;
  factor?: Maybe<FundDistribution>;
  repayment?: Maybe<FundDistribution>;
  rightsIssue?: Maybe<FundDistribution>;
  split?: Maybe<FundDistribution>;
}
export interface Fees {
  __typename?: "Fees";
  backLoad?: Maybe<Scalars["Float"]>;
  frontLoad?: Maybe<Scalars["Float"]>;
  fundExpenseRatio?: Maybe<Scalars["Float"]>;
  managementFee?: Maybe<Scalars["Float"]>;
  marketing12b1Fee?: Maybe<Scalars["Float"]>;
  performanceFee?: Maybe<Scalars["Float"]>;
}
export interface Focus {
  __typename?: "Focus";
  /**
   * Broad asset class that the fund intends to invest in. An asset class is a grouping of investments that
   * exhibit similar characteristics and are subject to the
   * same laws and regulations. This focus is interpreted from the fund's prospectus.
   */
  assetClassFocus?: Maybe<Scalars["String"]>;
  geoFocus?: Maybe<Scalars["String"]>;
}
/** Lipper Leaders scores */
export interface Scores6 {
  __typename?: "Scores6";
  /** Fund scores organized by the time period of measurement */
  consistentReturn?: Maybe<Score>;
  /** Fund scores organized by the time period of measurement */
  expense?: Maybe<Score>;
  /** Fund scores organized by the time period of measurement */
  preservation?: Maybe<Score>;
  /** Fund scores organized by the time period of measurement */
  taxEfficiency?: Maybe<Score>;
  /** Fund scores organized by the time period of measurement */
  totalReturn?: Maybe<Score>;
}
/** Fund scores organized by the time period of measurement */
export interface Score {
  __typename?: "Score";
  /** The 5-year score */
  fiveYear?: Maybe<Scalars["Int"]>;
  /** The overall score */
  overall?: Maybe<Scalars["Int"]>;
  /** The 10-year score */
  tenYear?: Maybe<Scalars["Int"]>;
  /** The 3-year score */
  threeYear?: Maybe<Scalars["Int"]>;
}
/** Fund yields */
export interface FundYields {
  __typename?: "FundYields";
  /** Daily SEC yield */
  dailySecYield?: Maybe<Scalars["Float"]>;
  /** Daily SEC yield date */
  dailySecYieldDate?: Maybe<Scalars["String"]>;
  /** Distribution yield */
  distributionYield?: Maybe<Scalars["Float"]>;
  /** Dividend yield */
  dividendYield?: Maybe<Scalars["Float"]>;
  /** Lipper distribution yield */
  lipperDistributionYield?: Maybe<Scalars["Float"]>;
  /** Lipper projected yield */
  projectedYield?: Maybe<Scalars["Float"]>;
  /** SEC yield */
  secYield?: Maybe<Scalars["Float"]>;
  /** Simple yield at the beginning of the measured period */
  simpleYieldBegin?: Maybe<Scalars["Float"]>;
  /** Simple yield at the end of the measured period */
  simpleYieldEnd?: Maybe<Scalars["Float"]>;
  /** 30-day yield */
  thirtyDayYield?: Maybe<Scalars["Float"]>;
  /** Trailing twelve-month yield */
  trailingTwelveMonthYield?: Maybe<Scalars["Float"]>;
}
/**
 * asset/security identifier:
 * * cusip - 9 alpha-numeric characters that includes the check digit, first 6 alpha numeric characters refers to
 *   the issuer
 * * isin - 12 alpha-numeric characters, first 2 characters contains country code, last character is a check
 *   digit
 * * sedol - 7 alpha-numeric characters, single security can have multiple SEDOL, handle later
 * * primaryTicker - primary exchange ticker
 * * cins - 9 alpha-numeric characters managed by cusip
 * * bbGlobal - 12 alpha-numeric characters managed by Bloomberg
 * The first 2 characters are upper-case consonants (including "Y"),
 * the third character is the upper-case "G",
 * characters 4 -11 are any upper-case consonant (including "Y")
 * or integer between 0 and 9, and the last character is a check-digit.
 * An identifier is assigned to instruments of all asset classes,
 * is unique to an individual instrument and once issued will not change for an instrument.
 * * refinitivAssetId - 18 alpha-numeric characters asset id, example sourced from DSFI
 * * refinitivIssuePermId - unique Refinitiv system-generated PermID for an asset
 * * refinitivLipperId - id to specify a share class of a fund and also
 * * refinitivLipperPermId - lipper permanent id
 * * valoren - nine digits for official Swiss Identification number
 * * cik - SEC's central index key for corporations/individuals
 * * apex - APEX identifier
 */
export interface Identifiers {
  __typename?: "Identifiers";
  /** APEX identifier */
  apex?: Maybe<Scalars["String"]>;
  bbGlobal?: Maybe<Scalars["String"]>;
  cik?: Maybe<Scalars["String"]>;
  cins?: Maybe<Scalars["String"]>;
  cusip?: Maybe<Scalars["String"]>;
  isin?: Maybe<Scalars["String"]>;
  primaryTicker?: Maybe<Scalars["String"]>;
  /** Unique Refinitiv system-generated identifier for a security */
  refinitivAssetId?: Maybe<Scalars["String"]>;
  /** Unique Refinitiv system-generated PermID for an asset */
  refinitivIssuePermId?: Maybe<Scalars["String"]>;
  refinitivLipperId?: Maybe<Scalars["String"]>;
  /**
   * The share classes' parent id if the fund is a share class within a larger
   * fund structure / sub-fund
   */
  refinitivLipperParentId?: Maybe<Scalars["String"]>;
  refinitivLipperPermId?: Maybe<Scalars["String"]>;
  sedol?: Maybe<Scalars["String"]>;
  valoren?: Maybe<Scalars["String"]>;
}
export interface LegalEntity {
  __typename?: "LegalEntity";
  /** The issuer legal entity identification */
  issuingLegalEntityId?: Maybe<Scalars["String"]>;
  ultimateObligor?: Maybe<Scalars["String"]>;
  ultimateObligorId?: Maybe<Scalars["String"]>;
  ultimateParent?: Maybe<Scalars["String"]>;
  ultimateParentId?: Maybe<Scalars["String"]>;
  ultimateParentTickerExchange?: Maybe<Scalars["String"]>;
}
export interface PriceQuote {
  __typename?: "PriceQuote";
  /** Accrued interest */
  accruedInterest?: Maybe<Scalars["Float"]>;
  /** The ask price, yield, or discount of the security */
  askPrice?: Maybe<Scalars["Float"]>;
  /** The ask yield of the security */
  askYield?: Maybe<Scalars["Float"]>;
  /** The difference between the bond's native bid yield to maturity and the interest rate swap */
  assetSwapSpread?: Maybe<Scalars["Float"]>;
  /** The difference between the bond's yield and the yield of its benchmark */
  benchmarkSpread?: Maybe<Scalars["Float"]>;
  /** The bid price, yield, or discount of the security */
  bidPrice?: Maybe<Scalars["Float"]>;
  /** The bid yield of the security */
  bidYield?: Maybe<Scalars["Float"]>;
  /**
   * The corporate bond equivalent cash flow yield using the cash-flow assumptions described as follows: the
   * average life of the security, calculated with the cash-flow assumption that corporate and government
   * securities trade to maturity
   */
  cbeYieldToMaturity?: Maybe<Scalars["Float"]>;
  /**
   * The corporate bond equivalent cash-flow yield using the cash-flow assumptions described as follows: the
   * average life, computed using cash-flow assumptions that represent expected outcome.
   */
  cbeYieldToWorst?: Maybe<Scalars["Float"]>;
  /** The exchange contributed market closing price for the security */
  closePrice?: Maybe<Scalars["Float"]>;
  /** The effective date of the price */
  date: Scalars["String"];
  /** The exchange contributed highest market price of the day for the security */
  highPrice?: Maybe<Scalars["Float"]>;
  /** The exchange contributed lowest market price of the day for the security */
  lowPrice?: Maybe<Scalars["Float"]>;
  /** The exchange contributed market open price for the security */
  openPrice?: Maybe<Scalars["Float"]>;
  /** Price following market and vendor conventions */
  price?: Maybe<Scalars["Float"]>;
  /** Pricing vendor or contributor */
  source: Scalars["String"];
  /** The difference between the bond’s yield and the LIBOR curve, expressed in basis points */
  swapSpread?: Maybe<Scalars["Float"]>;
  /** The exchange contributed trade volume for the day for the security */
  volume?: Maybe<Scalars["Float"]>;
  /** Yield is calculated using the native yield to maturity convention */
  yieldToMaturity?: Maybe<Scalars["Float"]>;
  /**
   * Yield is calculated based on the native yield to worst formula, after taking all of the bond redemption
   * features into account
   */
  yieldToWorst?: Maybe<Scalars["Float"]>;
  /**
   * The constant spread in basis points that will make the price equal to the present value of the cash flows
   * when added to each relevant point of the yield curve
   */
  zSpread?: Maybe<Scalars["Float"]>;
}
/** BondHouse's proprietary scores */
export interface RoverScores {
  __typename?: "RoverScores";
  /**
   * BondHouse's proprietary measure for the attractiveness of an asset, which is a function of its expected
   * return and risk
   */
  attractiveness?: Maybe<Scalars["Float"]>;
  /**
   * BondHouse's proprietary credit score, based on a number of inputs to evaluate the credit-worthiness of a
   * bond
   */
  credit?: Maybe<Scalars["Float"]>;
  /**
   * (Funds only) BondHouse's proprietary efficiency score, measuring the effectiveness of fund management in
   * managing taxes, expenses, etc.
   */
  efficiency?: Maybe<Scalars["Float"]>;
  /** BondHouse's proprietary liquidity score, which measures the investor's ability to transact in an asset */
  liquidity?: Maybe<Scalars["Float"]>;
  /** BondHouse's proprietary risk measure based on our risk model */
  risk?: Maybe<Scalars["Float"]>;
  /** The date and time that this score was calculated */
  timestamp?: Maybe<Scalars["String"]>;
}
/** Universe inclusion information */
export interface Universes {
  __typename?: "Universes";
  /** Custom universe inclusion flags. This is for internal purposes and will be removed from any asset responses. */
  custom?: Maybe<Scalars["JSON"]>;
  /** Whether the asset is included in the general universe */
  general?: Maybe<Scalars["Boolean"]>;
  /** Whether the asset is included in the liquid universe */
  liquid?: Maybe<Scalars["Boolean"]>;
  /** Whether the asset is included in the search universe */
  search?: Maybe<Scalars["Boolean"]>;
  /** Universe inclusion evaluation date */
  timestamp?: Maybe<Scalars["String"]>;
}
export interface GetAssetByExternalIdResponse {
  __typename?: "GetAssetByExternalIdResponse";
  asset?: Maybe<Asset5>;
}
export interface GetAssetTimeSeriesResponse {
  __typename?: "GetAssetTimeSeriesResponse";
  /** BondHouse unique identifier for an asset. This is not a public identifier. */
  assetId: Scalars["String"];
  data: Array<Maybe<TimeSeriesDatum>>;
  field: Scalars["String"];
}
/**
 * The most atomic element in an asset time-series, consisting of a single
 * field for a single asset at a single time
 */
export interface TimeSeriesDatum {
  __typename?: "TimeSeriesDatum";
  timestamp: Scalars["String"];
  value: Scalars["Float"];
}
export interface GetAssetsResponse {
  __typename?: "GetAssetsResponse";
  assets: Array<Maybe<Asset5>>;
}
export type GetAssetsRequestInput = {
  assetIds: Array<Maybe<Scalars["String"]>>;
  /** Analysis date. Defaults to the latest information. */
  date?: Maybe<Scalars["String"]>;
};
export interface GetExternalIdMappingResponse {
  __typename?: "GetExternalIdMappingResponse";
  externalIdMapping: ExternalIdMapping;
}
export interface ExternalIdMapping {
  __typename?: "ExternalIdMapping";
  /** BondHouse unique identifier for an asset. This is not a public identifier. */
  assetId: Scalars["String"];
  createdAt: Scalars["String"];
  /** The identifier per the external ID source */
  externalId: Scalars["String"];
  metadata?: Maybe<Scalars["JSON"]>;
  /** The name of the external ID source */
  sourceName: Scalars["String"];
  updatedAt: Scalars["String"];
}
export interface GetInventoryResponse {
  __typename?: "GetInventoryResponse";
  /** Full inventory information including its asset IDs */
  inventory: Inventory;
}
/** Full inventory information including its asset IDs */
export interface Inventory {
  __typename?: "Inventory";
  /** Name of the app the inventory applies to */
  app: App2;
  assetIds: Array<Maybe<Scalars["String"]>>;
  /** Unique inventory identifier */
  id: Scalars["String"];
  /** The inventory's user-friendly name */
  name: Scalars["String"];
  updatedAt: Scalars["String"];
}
export interface GetIssueResponse {
  __typename?: "GetIssueResponse";
  issue: Issue;
}
export interface GetIssuerResponse {
  __typename?: "GetIssuerResponse";
  issuer: Issuer4;
}
/** The response to a request to list the candidate securities used in BestFit whitelist construction */
export interface ListBestFitWhitelistCandidatesResponse {
  __typename?: "ListBestFitWhitelistCandidatesResponse";
  pools: Array<Maybe<BestFitWhitelistCandidatePool>>;
}
/** A pool of BestFit whitelist candidates from a common source */
export interface BestFitWhitelistCandidatePool {
  __typename?: "BestFitWhitelistCandidatePool";
  candidates: Array<Maybe<BestFitWhitelistCandidate>>;
  /** A tag or description of the source */
  source: Scalars["String"];
}
/** A BestFit whitelist candidate */
export interface BestFitWhitelistCandidate {
  __typename?: "BestFitWhitelistCandidate";
  /** BondHouse unique identifier */
  assetId: Scalars["String"];
  /** CUSIP */
  cusip?: Maybe<Scalars["String"]>;
  /** Effective duration */
  duration?: Maybe<Scalars["Float"]>;
  /** ISIN */
  isin?: Maybe<Scalars["String"]>;
  /** Minimum denomination */
  minimumDenomination?: Maybe<Scalars["Float"]>;
  /** Security name */
  name?: Maybe<Scalars["String"]>;
  /** Issue S&P long term rating falling back to issuer S&P long term rating */
  rating?: Maybe<Scalars["String"]>;
  /** Issuer sector */
  sector?: Maybe<Scalars["String"]>;
  /** Issuer subsector */
  subsector?: Maybe<Scalars["String"]>;
  /** Ticker */
  ticker?: Maybe<Scalars["String"]>;
  /** Remaining years to maturity */
  yearsToMaturity?: Maybe<Scalars["Float"]>;
  /** Yield */
  yield?: Maybe<Scalars["Float"]>;
}
export interface GetTrafixHeartbeatResponse {
  __typename?: "GetTrafixHeartbeatResponse";
  heartbeat: Scalars["Boolean"];
}
export interface GetTrafixOrderResponse {
  __typename?: "GetTrafixOrderResponse";
  trafixOrder: TrafixOrder;
}
export interface TrafixOrder {
  __typename?: "TrafixOrder";
  assetId: Scalars["String"];
  createdAt: Scalars["String"];
  direction: Direction2;
  fill: Scalars["Float"];
  fullFillRequired: Scalars["Boolean"];
  goodTillCancel: Scalars["Boolean"];
  /** This is the OMS orderId */
  orderId: Scalars["String"];
  portfolioId: Scalars["String"];
  priceLimit: Scalars["Float"];
  quantity: Scalars["Float"];
  reason?: Maybe<Scalars["String"]>;
  status: TrafixStatus;
  ticker: Scalars["String"];
  trafixOrderId: Scalars["String"];
  updatedAt: Scalars["String"];
}
export enum Direction2 {
  Buy = "BUY",
  Sell = "SELL"
}
export enum TrafixStatus {
  Open = "OPEN",
  Executing = "EXECUTING",
  Closed = "CLOSED",
  Canceled = "CANCELED"
}
export interface GetTrafixTradeResponse {
  __typename?: "GetTrafixTradeResponse";
  trafixTrade: TrafixTrade;
}
export interface TrafixTrade {
  __typename?: "TrafixTrade";
  assetId: Scalars["String"];
  createdAt: Scalars["String"];
  direction: Direction2;
  executionId: Scalars["String"];
  /** This is the OMS orderId */
  orderId: Scalars["String"];
  portfolioId: Scalars["String"];
  quantity: Scalars["Float"];
  /** This is the PMS tradeId */
  tradeId: Scalars["String"];
  tradePrice: Scalars["Float"];
  trafixOrderId: Scalars["String"];
  trafixTradeId: Scalars["String"];
}
export interface GetTrafixTradesResponse {
  __typename?: "GetTrafixTradesResponse";
  trafixTrades: Array<Maybe<TrafixTrade>>;
}
export interface Mutation {
  __typename?: "Mutation";
  /**
   * Remove Apex ACH Relationship
   *
   * Equivalent to Apex Service DELETE /accounts/{accountId}/ach-relationships/{id}
   */
  deleteAccountAchRelationship?: Maybe<RemoveApexAchRelationshipResponse>;
  /**
   * Cancel Apex Transfer
   *
   * Equivalent to Apex Service DELETE /accounts/{accountId}/transfers/{id}
   */
  deleteAccountTransfer?: Maybe<CancelApexTransferResponse2>;
  /**
   * Currently only one ACH relationship is allowed at Apex at at time, thus can remove by accountNumber.
   *
   * Equivalent to Apex Accounts DELETE /accounts/{accountNumber}/ach-relationships
   */
  deleteAccountsAchRelationships?: Maybe<RemoveAchRelationshipResponse>;
  /**
   * Cancel Apex Transfer
   *
   * Equivalent to Apex Accounts DELETE /accounts/{accountNumber}/transfers/{transferNumber}
   */
  deleteAccountsTransfers?: Maybe<CancelApexTransferResponse>;
  /**
   * Delete External Portfolio
   *
   * Equivalent to Position Management Service DELETE /external-portfolios/{id}
   */
  deleteExternalPortfolio?: Maybe<DeleteExternalPortfolioResponse>;
  /**
   * Remove Investor
   *
   * Equivalent to Investor Service DELETE /investors/{investorId}
   */
  deleteInvestor?: Maybe<RemoveInvestorResponse>;
  /**
   * Remove Linked Bank Account
   *
   * Equivalent to Investor Service DELETE /investors/{investorId}/linked-bank-accounts/{linkedBankAccountId}
   */
  deleteInvestorLinkedBankAccount?: Maybe<RemoveLinkedBankAccountResponse>;
  /**
   * Depending on the external system and their window for cancellations will this API work. The response status will
   * change to 'cancelled'.
   *
   *
   * Equivalent to Investor Service DELETE /investors/{investorId}/transfers/{transferId}
   */
  deleteInvestorTransfer?: Maybe<CancelTransferResponse>;
  /**
   * Delete Preferences
   *
   * Equivalent to Rover Preferences DELETE /portfolios/{portfolioId}/preferences
   */
  deletePortfolioPreferences?: Maybe<DeletePreferencesResponse>;
  /**
   * Delete Subscription
   *
   * Equivalent to AWS Manager DELETE /pubsub-stacks/subscription/{id}
   */
  deletePubsubStacksSubscription?: Maybe<DeleteSubscriptionResponse>;
  /**
   * Delete Topic
   *
   * Equivalent to AWS Manager DELETE /pubsub-stacks/topic/{id}
   */
  deletePubsubStacksTopic?: Maybe<DeleteTopicResponse>;
  /**
   * Delete Role
   *
   * Equivalent to IAM DELETE /roles/{id}
   */
  deleteRole?: Maybe<DeleteRoleResponse>;
  /**
   * Delete a RoleBinding by id
   *
   * Equivalent to IAM DELETE /role-bindings/{id}
   */
  deleteRoleBinding?: Maybe<DeleteRoleBindingResponse>;
  /**
   * Delete Search Stack
   *
   * Equivalent to AWS Manager DELETE /search-stacks/{id}
   */
  deleteSearchStack?: Maybe<DeleteSearchStackResponse>;
  /**
   * Delete Temporary Portfolio
   *
   * Equivalent to Position Management Service DELETE /temporary-portfolios/{id}
   */
  deleteTemporaryPortfolio?: Maybe<DeleteTemporaryPortfolioResponse>;
  /**
   * Delete User
   *
   * Equivalent to IAM DELETE /users/{id}
   */
  deleteUser?: Maybe<DeleteUserResponse>;
  /**
   * Clear Cart
   *
   * Equivalent to Rover Preferences DELETE /users/{userId}/cart
   */
  deleteUserCart?: Maybe<ClearCartResponse>;
  /**
   * Delete Cart Item
   *
   * Equivalent to Rover Preferences DELETE /users/{userId}/cart/items/{assetId}
   */
  deleteUserCartItem?: Maybe<DeleteCartItemResponse>;
  /**
   * Clear WatchList
   *
   * Equivalent to Rover Preferences DELETE /users/{userId}/watchlist
   */
  deleteUserWatchlist?: Maybe<ClearWatchListResponse>;
  /**
   * Delete WatchList Item
   *
   * Equivalent to Rover Preferences DELETE /users/{userId}/watchlist/items/{assetId}
   */
  deleteUserWatchlistItem?: Maybe<DeleteWatchListItemResponse>;
  /**
   * Update Apex Account
   *
   * Equivalent to Apex Service PATCH /accounts/{id}
   */
  patchAccount?: Maybe<UpdateApexAccountResponse2>;
  /**
   * Will update form. Called the Entity Corporate Cash Account Agreement Form at Apex
   *
   * Equivalent to Apex Accounts PATCH /account-forms/corporate-agreement-form/{formId}
   */
  patchAccountFormsCorporateAgreementForm?: Maybe<
    UpdateCorporateAgreementFormResponse
  >;
  /**
   * Will update form. Called the Entity New Direct Account RIA Form at Apex
   *
   * Equivalent to Apex Accounts PATCH /account-forms/entity-account-form/{formId}
   */
  patchAccountFormsEntityAccountForm?: Maybe<UpdateEntityAccountFormResponse>;
  /**
   * Will update form. Called the Entity Due Diligence Form at Apex
   *
   * Equivalent to Apex Accounts PATCH /account-forms/entity-due-diligence-form/{formId}
   */
  patchAccountFormsEntityDueDiligenceForm?: Maybe<
    UpdateEntityDueDiligenceFormResponse
  >;
  /**
   * Will update form. Called the New Direct Account Form at Apex
   *
   * Equivalent to Apex Accounts PATCH /account-forms/individual-account-form/{formId}
   */
  patchAccountFormsIndividualAccountForm?: Maybe<
    UpdateIndividualAccountFormResponse
  >;
  /**
   * Will update form. Called the Interested Party Request Form at Apex
   *
   * Equivalent to Apex Accounts PATCH /account-forms/interested-party-form/{formId}
   */
  patchAccountFormsInterestedPartyForm?: Maybe<
    UpdateInterestedPartyFormResponse
  >;
  /**
   * Will update form. Called the Entity LLC Agreement Form at Apex
   *
   * Equivalent to Apex Accounts PATCH /account-forms/llc-agreement-form/{formId}
   */
  patchAccountFormsLlcAgreementForm?: Maybe<UpdateLlcAgreementFormResponse>;
  /**
   * Will update form. Called the Trusted Contact Form at Apex
   *
   * Equivalent to Apex Accounts PATCH /account-forms/trusted-contact-form/{formId}
   */
  patchAccountFormsTrustedContactForm?: Maybe<UpdateTrustedContactFormResponse>;
  /**
   * Update Linked Bank Account Status
   *
   * Equivalent to Link Bank Account Service PATCH /account-number/{accountNumber}/linked-bank-accounts/{linkedBankAccountId}/_update-status
   */
  patchAccountNumberLinkedBankAccountUpdateStatus?: Maybe<
    UpdateLinkedBankAccountStatusResponse
  >;
  /**
   * Update Apex Account Status
   *
   * Equivalent to Apex Service PATCH /accounts/{id}/status
   */
  patchAccountStatus?: Maybe<UpdateApexAccountStatusResponse>;
  /**
   * Update Apex Account
   *
   * Equivalent to Apex Accounts PATCH /accounts/{accountNumber}
   */
  patchAccounts?: Maybe<UpdateApexAccountResponse>;
  /**
   * Cancel Transfer
   *
   * Equivalent to Position Management Service PATCH /accounts/{accountNumber}/transfers/{transferId}/_cancel
   */
  patchAccountsTransferCancel?: Maybe<CancelTransferResponse>;
  /**
   * Settle Transfer
   *
   * Equivalent to Position Management Service PATCH /accounts/{accountNumber}/transfers/{transferId}/_settle
   */
  patchAccountsTransferSettle?: Maybe<SettleTransferResponse>;
  /**
   * Updates an attribute on the specified asset. The field to update
   * can be specified as a path such as analytics.effectiveDuration
   *
   *
   * Equivalent to Rover Universe PATCH /assets/{id}
   */
  patchAsset?: Maybe<UpdateAssetResponse>;
  /**
   * Updates the specified asset time series
   *
   * Equivalent to Rover Universe PATCH /assets/time-series
   */
  patchAssetsTimeSeries?: Maybe<UpdateAssetTimeSeriesResponse>;
  /**
   * Update Institution
   *
   * Equivalent to IAM PATCH /institutions/{institutionId}
   */
  patchInstitution?: Maybe<UpdateInstitutionResponse>;
  /**
   * Update API Call Record
   *
   * Equivalent to API Manager PATCH /institutions/{institutionId}/api-call-records/{recordId}
   */
  patchInstitutionApiCallRecord?: Maybe<UpdateApiCallRecordResponse>;
  /**
   * Update the specified inventory
   *
   * Equivalent to Rover Universe PATCH /institutions/{institutionId}/inventories/{id}
   */
  patchInstitutionInventory?: Maybe<UpdateInventoryResponse>;
  /**
   * Update Institution User Mapping By Email
   *
   * Equivalent to IAM PATCH /institutions/users/email/{email}
   */
  patchInstitutionsUsersEmail?: Maybe<UpdateUserMappingResponse>;
  /**
   * Only select fields related to the investor need be updated. Citizenship Country, DoB, and SSN cannot be updated
   * at Apex without manual intervention.
   *
   *
   * Equivalent to Investor Service PATCH /investors/{investorId}
   */
  patchInvestor?: Maybe<UpdateInvestorResponse>;
  /**
   * This function will update the apex account for an Investor
   *
   *
   * Equivalent to Apex Service PATCH /investors/{investorId}/account
   */
  patchInvestorAccount?: Maybe<UpdateApexAccountResponse2>;
  /**
   * Update Linked Bank Account Status
   *
   * Equivalent to Investor Service PATCH /investors/{investorId}/linked-bank-accounts/{linkedBankAccountId}/status
   */
  patchInvestorLinkedBankAccountStatus?: Maybe<
    UpdateLinkedBankAccountStatusResponse
  >;
  /**
   * Update Transfer Status
   *
   * Equivalent to Investor Service PATCH /investors/{investorId}/transfers/{transferId}/status
   */
  patchInvestorTransferStatus?: Maybe<UpdateTransferStatusResponse>;
  /**
   * Updates an attribute on the specified issue
   *
   * Equivalent to Rover Universe PATCH /issues/{id}
   */
  patchIssue?: Maybe<UpdateIssueResponse>;
  /**
   * Updates an attribute on the specified issuer
   *
   * Equivalent to Rover Universe PATCH /issuers/{id}
   */
  patchIssuer?: Maybe<UpdateIssuerResponse>;
  /**
   * Will cancel an open or partially filled Trafix order
   *
   * Equivalent to Trafix PATCH /orders/{orderId}
   */
  patchOrder?: Maybe<CancelTrafixOrderResponse>;
  /**
   * Update Portfolio
   *
   * Equivalent to Position Management Service PATCH /portfolios/{id}
   */
  patchPortfolio?: Maybe<UpdatePortfolioResponse>;
  /**
   * Update Order
   *
   * Equivalent to Order Service PATCH /portfolios/{portfolioId}/orders/{id}
   */
  patchPortfolioOrder?: Maybe<UpdateOrderResponse>;
  /**
   * Cancel Order
   *
   * Equivalent to Order Service PATCH /portfolios/{portfolioId}/orders/{id}/_cancel
   */
  patchPortfolioOrderCancel?: Maybe<CancelOrderResponse>;
  /**
   * Cancel Trade
   *
   * Equivalent to Position Management Service PATCH /portfolios/{portfolioId}/trades/{id}/_cancel
   */
  patchPortfolioTradeCancel?: Maybe<CancelTradeResponse>;
  /**
   * Update User
   *
   * Equivalent to IAM PATCH /users/{id}
   */
  patchUser?: Maybe<UpdateUserResponse>;
  /**
   * Block User
   *
   * Equivalent to IAM PATCH /users/{id}/block-user
   */
  patchUserBlockUser?: Maybe<BlockUserResponse>;
  /**
   * Resend User Invite
   *
   * Equivalent to IAM PATCH /users/invites/email/{email}/_resend
   */
  patchUsersInvitesEmailResend?: Maybe<ResendUserInviteResponse>;
  /**
   * Create Apex ACH Relationship
   *
   * Equivalent to Apex Service POST /accounts/{id}/ach-relationships
   */
  postAccountAchRelationships?: Maybe<CreateApexAchRelationshipResponse>;
  /**
   * Will create form. Called the Entity Corporate Cash Account Agreement Form at Apex
   *
   * Equivalent to Apex Accounts POST /account-forms/corporate-agreement-form
   */
  postAccountFormsCorporateAgreementForm?: Maybe<
    CreateCorporateAgreementFormResponse
  >;
  /**
   * Will create form. Called the Entity New Direct Account RIA Form at Apex
   *
   * Equivalent to Apex Accounts POST /account-forms/entity-account-form
   */
  postAccountFormsEntityAccountForm?: Maybe<CreateEntityAccountFormResponse>;
  /**
   * Will create form. Called the Entity Due Diligence Form at Apex
   *
   * Equivalent to Apex Accounts POST /account-forms/entity-due-diligence-form
   */
  postAccountFormsEntityDueDiligenceForm?: Maybe<
    CreateEntityDueDiligenceFormResponse
  >;
  /**
   * Will create form. Called the New Direct Account Form at Apex
   *
   * Equivalent to Apex Accounts POST /account-forms/individual-account-form
   */
  postAccountFormsIndividualAccountForm?: Maybe<
    CreateIndividualAccountFormResponse
  >;
  /**
   * Will create form. Called the Interested Party Request Form at Apex
   *
   * Equivalent to Apex Accounts POST /account-forms/interested-party-form
   */
  postAccountFormsInterestedPartyForm?: Maybe<
    CreateInterestedPartyFormResponse
  >;
  /**
   * Will create form. Called the Entity LLC Agreement Form at Apex
   *
   * Equivalent to Apex Accounts POST /account-forms/llc-agreement-form
   */
  postAccountFormsLlcAgreementForm?: Maybe<CreateLlcAgreementFormResponse>;
  /**
   * Will create form. Called the Trusted Contact Form at Apex
   *
   * Equivalent to Apex Accounts POST /account-forms/trusted-contact-form
   */
  postAccountFormsTrustedContactForm?: Maybe<CreateTrustedContactFormResponse>;
  /**
   * Link Bank Account Directly
   *
   * Equivalent to Link Bank Account Service POST /account-number/{accountNumber}/_link-directly
   */
  postAccountNumberLinkDirectly?: Maybe<LinkBankAccountDirectlyResponse>;
  /**
   * Link Bank Account with Plaid
   *
   * Equivalent to Link Bank Account Service POST /account-number/{accountNumber}/_link-with-plaid
   */
  postAccountNumberLinkWithPlaid?: Maybe<LinkBankAccountPlaidResponse>;
  /**
   * Create Apex Transfer
   *
   * Equivalent to Apex Service POST /accounts/{id}/transfers
   */
  postAccountTransfers?: Maybe<CreateApexTransferResponse2>;
  /**
   * Create Apex Account
   *
   * Equivalent to Apex Accounts POST /accounts
   */
  postAccounts?: Maybe<CreateApexAccountResponse>;
  /**
   * Set Apex ACH Relationship
   *
   * Equivalent to Apex Accounts POST /accounts/{accountNumber}/ach-relationships
   */
  postAccountsAchRelationships?: Maybe<SetAchRelationshipResponse>;
  /**
   * Create Apex Transfer
   *
   * Equivalent to Apex Accounts POST /accounts/{accountNumber}/transfers
   */
  postAccountsTransfers?: Maybe<CreateApexTransferResponse>;
  /**
   * note that a transfer is restricted to the settled amount
   *
   * Equivalent to Position Management Service POST /accounts/{accountNumber}/transfers/_internal
   */
  postAccountsTransfersInternal?: Maybe<InternalTransferResponse>;
  /**
   * Gets multiple Analysis saved via the AnalyzePortfolio operation
   *
   *
   * Equivalent to Rover Portfolio Analyzer POST /analyses
   */
  postAnalyses?: Maybe<GetAnalysesResponse>;
  /**
   * Analyze Asset
   *
   * Equivalent to Rover Asset Analyzer POST /_analyze-asset
   */
  postAnalyzeAsset?: Maybe<AnalyzeAssetResponse>;
  /**
   * Search API Call Records
   *
   * Equivalent to API Manager POST /api-call-records/_search
   */
  postApiCallRecordsSearch?: Maybe<SearchApiCallRecordsResponse>;
  /**
   * Analyze Asset By Id
   *
   * Equivalent to Rover Asset Analyzer POST /assets/{assetId}/_analyze_asset
   */
  postAssetAnalyzeAsset?: Maybe<AnalyzeAssetByIdResponse>;
  /**
   * Calculate Intraday Return
   *
   * Equivalent to Rover Asset Analyzer POST /assets/{assetId}/_calculate-intraday-return
   */
  postAssetCalculateIntradayReturn?: Maybe<CalculateIntradayReturnResponse>;
  /**
   * Project Cash Flows By Id
   *
   * Equivalent to Rover Asset Analyzer POST /assets/{assetId}/_project-cash-flows
   */
  postAssetProjectCashFlows?: Maybe<ProjectCashFlowsByIdResponse>;
  /**
   * Accepts CSV and Excel files containing 2 collumns: "id" and "quantity". Each row defines an asset identifier + quantity pair describing aportfolio.
   * The values in the id column must match one of the following formats - cusip/isin/ticker.
   * The response will contain the resolved assets found as well as any rows that were unsuccessfully matched.
   *
   *
   * Equivalent to Uploads POST /assets
   */
  postAssets?: Maybe<UploadAssetsResponse>;
  /**
   * Calculate Asset Risk
   *
   * Equivalent to Rover Risk Model POST /assets/_calculate-risk
   */
  postAssetsCalculateRisk?: Maybe<CalculateAssetRiskResponse>;
  /**
   * Get Asset Covariances
   *
   * Equivalent to Rover Risk Model POST /assets/covariances
   */
  postAssetsCovariances?: Maybe<GetAssetCovariancesResponse>;
  /**
   * Clear Asset Covariances Cache
   *
   * Equivalent to Rover Risk Model POST /assets/covariances/_clear-cache
   */
  postAssetsCovariancesClearCache?: Maybe<ClearAssetCovariancesCacheResponse>;
  /**
   * List all asset IDs in the universe
   *
   * Equivalent to Search POST /assets/_list-asset-ids
   */
  postAssetsListAssetIds?: Maybe<ListAssetIdsResponse>;
  /**
   * Score Asset
   *
   * Equivalent to Rover Score POST /assets/_score-asset
   */
  postAssetsScoreAsset?: Maybe<ScoreAssetResponse>;
  /**
   * Searches the universe by filtering on fields of the Asset object. The response will contain the assets found.
   *
   *
   * Equivalent to Search POST /assets/_search
   */
  postAssetsSearch?: Maybe<SearchAssetResponse>;
  /**
   * Create Or Replace Asset Time Series
   *
   * Equivalent to Rover Universe POST /assets/time-series
   */
  postAssetsTimeSeries?: Maybe<CreateOrReplaceAssetTimeSeriesResponse>;
  /**
   * Update Asset Time Series by External Id
   *
   * Equivalent to Rover Universe POST /assets/time-series/_update-by-external-id
   */
  postAssetsTimeSeriesUpdateByExternalId?: Maybe<
    UpdateAssetTimeSeriesByExternalIdResponse
  >;
  /**
   * Update Asset by External Id
   *
   * Equivalent to Rover Universe POST /assets/_update-by-external-id
   */
  postAssetsUpdateByExternalId?: Maybe<UpdateAssetByExternalIdResponse>;
  /**
   * Calculate historical portfolio betas and correlations
   *
   * Equivalent to Rover Portfolio Analyzer POST /_calculate-betas
   */
  postCalculateBetas?: Maybe<CalculateBetasResponse>;
  /**
   * Search Market Axess Composite Plus data
   *
   *
   * Equivalent to Market Axess POST /composite-data/_search
   */
  postCompositeDataSearch?: Maybe<SearchCompositeDataResponse>;
  /**
   * Provides all open bids and offers for a set of CUSIPs
   *
   * Equivalent to ICE POST /cusips
   */
  postCusips?: Maybe<GetByCusipsResponse>;
  /**
   * Post Execution Log
   *
   * Equivalent to API Manager POST /execution-logs
   */
  postExecutionLogs?: Maybe<PostExecutionLogResponse>;
  /**
   * Get Assets By External Id
   *
   * Equivalent to Rover Universe POST /external-id-mappings/{sourceName}/_get-assets-by-external-id
   */
  postExternalIdMappingGetAssetsByExternalId?: Maybe<
    GetAssetsByExternalIdResponse
  >;
  /**
   * Get External Id Mappings
   *
   * Equivalent to Rover Universe POST /external-id-mappings/{sourceName}/_get-external-id-mappings
   */
  postExternalIdMappingGetExternalIdMappings?: Maybe<
    GetExternalIdMappingsResponse
  >;
  /**
   * Create External Portfolio
   *
   * Equivalent to Position Management Service POST /external-portfolios
   */
  postExternalPortfolios?: Maybe<CreateOrReplaceExternalPortfolioResponse>;
  /**
   * Upload Files
   *
   * Equivalent to File Management POST /files
   */
  postFiles?: Maybe<UploadFileResponse>;
  /**
   * Upload Identity Document
   *
   * Equivalent to Apex Service POST /identity-investigations/{sketchId}/upload
   */
  postIdentityInvestigationUpload?: Maybe<UploadIdentityDocumentResponse>;
  /**
   * Create API Call Records
   *
   * Equivalent to API Manager POST /institutions/{institutionId}/api-call-records
   */
  postInstitutionApiCallRecords?: Maybe<CreateApiCallRecordResponse>;
  /**
   * Creates or updates default inventories for institutions
   *
   * Equivalent to IAM POST /institutions/{institutionId}/inventories
   */
  postInstitutionInventories?: Maybe<CreateOrUpdateInventoryMappingResponse>;
  /**
   * Create Institution Investor Mapping
   *
   * Equivalent to IAM POST /institutions/{institutionId}/investors
   */
  postInstitutionInvestors?: Maybe<CreateInvestorMappingResponse>;
  /**
   * Create Institution Portfolio Mapping
   *
   * Equivalent to IAM POST /institutions/{institutionId}/portfolios
   */
  postInstitutionPortfolios?: Maybe<CreatePortfolioMappingResponse>;
  /**
   * Create Institution Proposal Mapping
   *
   * Equivalent to IAM POST /institutions/{institutionId}/proposals
   */
  postInstitutionProposals?: Maybe<CreateProposalMappingResponse>;
  /**
   * Create Institution Role Mapping
   *
   * Equivalent to IAM POST /institutions/{institutionId}/roles
   */
  postInstitutionRoles?: Maybe<CreateRoleMappingResponse>;
  /**
   * Create Institution User Mapping
   *
   * Equivalent to IAM POST /institutions/{institutionId}/users
   */
  postInstitutionUsers?: Maybe<CreateUserMappingResponse>;
  /**
   * Generate Institution BestFit Whitelist
   *
   * Equivalent to Rover Whitelist POST /institutions/{institutionId}/whitelists/_generate-best-fit
   */
  postInstitutionWhitelistsGenerateBestFit?: Maybe<
    GenerateBestFitWhitelistResponse
  >;
  /**
   * Generate Institution Muni BestFit Whitelist
   *
   * Equivalent to Rover Whitelist POST /institutions/{institutionId}/whitelists/_generate-muni-best-fit
   */
  postInstitutionWhitelistsGenerateMuniBestFit?: Maybe<
    GenerateMuniBestFitWhitelistResponse
  >;
  /**
   * Create Institution
   *
   * Equivalent to IAM POST /institutions
   */
  postInstitutions?: Maybe<CreateInstitutionResponse>;
  /**
   * Search Apex Accounts
   *
   * Equivalent to Apex Service POST /internal/accounts/_search
   */
  postInternalAccountsSearch?: Maybe<SearchApexAccountsResponse>;
  /**
   * Search Apex Ach Relationships
   *
   * Equivalent to Apex Service POST /internal/achRelationship/_search
   */
  postInternalAchRelationshipSearch?: Maybe<SearchApexAchRelationshipsResponse>;
  /**
   * Syncs the current Asset universe in DynamoDB with what's in ElasticSearch. Syncs happen automatically whenever
   * an Asset is updated, so this route exists to handle resyncing when the ElasticSearch index needs to be rebuilt.
   *
   *
   * Equivalent to Rover Universe POST /internal/_sync-search
   */
  postInternalSyncSearch?: Maybe<InternalSyncSearchResponse>;
  /**
   * Search Apex Transfers
   *
   * Equivalent to Apex Service POST /internal/transfers/_search
   */
  postInternalTransfersSearch?: Maybe<SearchApexTransfersResponse>;
  /**
   * This function will check if apex account exists for investor otherwise will create and return
   *
   *
   * Equivalent to Apex Service POST /investors/{investorId}/account
   */
  postInvestorAccount?: Maybe<InvestorAccount>;
  /**
   * Create Linked Bank Account
   *
   * Equivalent to Investor Service POST /investors/{investorId}/linked-bank-accounts
   */
  postInvestorLinkedBankAccounts?: Maybe<CreateLinkedBankAccountResponse>;
  /**
   * Create Linked Bank Account Directly
   *
   * Equivalent to Investor Service POST /investors/{investorId}/linked-bank-accounts/directly
   */
  postInvestorLinkedBankAccountsDirectly?: Maybe<
    CreateLinkedBankAccountDirectlyResponse
  >;
  /**
   * Allows an investor to transfer funds between any of their portfolios to their cash portfolio
   *
   *
   * Equivalent to Position Management Service POST /investors/{investorId}/portfolios/{portfolioId}/internal-portfolio-fund-transfer
   */
  postInvestorPortfolioInternalPortfolioFundTransfer?: Maybe<
    SettleFundTransferResponse
  >;
  /**
   * This creates a portfolio for an investor and sets delivery instructions
   *
   *
   * Equivalent to Position Management Service POST /investors/{investorId}/portfolios
   */
  postInvestorPortfolios?: Maybe<CreatePortfolioResponse>;
  /**
   * Creates a cash portfolio and required dependent accounts like APEX
   * and sets mapping beteween them in Delivery instructions.
   *
   *
   * Equivalent to Position Management Service POST /investors/{investorId}/portfolios/cash-portfolio
   */
  postInvestorPortfoliosCashPortfolio?: Maybe<
    CreateInvestorCashPortfolioResponse
  >;
  /**
   * Create Transfer
   *
   * Equivalent to Investor Service POST /investors/{investorId}/transfers
   */
  postInvestorTransfers?: Maybe<CreateTransferResponse>;
  /**
   * This API capture the necessary information to create an Apex account for an individual or organizations. There
   * are several conditions to properly create these accounts that are not capture in the SDK. They are described
   * here:
   *
   * 1. If the investor is an INDIVIDUAL then employment, and investmentProfile are required.
   * 2. If the investor is an ORGANIZATION, then the following fields are required organizationName,
   *    organizationTaxId, title of the account opener, organization, entityDueDiligence,
   *    exemptLegalCustomer, wnineTaxForm, catAccountHolderType.
   * 3. For organizations there is no uploading a FINRA affiliatedApproval form.
   * 4. For individuals if citizenshipCountry is not "USA" then birthCountry and isPermanentResident must be
   *    collected. If not a citizen or permanent resident then they cannot open an account and should be block in the
   *    application flow. For organizations only citizenshipCountry is needed (even if not a citizen).
   * 5. We cannot open accounts for foreign banks or financial institutions. Thus if isForeignBank or
   *    isMaintainedForForeignFinancialInstitution is true they cannot open an account and should be block in the
   *    application flow.
   * 6. While issuerDirectCommunication is not required because Apex will always set to "ACCEPT" if not provided,
   *    they would like us to always ask this question.
   * 7. If isExemptLegalCustomer is true then customerExempt is required, if false then the
   *    beneficialOwnersAndOfficers object is required.
   * 8. If organization entityType  is a C_CORPORATION or S_CORPORATION then cashAccountAgreement is
   *    required.
   * 9. If organization entityType is a LIMITED_LIABILITY_COMPANY_C_CORPORATION,
   *    LIMITED_LIABILITY_COMPANY_PARTNERSHIP, or LIMITED_LIABILITY_COMPANY_S_CORPORATION then
   *    llcAccountAgreement is required.
   * 10. In Entity Due Diligence if scopeOfBusiness is OTHER then scopeOfBusinessClarification is required. Also if
   *     primaryOngoingFundingSource is OTHER then primaryOngoingFundingSourceClarification is required.
   *
   *
   * Equivalent to Investor Service POST /investors
   */
  postInvestors?: Maybe<CreateInvestorResponse>;
  /**
   * Search Transfers
   *
   * Equivalent to Investor Service POST /investors/transfers/_search
   */
  postInvestorsTransfersSearch?: Maybe<SearchTransfersResponse>;
  /**
   * Get Access Token
   *
   * Equivalent to IAM POST /oauth/token
   */
  postOauthToken?: Maybe<GetAccessTokenResponse>;
  /**
   * Optimizes a portfolio against a given goal (objective) and a set of investment constraints.
   *
   * For example: maximize the yield of a given portfolio while subject to certain sector concentration constraints
   *
   *
   * Equivalent to Rover Optimizer POST /_optimize-portfolio
   */
  postOptimizePortfolio?: Maybe<OptimizePortfolioResponse>;
  /**
   * Places an order at Trafix to trade
   *
   * Equivalent to Trafix POST /orders
   */
  postOrders?: Maybe<CreateTrafixOrderResponse>;
  /**
   * Search all orders on the system based the criteria provided
   * in the request
   *
   * Order Aggregation Service can use this API to offer trades a way to create block trades
   * that aggregate several portfolio orders into block orders
   *
   *
   * Equivalent to Order Service POST /orders/_search
   */
  postOrdersSearch?: Maybe<SearchOrdersResponse>;
  /**
   * Closes the portfolio and removes it from YieldX.
   *
   *
   * Equivalent to Income Portfolio as a Service POST /{institution}/portfolios/{portfolioId}/_close
   */
  postPortfolioClose?: Maybe<ClosePortfolioResponse>;
  /**
   * Create Portfolio Delivery Instruction
   *
   * Equivalent to Investor Service POST /portfolios/{portfolioId}/delivery-instruction
   */
  postPortfolioDeliveryInstruction?: Maybe<
    CreatePortfolioDeliveryInstructionResponse
  >;
  /**
   * Settle Fund Transfer
   *
   * Equivalent to Position Management Service POST /portfolios/{id}/fund-transfers/{ledgerEntryId}/_settle
   */
  postPortfolioFundTransferSettle?: Maybe<SettleFundTransferResponse>;
  /**
   * Create Fund Transfer
   *
   * Equivalent to Position Management Service POST /portfolios/{id}/fund-transfers
   */
  postPortfolioFundTransfers?: Maybe<CreateFundTransferResponse>;
  /**
   * Creates or replaces the portfolio mappings
   *
   * Equivalent to Income Portfolios POST /portfolio-mappings/{portfolioId}
   */
  postPortfolioMapping?: Maybe<CreateOrReplacePortfolioMappingResponse>;
  /**
   * Create Order
   *
   * Equivalent to Order Service POST /portfolios/{portfolioId}/orders
   */
  postPortfolioOrders?: Maybe<CreateOrderResponse>;
  /**
   * Rebalance Orders
   *
   * Equivalent to Order Service POST /portfolios/{portfolioId}/orders/_rebalance
   */
  postPortfolioOrdersRebalance?: Maybe<RebalanceOrdersResponse>;
  /**
   * Put Preferences
   *
   * Equivalent to BestFit POST /portfolios/{portfolioId}/preferences
   */
  postPortfolioPreferences?: Maybe<Scalars["JSON"]>;
  /**
   * Settle Trade
   *
   * Equivalent to Position Management Service POST /portfolios/{portfolioId}/trades/{id}/_settle
   */
  postPortfolioTradeSettle?: Maybe<SettleTradeResponse>;
  /**
   * Create Trade
   *
   * Equivalent to Position Management Service POST /portfolios/{portfolioId}/trades
   */
  postPortfolioTrades?: Maybe<CreateTradeResponse>;
  /**
   * Creates a portfolio on the system
   *
   *
   * Equivalent to Position Management Service POST /portfolios
   */
  postPortfolios?: Maybe<CreatePortfolioResponse>;
  /**
   * Calculate Portfolio Risk
   *
   * Equivalent to Rover Risk Model POST /portfolios/_calculate-risk
   */
  postPortfoliosCalculateRisk?: Maybe<CalculatePortfolioRiskResponse>;
  /**
   * Get Portfolio Covariances
   *
   * Equivalent to Rover Risk Model POST /portfolios/covariances
   */
  postPortfoliosCovariances?: Maybe<GetPortfolioCovariancesResponse>;
  /**
   * Search Portfolio Delivery Instructions
   *
   * Equivalent to Investor Service POST /portfolios/delivery-instruction/_search
   */
  postPortfoliosDeliveryInstructionSearch?: Maybe<
    SearchPortfolioDeliveryInstructionsResponse
  >;
  /**
   * Get returns for Portfolio Stress Scenarios (responses are Mocked)
   *
   * Equivalent to Rover Risk Model POST /portfolios/stress-scenarios
   */
  postPortfoliosStressScenarios?: Maybe<GetPortfolioStressScenariosResponse>;
  /**
   * Project Cash Flows for Asset
   *
   * Equivalent to Rover Asset Analyzer POST /_project-cash-flows
   */
  postProjectCashFlows?: Maybe<ProjectCashFlowsResponse>;
  /**
   * Accept Proposal
   *
   * Equivalent to Income Portfolio as a Service POST /{institution}/proposals/{proposalId}/_accept
   */
  postProposalAccept?: Maybe<AcceptProposalResponse>;
  /**
   * Retrieve minimim/maximum achievable risk on a target risk portfolio given the provided whitelist, or the
   * default whitelist if not provided
   *
   *
   * Equivalent to Income Portfolio as a Service POST /{institution}/proposals/_min_max_risk
   */
  postProposalsMinMaxRisk?: Maybe<GetMinMaxRiskResponse>;
  /**
   * Retrieve minimim/maximum achievable yield on a target yield portfolio given the provided whitelist, or the
   * default whitelist if not provided
   *
   *
   * Equivalent to Income Portfolio as a Service POST /{institution}/proposals/_min_max_yield
   */
  postProposalsMinMaxYield?: Maybe<GetMinMaxYieldResponse>;
  /**
   * Creates a new proposal that targets a certain income or yield level given an amount to invest
   *
   *
   * Equivalent to Income Portfolios POST /proposals/_new
   */
  postProposalsNew?: Maybe<NewProposalResponse>;
  /**
   * Rebalance Proposal
   *
   * Equivalent to Income Portfolios POST /proposals/portfolios/{portfolioId}/_rebalance
   */
  postProposalsPortfolioRebalance?: Maybe<RebalanceProposalResponse>;
  /**
   * The Subscribe operation should be called by potential subscribers (the service wishing to process events
   * emitted) to obtain the SQS queueUrl at runtime. This avoid the need to hard code queue URLs.
   *
   * The queue will be created if one does not exist already.
   *
   *
   * Equivalent to AWS Manager POST /pubsub-stacks/subscription
   */
  postPubsubStacksSubscription?: Maybe<CreateSubscriptionResponse>;
  /**
   * Create Topic
   *
   * Equivalent to AWS Manager POST /pubsub-stacks/topic
   */
  postPubsubStacksTopic?: Maybe<CreateTopicResponse>;
  /**
   * Makes a request to the identity provider resetting the user's password.
   *
   *
   * Equivalent to IAM POST /reset-password
   */
  postResetPassword?: Maybe<Scalars["JSON"]>;
  /**
   * Create or update a RoleBinding object. This operation associates a principal with a role
   *
   * Equivalent to IAM POST /role-bindings
   */
  postRoleBindings?: Maybe<CreateOrUpdateRoleBindingResponse>;
  /**
   * Removes policies specified in the request body
   *
   * Equivalent to IAM POST /roles/{id}/policies
   */
  postRolePolicies?: Maybe<RemoveRolePoliciesResponse>;
  /**
   * Create or update a role. The role to create or update is specified in the request body
   *
   * Equivalent to IAM POST /roles
   */
  postRoles?: Maybe<CreateOrUpdateRoleResponse>;
  /**
   * Creates a Search Stack by table name. If a table with the same name exists in the region / account
   * the search stack associated with that table name will be returned
   *
   *
   * Equivalent to AWS Manager POST /search-stacks
   */
  postSearchStacks?: Maybe<CreateSearchStackResponse>;
  /**
   * Upload Sketch Document
   *
   * Equivalent to Apex Accounts POST /sketches/{sketchId}/upload
   */
  postSketchUpload?: Maybe<UploadSketchDocumentResponse>;
  /**
   * Generate Asset Suggestions
   *
   * Equivalent to Rover Whitelist POST /suggestions/_generate-asset-suggestions
   */
  postSuggestionsGenerateAssetSuggestions?: Maybe<
    GenerateAssetSuggestionsResponse
  >;
  /**
   * Create Temporary Portfolio
   *
   * Equivalent to Position Management Service POST /temporary-portfolios
   */
  postTemporaryPortfolios?: Maybe<CreateOrReplaceTemporaryPortfolioResponse>;
  /**
   * An email containing the ticketId is sent to the email
   * that the user signed up
   *
   * The ticket expires in 48 hours
   *
   *
   * Equivalent to IAM POST /tickets/email-verifications/{ticketId}
   */
  postTicketsEmailVerification?: Maybe<VerifyEmailResponse>;
  /**
   * An email containing the ticketId is sent to the email
   * that the user signed up
   *
   * The ticket expires in 48 hours
   *
   * > Use this method if the original email verification failed or expired
   *
   *
   * Equivalent to IAM POST /tickets/email-verifications
   */
  postTicketsEmailVerifications?: Maybe<CreateEmailVerificationTicketResponse>;
  /**
   * Login
   *
   * Equivalent to IAM POST /tickets/login
   */
  postTicketsLogin?: Maybe<LoginResponse>;
  /**
   * Reset Password
   *
   * Equivalent to IAM POST /tickets/password-resets/{ticketId}
   */
  postTicketsPasswordReset?: Maybe<ResetPasswordResponse>;
  /**
   * Creates a password reset ticket. The generate ticketId will be sent to the provided email. This ticket expires
   * in 1 hour.
   *
   *
   * Equivalent to IAM POST /tickets/password-resets
   */
  postTicketsPasswordResets?: Maybe<CreatePasswordResetTicketResponse>;
  /**
   * Post Executions
   *
   * Equivalent to Apex Trading POST /trade-posting/_post-executions
   */
  postTradePostingPostExecutions?: Maybe<PostExecutionsResponse>;
  /**
   * Search Trades
   *
   * Equivalent to Position Management Service POST /trades/_search
   */
  postTradesSearch?: Maybe<SearchTradeResponse>;
  /**
   * Create Or Replace Cart Item
   *
   * Equivalent to Rover Preferences POST /users/{userId}/cart/items
   */
  postUserCartItems?: Maybe<CreateOrReplaceCartItemResponse>;
  /**
   * Resets password directly without a ticket. This require the user to be currently logged
   *
   *
   * Equivalent to IAM POST /users/{id}/_reset-password-directly
   */
  postUserResetPasswordDirectly?: Maybe<ResetPasswordDirectlyResponse>;
  /**
   * Create Or Replace WatchList Item
   *
   * Equivalent to Rover Preferences POST /users/{userId}/watchlist/items/{assetId}
   */
  postUserWatchlistItem?: Maybe<CreateOrReplaceWatchListItemResponse>;
  /**
   * When a user belongs to an institution the institutionId must be provided. If you need to create an institution
   * you can do that
   * [here](https://dev.yieldx.app/docs/service.html?service=api-manager#operation/CreateInstitution). In addition
   * before creating the user of an institution make sure to first map the user to the institution
   * [here](https://dev.yieldx.app/docs/service.html?service=api-manager#operation/CreateUserMapping).
   *
   *
   * Equivalent to IAM POST /users
   */
  postUsers?: Maybe<CreateUserResponse>;
  /**
   * Block Expired Trial Users
   *
   * Equivalent to IAM POST /users/_block-expired-trial-users
   */
  postUsersBlockExpiredTrialUsers?: Maybe<BlockExpiredTrialUsersResponse>;
  /**
   * Invite User
   *
   * Equivalent to IAM POST /users/invites
   */
  postUsersInvites?: Maybe<InviteUserResponse>;
  /**
   * Generate BestFit Whitelist
   *
   * Equivalent to Rover Whitelist POST /whitelists/_generate-best-fit
   */
  postWhitelistsGenerateBestFit?: Maybe<GenerateBestFitWhitelistResponse>;
  /**
   * Close Apex Account
   *
   * Equivalent to Apex Service PUT /accounts/{id}/_close
   */
  putAccountClose?: Maybe<InvestorAccountClose>;
  /**
   * Reopen Apex Account
   *
   * Equivalent to Apex Service PUT /accounts/{id}/_reopen
   */
  putAccountReopen?: Maybe<InvestorAccountReopen>;
  /**
   * Close Apex Account
   *
   * Equivalent to Apex Accounts PUT /accounts/{accountNumber}/_close
   */
  putAccountsClose?: Maybe<CloseApexAccountResponse>;
  /**
   * Reopen Apex Account
   *
   * Equivalent to Apex Accounts PUT /accounts/{accountNumber}/_reopen
   */
  putAccountsReopen?: Maybe<ReopenApexAccountResponse>;
  /**
   * Update Identity Investigation
   *
   * Equivalent to Apex Service PUT /identity-investigations/{sketchId}/action/{action}
   */
  putIdentityInvestigationAction?: Maybe<UpdateIdentityInvestigationResponse>;
  /**
   * This function will close apex account for an Investor
   *
   *
   * Equivalent to Apex Service PUT /investors/{investorId}/account/_close
   */
  putInvestorAccountClose?: Maybe<InvestorAccountClose>;
  /**
   * This function will reopen apex account for an Investor
   *
   *
   * Equivalent to Apex Service PUT /investors/{investorId}/account/_reopen
   */
  putInvestorAccountReopen?: Maybe<InvestorAccountReopen>;
  /**
   * Update Sketch
   *
   * Equivalent to Apex Accounts PUT /sketches/{sketchId}/action/{action}
   */
  putSketchAction?: Maybe<UpdateSketchResponse>;
}
export type MutationDeleteAccountAchRelationshipArgs = {
  accountId: Scalars["String"];
  id: Scalars["String"];
};
export type MutationDeleteAccountTransferArgs = {
  accountId: Scalars["String"];
  id: Scalars["String"];
};
export type MutationDeleteAccountsAchRelationshipsArgs = {
  accountNumber: Scalars["String"];
};
export type MutationDeleteAccountsTransfersArgs = {
  accountNumber: Scalars["String"];
  transferNumber: Scalars["String"];
};
export type MutationDeleteExternalPortfolioArgs = {
  id: Scalars["String"];
};
export type MutationDeleteInvestorArgs = {
  investorId: Scalars["String"];
};
export type MutationDeleteInvestorLinkedBankAccountArgs = {
  investorId: Scalars["String"];
  linkedBankAccountId: Scalars["String"];
};
export type MutationDeleteInvestorTransferArgs = {
  investorId: Scalars["String"];
  transferId: Scalars["String"];
};
export type MutationDeletePortfolioPreferencesArgs = {
  portfolioId: Scalars["String"];
};
export type MutationDeletePubsubStacksSubscriptionArgs = {
  id: Scalars["String"];
};
export type MutationDeletePubsubStacksTopicArgs = {
  id: Scalars["String"];
};
export type MutationDeleteRoleArgs = {
  id: Scalars["String"];
};
export type MutationDeleteRoleBindingArgs = {
  id: Scalars["String"];
};
export type MutationDeleteSearchStackArgs = {
  id: Scalars["String"];
};
export type MutationDeleteTemporaryPortfolioArgs = {
  id: Scalars["String"];
};
export type MutationDeleteUserArgs = {
  id: Scalars["String"];
};
export type MutationDeleteUserCartArgs = {
  userId: Scalars["String"];
};
export type MutationDeleteUserCartItemArgs = {
  assetId: Scalars["String"];
  userId: Scalars["String"];
};
export type MutationDeleteUserWatchlistArgs = {
  userId: Scalars["String"];
};
export type MutationDeleteUserWatchlistItemArgs = {
  assetId: Scalars["String"];
  userId: Scalars["String"];
};
export type MutationPatchAccountArgs = {
  accountInput?: Maybe<AccountInput>;
  id: Scalars["String"];
};
export type MutationPatchAccountFormsCorporateAgreementFormArgs = {
  formId: Scalars["String"];
  updateCorporateAgreementFormRequestInput?: Maybe<
    UpdateCorporateAgreementFormRequestInput
  >;
};
export type MutationPatchAccountFormsEntityAccountFormArgs = {
  formId: Scalars["String"];
  updateEntityAccountFormRequestInput?: Maybe<
    UpdateEntityAccountFormRequestInput
  >;
};
export type MutationPatchAccountFormsEntityDueDiligenceFormArgs = {
  formId: Scalars["String"];
  updateEntityDueDiligenceFormRequestInput?: Maybe<
    UpdateEntityDueDiligenceFormRequestInput
  >;
};
export type MutationPatchAccountFormsIndividualAccountFormArgs = {
  formId: Scalars["String"];
  updateIndividualAccountFormRequestInput?: Maybe<
    UpdateIndividualAccountFormRequestInput
  >;
};
export type MutationPatchAccountFormsInterestedPartyFormArgs = {
  formId: Scalars["String"];
  updateInterestedPartyFormRequestInput?: Maybe<
    UpdateInterestedPartyFormRequestInput
  >;
};
export type MutationPatchAccountFormsLlcAgreementFormArgs = {
  formId: Scalars["String"];
  updateLlcAgreementFormRequestInput?: Maybe<
    UpdateLlcAgreementFormRequestInput
  >;
};
export type MutationPatchAccountFormsTrustedContactFormArgs = {
  formId: Scalars["String"];
  updateTrustedContactFormRequestInput?: Maybe<
    UpdateTrustedContactFormRequestInput
  >;
};
export type MutationPatchAccountNumberLinkedBankAccountUpdateStatusArgs = {
  accountNumber: Scalars["String"];
  linkedBankAccountId: Scalars["String"];
  updateLinkedBankAccountStatusRequestInput?: Maybe<
    UpdateLinkedBankAccountStatusRequestInput
  >;
};
export type MutationPatchAccountStatusArgs = {
  id: Scalars["String"];
  updateApexAccountStatusRequestInput?: Maybe<
    UpdateApexAccountStatusRequestInput
  >;
};
export type MutationPatchAccountsArgs = {
  accountNumber: Scalars["String"];
  updateApexAccountRequestInput?: Maybe<UpdateApexAccountRequestInput>;
};
export type MutationPatchAccountsTransferCancelArgs = {
  accountNumber: Scalars["String"];
  transferId: Scalars["String"];
};
export type MutationPatchAccountsTransferSettleArgs = {
  accountNumber: Scalars["String"];
  transferId: Scalars["String"];
};
export type MutationPatchAssetArgs = {
  id: Scalars["String"];
  updateAssetRequestInput?: Maybe<UpdateAssetRequestInput>;
};
export type MutationPatchAssetsTimeSeriesArgs = {
  updateAssetTimeSeriesRequestInput?: Maybe<UpdateAssetTimeSeriesRequestInput>;
};
export type MutationPatchInstitutionArgs = {
  institutionId: Scalars["String"];
  updateInstitutionRequestInput?: Maybe<UpdateInstitutionRequestInput>;
};
export type MutationPatchInstitutionApiCallRecordArgs = {
  institutionId: Scalars["String"];
  recordId: Scalars["String"];
  updateApiCallRecordRequestInput?: Maybe<UpdateApiCallRecordRequestInput>;
};
export type MutationPatchInstitutionInventoryArgs = {
  id: Scalars["String"];
  institutionId: Scalars["String"];
  updateInventoryRequestInput?: Maybe<UpdateInventoryRequestInput>;
};
export type MutationPatchInstitutionsUsersEmailArgs = {
  email: Scalars["String"];
  updateUserMappingRequestInput?: Maybe<UpdateUserMappingRequestInput>;
};
export type MutationPatchInvestorArgs = {
  investorId: Scalars["String"];
  updateInvestorRequestInput?: Maybe<UpdateInvestorRequestInput>;
};
export type MutationPatchInvestorAccountArgs = {
  investorId: Scalars["String"];
};
export type MutationPatchInvestorLinkedBankAccountStatusArgs = {
  investorId: Scalars["String"];
  linkedBankAccountId: Scalars["String"];
  updateLinkedBankAccountStatusRequestInput?: Maybe<
    UpdateLinkedBankAccountStatusRequestInput
  >;
};
export type MutationPatchInvestorTransferStatusArgs = {
  investorId: Scalars["String"];
  transferId: Scalars["String"];
  updateTransferStatusRequestInput?: Maybe<UpdateTransferStatusRequestInput>;
};
export type MutationPatchIssueArgs = {
  id: Scalars["String"];
  updateIssueRequestInput?: Maybe<UpdateIssueRequestInput>;
};
export type MutationPatchIssuerArgs = {
  id: Scalars["String"];
  updateIssuerRequestInput?: Maybe<UpdateIssuerRequestInput>;
};
export type MutationPatchOrderArgs = {
  orderId: Scalars["String"];
};
export type MutationPatchPortfolioArgs = {
  id: Scalars["String"];
  updatePortfolioRequestInput?: Maybe<UpdatePortfolioRequestInput>;
};
export type MutationPatchPortfolioOrderArgs = {
  id: Scalars["String"];
  portfolioId: Scalars["String"];
  updateOrderRequestInput?: Maybe<UpdateOrderRequestInput>;
};
export type MutationPatchPortfolioOrderCancelArgs = {
  cancelOrderRequestInput?: Maybe<CancelOrderRequestInput>;
  id: Scalars["String"];
  portfolioId: Scalars["String"];
};
export type MutationPatchPortfolioTradeCancelArgs = {
  cancelTradeRequestInput?: Maybe<CancelTradeRequestInput>;
  id: Scalars["String"];
  portfolioId: Scalars["String"];
};
export type MutationPatchUserArgs = {
  id: Scalars["String"];
  updateUserRequestInput?: Maybe<UpdateUserRequestInput>;
};
export type MutationPatchUserBlockUserArgs = {
  blockUserRequestInput?: Maybe<BlockUserRequestInput>;
  id: Scalars["String"];
};
export type MutationPatchUsersInvitesEmailResendArgs = {
  email: Scalars["String"];
};
export type MutationPostAccountAchRelationshipsArgs = {
  createApexACHRelationshipRequestInput?: Maybe<
    CreateApexAchRelationshipRequestInput
  >;
  id: Scalars["String"];
};
export type MutationPostAccountFormsCorporateAgreementFormArgs = {
  createCorporateAgreementFormRequestInput?: Maybe<
    CreateCorporateAgreementFormRequestInput
  >;
};
export type MutationPostAccountFormsEntityAccountFormArgs = {
  createEntityAccountFormRequestInput?: Maybe<
    CreateEntityAccountFormRequestInput
  >;
};
export type MutationPostAccountFormsEntityDueDiligenceFormArgs = {
  createEntityDueDiligenceFormRequestInput?: Maybe<
    CreateEntityDueDiligenceFormRequestInput
  >;
};
export type MutationPostAccountFormsIndividualAccountFormArgs = {
  createIndividualAccountFormRequestInput?: Maybe<
    CreateIndividualAccountFormRequestInput
  >;
};
export type MutationPostAccountFormsInterestedPartyFormArgs = {
  createInterestedPartyFormRequestInput?: Maybe<
    CreateInterestedPartyFormRequestInput
  >;
};
export type MutationPostAccountFormsLlcAgreementFormArgs = {
  createLlcAgreementFormRequestInput?: Maybe<
    CreateLlcAgreementFormRequestInput
  >;
};
export type MutationPostAccountFormsTrustedContactFormArgs = {
  createTrustedContactFormRequestInput?: Maybe<
    CreateTrustedContactFormRequestInput
  >;
};
export type MutationPostAccountNumberLinkDirectlyArgs = {
  accountNumber: Scalars["String"];
  linkBankAccountDirectlyRequestInput?: Maybe<
    LinkBankAccountDirectlyRequestInput
  >;
};
export type MutationPostAccountNumberLinkWithPlaidArgs = {
  accountNumber: Scalars["String"];
  linkBankAccountPlaidRequestInput?: Maybe<LinkBankAccountPlaidRequestInput>;
};
export type MutationPostAccountTransfersArgs = {
  accountTransfersInput?: Maybe<AccountTransfersInput>;
  id: Scalars["String"];
};
export type MutationPostAccountsArgs = {
  createApexAccountRequestInput?: Maybe<CreateApexAccountRequestInput>;
};
export type MutationPostAccountsAchRelationshipsArgs = {
  accountNumber: Scalars["String"];
  setAchRelationshipRequestInput?: Maybe<SetAchRelationshipRequestInput>;
};
export type MutationPostAccountsTransfersArgs = {
  accountNumber: Scalars["String"];
  createApexTransferRequestInput?: Maybe<CreateApexTransferRequestInput>;
};
export type MutationPostAccountsTransfersInternalArgs = {
  accountNumber: Scalars["String"];
  internalTransferRequestInput?: Maybe<InternalTransferRequestInput>;
};
export type MutationPostAnalysesArgs = {
  getAnalysesRequestInput?: Maybe<GetAnalysesRequestInput>;
};
export type MutationPostAnalyzeAssetArgs = {
  analyzeAssetRequestInput?: Maybe<AnalyzeAssetRequestInput>;
};
export type MutationPostApiCallRecordsSearchArgs = {
  searchApiCallRecordsRequestInput?: Maybe<SearchApiCallRecordsRequestInput>;
};
export type MutationPostAssetAnalyzeAssetArgs = {
  assetId: Scalars["String"];
};
export type MutationPostAssetCalculateIntradayReturnArgs = {
  assetId: Scalars["String"];
};
export type MutationPostAssetProjectCashFlowsArgs = {
  assetId: Scalars["String"];
};
export type MutationPostAssetsArgs = {
  multipartFormDataInput?: Maybe<Scalars["String"]>;
};
export type MutationPostAssetsCalculateRiskArgs = {
  calculateAssetRiskRequestInput?: Maybe<CalculateAssetRiskRequestInput>;
};
export type MutationPostAssetsCovariancesArgs = {
  getAssetCovariancesRequestInput?: Maybe<GetAssetCovariancesRequestInput>;
};
export type MutationPostAssetsCovariancesClearCacheArgs = {
  clearAssetCovariancesCacheRequestInput?: Maybe<
    ClearAssetCovariancesCacheRequestInput
  >;
};
export type MutationPostAssetsListAssetIdsArgs = {
  listAssetIdsRequestInput?: Maybe<ListAssetIdsRequestInput>;
};
export type MutationPostAssetsScoreAssetArgs = {
  scoreAssetRequestInput?: Maybe<ScoreAssetRequestInput>;
};
export type MutationPostAssetsSearchArgs = {
  searchAssetRequestInput?: Maybe<SearchAssetRequestInput>;
};
export type MutationPostAssetsTimeSeriesArgs = {
  createOrReplaceAssetTimeSeriesRequestInput?: Maybe<
    CreateOrReplaceAssetTimeSeriesRequestInput
  >;
};
export type MutationPostAssetsTimeSeriesUpdateByExternalIdArgs = {
  updateAssetTimeSeriesByExternalIdRequestInput?: Maybe<
    UpdateAssetTimeSeriesByExternalIdRequestInput
  >;
};
export type MutationPostAssetsUpdateByExternalIdArgs = {
  updateAssetByExternalIdRequestInput?: Maybe<
    UpdateAssetByExternalIdRequestInput
  >;
};
export type MutationPostCalculateBetasArgs = {
  calculateBetasRequestInput?: Maybe<CalculateBetasRequestInput>;
};
export type MutationPostCompositeDataSearchArgs = {
  searchCompositeDataRequestInput?: Maybe<SearchCompositeDataRequestInput>;
};
export type MutationPostCusipsArgs = {
  endDate?: Maybe<Scalars["String"]>;
  getByCusipsRequestInput?: Maybe<GetByCusipsRequestInput>;
  includeDeleted?: Maybe<Scalars["Boolean"]>;
  startDate?: Maybe<Scalars["String"]>;
};
export type MutationPostExecutionLogsArgs = {
  postExecutionLogRequestInput?: Maybe<PostExecutionLogRequestInput>;
};
export type MutationPostExternalIdMappingGetAssetsByExternalIdArgs = {
  getAssetsByExternalIdRequestInput?: Maybe<GetAssetsByExternalIdRequestInput>;
  sourceName: Scalars["String"];
};
export type MutationPostExternalIdMappingGetExternalIdMappingsArgs = {
  getExternalIdMappingsRequestInput?: Maybe<GetExternalIdMappingsRequestInput>;
  sourceName: Scalars["String"];
};
export type MutationPostExternalPortfoliosArgs = {
  createOrReplaceExternalPortfolioRequestInput?: Maybe<
    CreateOrReplaceExternalPortfolioRequestInput
  >;
};
export type MutationPostFilesArgs = {
  uploadFileRequestInput?: Maybe<UploadFileRequestInput>;
};
export type MutationPostIdentityInvestigationUploadArgs = {
  sketchId: Scalars["String"];
  uploadIdentityDocumentRequestInput?: Maybe<
    UploadIdentityDocumentRequestInput
  >;
};
export type MutationPostInstitutionApiCallRecordsArgs = {
  createApiCallRecordRequestInput?: Maybe<CreateApiCallRecordRequestInput>;
  institutionId: Scalars["String"];
};
export type MutationPostInstitutionInventoriesArgs = {
  createOrUpdateInventoryMappingRequestInput?: Maybe<
    CreateOrUpdateInventoryMappingRequestInput
  >;
  institutionId: Scalars["String"];
};
export type MutationPostInstitutionInvestorsArgs = {
  createInvestorMappingRequestInput?: Maybe<CreateInvestorMappingRequestInput>;
  institutionId: Scalars["String"];
};
export type MutationPostInstitutionPortfoliosArgs = {
  createPortfolioMappingRequestInput?: Maybe<
    CreatePortfolioMappingRequestInput
  >;
  institutionId: Scalars["String"];
};
export type MutationPostInstitutionProposalsArgs = {
  createProposalMappingRequestInput?: Maybe<CreateProposalMappingRequestInput>;
  institutionId: Scalars["String"];
};
export type MutationPostInstitutionRolesArgs = {
  createRoleMappingRequestInput?: Maybe<CreateRoleMappingRequestInput>;
  institutionId: Scalars["String"];
};
export type MutationPostInstitutionUsersArgs = {
  createUserMappingRequestInput?: Maybe<CreateUserMappingRequestInput>;
  institutionId: Scalars["String"];
};
export type MutationPostInstitutionWhitelistsGenerateBestFitArgs = {
  generateBestFitWhitelistRequestInput?: Maybe<
    GenerateBestFitWhitelistRequestInput
  >;
  institutionId: Scalars["String"];
};
export type MutationPostInstitutionWhitelistsGenerateMuniBestFitArgs = {
  generateMuniBestFitWhitelistRequestInput?: Maybe<
    GenerateMuniBestFitWhitelistRequestInput
  >;
  institutionId: Scalars["String"];
};
export type MutationPostInstitutionsArgs = {
  createInstitutionRequestInput?: Maybe<CreateInstitutionRequestInput>;
};
export type MutationPostInternalAccountsSearchArgs = {
  searchApexAccountsRequestInput?: Maybe<SearchApexAccountsRequestInput>;
};
export type MutationPostInternalAchRelationshipSearchArgs = {
  searchApexAchRelationshipsRequestInput?: Maybe<
    SearchApexAchRelationshipsRequestInput
  >;
};
export type MutationPostInternalSyncSearchArgs = {
  internalSyncSearchRequestInput?: Maybe<InternalSyncSearchRequestInput>;
};
export type MutationPostInternalTransfersSearchArgs = {
  searchApexTransfersRequestInput?: Maybe<SearchApexTransfersRequestInput>;
};
export type MutationPostInvestorAccountArgs = {
  investorId: Scalars["String"];
};
export type MutationPostInvestorLinkedBankAccountsArgs = {
  createLinkedBankAccountRequestInput?: Maybe<
    CreateLinkedBankAccountRequestInput
  >;
  investorId: Scalars["String"];
};
export type MutationPostInvestorLinkedBankAccountsDirectlyArgs = {
  createLinkedBankAccountDirectlyRequestInput?: Maybe<
    CreateLinkedBankAccountDirectlyRequestInput
  >;
  investorId: Scalars["String"];
};
export type MutationPostInvestorPortfolioInternalPortfolioFundTransferArgs = {
  createFundTransferRequestInput?: Maybe<CreateFundTransferRequestInput>;
  investorId: Scalars["String"];
  portfolioId: Scalars["String"];
};
export type MutationPostInvestorPortfoliosArgs = {
  createPortfolioRequestInput?: Maybe<CreatePortfolioRequestInput>;
  investorId: Scalars["String"];
};
export type MutationPostInvestorPortfoliosCashPortfolioArgs = {
  investorId: Scalars["String"];
};
export type MutationPostInvestorTransfersArgs = {
  createTransferRequestInput?: Maybe<CreateTransferRequestInput>;
  investorId: Scalars["String"];
};
export type MutationPostInvestorsArgs = {
  createInvestorRequestInput?: Maybe<CreateInvestorRequestInput>;
};
export type MutationPostInvestorsTransfersSearchArgs = {
  searchTransfersRequestInput?: Maybe<SearchTransfersRequestInput>;
};
export type MutationPostOauthTokenArgs = {
  getAccessTokenRequestInput?: Maybe<GetAccessTokenRequestInput>;
};
export type MutationPostOptimizePortfolioArgs = {
  optimizePortfolioRequestInput?: Maybe<OptimizePortfolioRequestInput>;
};
export type MutationPostOrdersArgs = {
  createTrafixOrderRequestInput?: Maybe<CreateTrafixOrderRequestInput>;
};
export type MutationPostOrdersSearchArgs = {
  searchOrdersRequestInput?: Maybe<SearchOrdersRequestInput>;
};
export type MutationPostPortfolioCloseArgs = {
  closePortfolioRequestInput?: Maybe<ClosePortfolioRequestInput>;
  institution: Scalars["String"];
  portfolioId: Scalars["String"];
};
export type MutationPostPortfolioDeliveryInstructionArgs = {
  createPortfolioDeliveryInstructionRequestInput?: Maybe<
    CreatePortfolioDeliveryInstructionRequestInput
  >;
  portfolioId: Scalars["String"];
};
export type MutationPostPortfolioFundTransferSettleArgs = {
  id: Scalars["String"];
  ledgerEntryId: Scalars["String"];
  settleFundTransferRequestInput?: Maybe<SettleFundTransferRequestInput>;
};
export type MutationPostPortfolioFundTransfersArgs = {
  createFundTransferRequestInput?: Maybe<CreateFundTransferRequestInput>;
  id: Scalars["String"];
};
export type MutationPostPortfolioMappingArgs = {
  createOrReplacePortfolioMappingRequestInput?: Maybe<
    CreateOrReplacePortfolioMappingRequestInput
  >;
  portfolioId: Scalars["String"];
};
export type MutationPostPortfolioOrdersArgs = {
  createOrderRequestInput?: Maybe<CreateOrderRequestInput>;
  portfolioId: Scalars["String"];
};
export type MutationPostPortfolioOrdersRebalanceArgs = {
  portfolioId: Scalars["String"];
  rebalanceOrdersRequestInput?: Maybe<RebalanceOrdersRequestInput>;
};
export type MutationPostPortfolioPreferencesArgs = {
  portfolioId: Scalars["String"];
  putPreferencesRequestInput?: Maybe<PutPreferencesRequestInput>;
};
export type MutationPostPortfolioTradeSettleArgs = {
  id: Scalars["String"];
  portfolioId: Scalars["String"];
  settleTradeRequestInput?: Maybe<SettleTradeRequestInput>;
};
export type MutationPostPortfolioTradesArgs = {
  createTradeRequestInput?: Maybe<CreateTradeRequestInput>;
  portfolioId: Scalars["String"];
};
export type MutationPostPortfoliosArgs = {
  createPortfolioRequestInput?: Maybe<CreatePortfolioRequestInput>;
};
export type MutationPostPortfoliosCalculateRiskArgs = {
  calculatePortfolioRiskRequestInput?: Maybe<
    CalculatePortfolioRiskRequestInput
  >;
  calculateVar?: Maybe<Scalars["Boolean"]>;
};
export type MutationPostPortfoliosCovariancesArgs = {
  getPortfolioCovariancesRequestInput?: Maybe<
    GetPortfolioCovariancesRequestInput
  >;
};
export type MutationPostPortfoliosDeliveryInstructionSearchArgs = {
  searchPorfolioDeliveryInstructionsRequestInput?: Maybe<
    SearchPorfolioDeliveryInstructionsRequestInput
  >;
};
export type MutationPostPortfoliosStressScenariosArgs = {
  getPortfolioStressScenariosRequestInput?: Maybe<
    GetPortfolioStressScenariosRequestInput
  >;
};
export type MutationPostProjectCashFlowsArgs = {
  projectCashFlowsRequestInput?: Maybe<ProjectCashFlowsRequestInput>;
};
export type MutationPostProposalAcceptArgs = {
  acceptProposalRequestInput?: Maybe<AcceptProposalRequestInput>;
  institution: Scalars["String"];
  proposalId: Scalars["String"];
};
export type MutationPostProposalsMinMaxRiskArgs = {
  institution: Scalars["String"];
};
export type MutationPostProposalsMinMaxYieldArgs = {
  institution: Scalars["String"];
};
export type MutationPostProposalsNewArgs = {
  newProposalRequestInput?: Maybe<NewProposalRequestInput>;
};
export type MutationPostProposalsPortfolioRebalanceArgs = {
  portfolioId: Scalars["String"];
  rebalanceProposalRequestInput?: Maybe<RebalanceProposalRequestInput>;
};
export type MutationPostPubsubStacksSubscriptionArgs = {
  createSubscriptionRequestInput?: Maybe<CreateSubscriptionRequestInput>;
};
export type MutationPostPubsubStacksTopicArgs = {
  createTopicRequestInput?: Maybe<CreateTopicRequestInput>;
};
export type MutationPostRoleBindingsArgs = {
  createOrUpdateRoleBindingRequestInput?: Maybe<
    CreateOrUpdateRoleBindingRequestInput
  >;
};
export type MutationPostRolePoliciesArgs = {
  id: Scalars["String"];
  removeRolePoliciesRequestInput?: Maybe<RemoveRolePoliciesRequestInput>;
};
export type MutationPostRolesArgs = {
  createOrUpdateRoleRequestInput?: Maybe<CreateOrUpdateRoleRequestInput>;
};
export type MutationPostSearchStacksArgs = {
  tableName: Scalars["String"];
};
export type MutationPostSketchUploadArgs = {
  sketchId: Scalars["String"];
  uploadSketchDocumentRequestInput?: Maybe<UploadSketchDocumentRequestInput>;
};
export type MutationPostSuggestionsGenerateAssetSuggestionsArgs = {
  generateAssetSuggestionsRequestInput?: Maybe<
    GenerateAssetSuggestionsRequestInput
  >;
};
export type MutationPostTemporaryPortfoliosArgs = {
  createOrReplaceTemporaryPortfolioRequestInput?: Maybe<
    CreateOrReplaceTemporaryPortfolioRequestInput
  >;
};
export type MutationPostTicketsEmailVerificationArgs = {
  ticketId: Scalars["String"];
};
export type MutationPostTicketsEmailVerificationsArgs = {
  email: Scalars["String"];
};
export type MutationPostTicketsLoginArgs = {
  loginRequestInput?: Maybe<LoginRequestInput>;
  sdk?: Maybe<Scalars["Boolean"]>;
};
export type MutationPostTicketsPasswordResetArgs = {
  resetPasswordRequestInput?: Maybe<ResetPasswordRequestInput>;
  ticketId: Scalars["String"];
};
export type MutationPostTicketsPasswordResetsArgs = {
  email: Scalars["String"];
};
export type MutationPostTradePostingPostExecutionsArgs = {
  postExecutionsRequestInput?: Maybe<PostExecutionsRequestInput>;
};
export type MutationPostTradesSearchArgs = {
  searchTradeRequestInput?: Maybe<SearchTradeRequestInput>;
};
export type MutationPostUserCartItemsArgs = {
  createOrReplaceCartItemRequestInput?: Maybe<
    CreateOrReplaceCartItemRequestInput
  >;
  userId: Scalars["String"];
};
export type MutationPostUserResetPasswordDirectlyArgs = {
  id: Scalars["String"];
  resetPasswordDirectlyRequestInput?: Maybe<ResetPasswordDirectlyRequestInput>;
};
export type MutationPostUserWatchlistItemArgs = {
  assetId: Scalars["String"];
  userId: Scalars["String"];
};
export type MutationPostUsersArgs = {
  createUserRequestInput?: Maybe<CreateUserRequestInput>;
};
export type MutationPostUsersBlockExpiredTrialUsersArgs = {
  blockExpiredTrialUsersRequestInput?: Maybe<
    BlockExpiredTrialUsersRequestInput
  >;
};
export type MutationPostUsersInvitesArgs = {
  inviteUserRequestInput?: Maybe<InviteUserRequestInput>;
};
export type MutationPostWhitelistsGenerateBestFitArgs = {
  generateBestFitWhitelistRequestInput?: Maybe<
    GenerateBestFitWhitelistRequestInput
  >;
};
export type MutationPutAccountCloseArgs = {
  id: Scalars["String"];
};
export type MutationPutAccountReopenArgs = {
  id: Scalars["String"];
};
export type MutationPutAccountsCloseArgs = {
  accountNumber: Scalars["String"];
};
export type MutationPutAccountsReopenArgs = {
  accountNumber: Scalars["String"];
};
export type MutationPutIdentityInvestigationActionArgs = {
  action: Action4;
  sketchId: Scalars["String"];
  updateIdentityInvestigationRequestInput?: Maybe<
    UpdateIdentityInvestigationRequestInput
  >;
};
export type MutationPutInvestorAccountCloseArgs = {
  investorId: Scalars["String"];
};
export type MutationPutInvestorAccountReopenArgs = {
  investorId: Scalars["String"];
};
export type MutationPutSketchActionArgs = {
  action: Action4;
  sketchId: Scalars["String"];
  updateSketchRequestInput?: Maybe<UpdateSketchRequestInput>;
};
export interface RemoveApexAchRelationshipResponse {
  __typename?: "RemoveApexACHRelationshipResponse";
  apexAchRelationship: ApexAchRelationship;
}
export interface CancelApexTransferResponse2 {
  __typename?: "CancelApexTransferResponse2";
  transfer: ApexTransfer;
}
export interface RemoveAchRelationshipResponse {
  __typename?: "RemoveAchRelationshipResponse";
  achRelationship: AchRelationship;
}
export interface CancelApexTransferResponse {
  __typename?: "CancelApexTransferResponse";
  transfer: Transfer;
}
export interface DeleteExternalPortfolioResponse {
  __typename?: "DeleteExternalPortfolioResponse";
  deleted: Scalars["Boolean"];
}
export interface RemoveInvestorResponse {
  __typename?: "RemoveInvestorResponse";
  investor: RemoveInvestor;
}
export interface RemoveInvestor {
  __typename?: "RemoveInvestor";
  createdAt: Scalars["String"];
  id: Scalars["String"];
  /** cannot be updated */
  investorType: InvestorType;
  status: InvestorStatus;
  updatedAt: Scalars["String"];
}
export interface RemoveLinkedBankAccountResponse {
  __typename?: "RemoveLinkedBankAccountResponse";
  linkedBankAccount: RemoveLinkedBankAccount;
}
export interface RemoveLinkedBankAccount {
  __typename?: "RemoveLinkedBankAccount";
  id: Scalars["String"];
  status: LinkedBankAccountStatus;
}
export interface CancelTransferResponse {
  __typename?: "CancelTransferResponse";
  transfer: Transfer3;
}
export interface DeletePreferencesResponse {
  __typename?: "DeletePreferencesResponse";
  deleted?: Maybe<Scalars["Boolean"]>;
}
export interface DeleteSubscriptionResponse {
  __typename?: "DeleteSubscriptionResponse";
  deleted: Scalars["Boolean"];
}
export interface DeleteTopicResponse {
  __typename?: "DeleteTopicResponse";
  deleted: Scalars["Boolean"];
}
export interface DeleteRoleResponse {
  __typename?: "DeleteRoleResponse";
  message: Scalars["String"];
  timestamp: Scalars["String"];
}
export interface DeleteRoleBindingResponse {
  __typename?: "DeleteRoleBindingResponse";
  message: Scalars["String"];
  timestamp: Scalars["String"];
}
export interface DeleteSearchStackResponse {
  __typename?: "DeleteSearchStackResponse";
  deleted: Scalars["Boolean"];
}
export interface DeleteTemporaryPortfolioResponse {
  __typename?: "DeleteTemporaryPortfolioResponse";
  deleted: Scalars["Boolean"];
}
export interface DeleteUserResponse {
  __typename?: "DeleteUserResponse";
  user?: Maybe<DeletedUser>;
}
export interface DeletedUser {
  __typename?: "DeletedUser";
  id: Scalars["String"];
  status: UserStatus;
  updatedAt: Scalars["String"];
}
export interface ClearCartResponse {
  __typename?: "ClearCartResponse";
  cleared: Scalars["Boolean"];
}
export interface DeleteCartItemResponse {
  __typename?: "DeleteCartItemResponse";
  deleted: Scalars["Boolean"];
}
export interface ClearWatchListResponse {
  __typename?: "ClearWatchListResponse";
  cleared: Scalars["Boolean"];
}
export interface DeleteWatchListItemResponse {
  __typename?: "DeleteWatchListItemResponse";
  deleted: Scalars["Boolean"];
}
export interface UpdateApexAccountResponse2 {
  __typename?: "UpdateApexAccountResponse2";
  apexAccount: ApexAccount2;
}
export type AccountInput = {
  /** The investorId of the investor service */
  investorId: Scalars["String"];
};
export interface UpdateCorporateAgreementFormResponse {
  __typename?: "UpdateCorporateAgreementFormResponse";
  /** Object for Entity Corporate Cash Account Agreement Form at Apex */
  corporateAgreementForm: CorporateAgreementForm;
}
export type UpdateCorporateAgreementFormRequestInput = {
  articlesOfIncorporationSnapId?: Maybe<Scalars["String"]>;
  authorizedOfficerName?: Maybe<Scalars["String"]>;
  authorizedOfficerTitle?: Maybe<Scalars["String"]>;
  corporationName?: Maybe<Scalars["String"]>;
  isAuthorizedOfficerESigned?: Maybe<Scalars["Boolean"]>;
  isSecretaryESigned?: Maybe<Scalars["Boolean"]>;
  secretaryName?: Maybe<Scalars["String"]>;
  stateOfIncorporation?: Maybe<Scalars["String"]>;
};
export interface UpdateEntityAccountFormResponse {
  __typename?: "UpdateEntityAccountFormResponse";
  /** Object for Entity New Direct Account RIA Form at Apex */
  entityAccountForm: EntityAccountForm;
}
export type UpdateEntityAccountFormRequestInput = {
  accountInformation?: Maybe<EntityAccountInformationInput>;
  accountNature?: Maybe<AccountNature>;
  additionalAccountInformation?: Maybe<EntityAdditionalAccountInformationInput>;
  authorizedSigner?: Maybe<EntityAuthorizedSignerInput>;
  beneficialOwners?: Maybe<Array<Maybe<OwnerOrOfficerInput>>>;
  /** A - Institutional Customer, E - Employee Account, I - Individual Customer */
  catAccountholderType?: Maybe<CatAccountHolderType>;
  customerType?: Maybe<EntityCustomerType>;
  entityOfficers?: Maybe<Array<Maybe<OwnerOrOfficerInput>>>;
  exemptLegalCustomer?: Maybe<EntityAccountExemptLegalCustomerInput>;
  isApplicantESigned?: Maybe<Scalars["Boolean"]>;
  issuerDirectCommunicationCode?: Maybe<IssuerDirectCommunicationCode>;
  legalEntityIdentifier?: Maybe<Scalars["String"]>;
  serviceProfile?: Maybe<EntityAccountProfileInput>;
  suitabilityProfile?: Maybe<SuitabilityProfileInput>;
  w9Certification?: Maybe<W9CertificationInput>;
};
export type EntityAccountInformationInput = {
  accountTradingInformation: EntityAccountTradingInformationInput;
  businessAddress: PhysicalAddressInput;
  businessTelephoneNumber: Scalars["String"];
  entityName: Scalars["String"];
  entityTaxId: Scalars["String"];
  isUSEntity: Scalars["Boolean"];
};
export type EntityAccountTradingInformationInput = {
  /** required if isControlPerson is true */
  companyTickerSymbols?: Maybe<Array<Maybe<Scalars["String"]>>>;
  isAffiliatedExchangeOrFINRA: Scalars["Boolean"];
  isControlPerson: Scalars["Boolean"];
  memberFirmNames?: Maybe<Array<Maybe<Scalars["String"]>>>;
};
export type PhysicalAddressInput = {
  city: Scalars["String"];
  country: Scalars["String"];
  postalCode: Scalars["String"];
  state: Scalars["String"];
  streetAddress: Array<Maybe<Scalars["String"]>>;
};
export type EntityAdditionalAccountInformationInput = {
  isForeignBank: Scalars["Boolean"];
  isMaintainedForForeignFinancialInstitution: Scalars["Boolean"];
  isPoliticallyExposed: Scalars["Boolean"];
  /** provide if and only if isPoliticallyExposed is YES */
  politicalExposureDetail?: Maybe<EntityAccountPoliticalExposureDetailInput>;
};
/** provide if and only if isPoliticallyExposed is YES */
export type EntityAccountPoliticalExposureDetailInput = {
  immediateFamily: Array<Maybe<Scalars["String"]>>;
  politicalOrganization: Scalars["String"];
};
export type EntityAuthorizedSignerInput = {
  citizenshipCountry?: Maybe<Scalars["String"]>;
  dateOfBirth: Scalars["String"];
  emailAddress: Scalars["String"];
  isUsCitizen: Scalars["Boolean"];
  name: PrimaryNameInput;
  taxId: Scalars["String"];
  title: Scalars["String"];
};
export type PrimaryNameInput = {
  familyName: Scalars["String"];
  givenName: Scalars["String"];
  legalName: Scalars["String"];
};
export type OwnerOrOfficerInput = {
  address: PhysicalAddressInput;
  dateOfBirth: Scalars["String"];
  /** Either ssn or other identification number is required (i.e. passport) */
  identificationNumber?: Maybe<Scalars["String"]>;
  name: PrimaryNameInput;
  /** Either ssn or other identification number is required (i.e. passport) */
  socialSecurityNumber?: Maybe<Scalars["String"]>;
};
export type EntityAccountExemptLegalCustomerInput = {
  exemption?: Maybe<Exemption>;
  isExemptLegalCustomer: Scalars["Boolean"];
};
export type EntityAccountProfileInput = {
  dividendReinvestment: DividendReinvestment;
  sweepInstructions: SweepInstructions;
};
export type SuitabilityProfileInput = {
  liquidityNeeds: LiquidityNeeds;
  timeHorizon: TimeHorizon;
};
export type W9CertificationInput = {
  exemptPayeeCode?: Maybe<Scalars["String"]>;
  exemptionFromFatca?: Maybe<Scalars["String"]>;
};
export interface UpdateEntityDueDiligenceFormResponse {
  __typename?: "UpdateEntityDueDiligenceFormResponse";
  /** Object for Entity Due Diligence Form at Apex */
  entityDueDiligenceForm: EntityDueDiligenceForm;
}
export type UpdateEntityDueDiligenceFormRequestInput = {
  accountActivity?: Maybe<DueDiligenceAccountActivityInput>;
  accountInformation?: Maybe<DueDiligenceAccountInformationInput>;
  additionalAccounts?: Maybe<DueDiligenceAdditionalAccountsInput>;
  assessedRiskRating?: Maybe<AssessedRiskRating>;
  entityOrAssociatesHaveNegativeNews?: Maybe<Scalars["Boolean"]>;
  /** If entityOrAssociatesHaveNegativeNews is YES */
  entityOrAssociatesNegativeNewsInfo?: Maybe<Scalars["String"]>;
  politicallyExposedPersons?: Maybe<DueDiligencePoliticallyExposedPersonsInput>;
  principalApproverName?: Maybe<Scalars["String"]>;
  registeredRepresentativeApproverName?: Maybe<Scalars["String"]>;
};
export type DueDiligenceAccountActivityInput = {
  expectedWithdrawalFrequency: ExpectedWithdrawalFrequency;
  initialDepositAmount: Scalars["Float"];
  initialDepositSource: Scalars["String"];
  lowPricedSecuritiesPercentage?: Maybe<Scalars["Float"]>;
  primaryAccountActivity?: Maybe<PrimaryAccountActivity>;
  willTransactForeignBonds: Scalars["Boolean"];
  willTransactLowPricedSecurities: Scalars["Boolean"];
};
export type DueDiligenceAccountInformationInput = {
  accountName: Scalars["String"];
  businessLocations: Array<Maybe<Scalars["String"]>>;
  countryOfIncorporation: Scalars["String"];
  /** Has related accounts */
  hasAccounts: Scalars["Boolean"];
  relatedAccounts?: Maybe<Array<Maybe<DueDiligenceRelatedAccountsInput>>>;
};
export type DueDiligenceRelatedAccountsInput = {
  accountNumber: Scalars["String"];
  entityName: Scalars["String"];
};
export type DueDiligenceAdditionalAccountsInput = {
  confirmEntityDoesNotIssueBearerShares: Scalars["Boolean"];
  institutionNames: Array<Maybe<Scalars["String"]>>;
  primaryOngoingFundingSource: PrimaryOngoingFundingSource;
  primaryOngoingFundingSourceClarification?: Maybe<Scalars["String"]>;
  scopeOfBusiness: ScopeOfBusiness;
  scopeOfBusinessClarification?: Maybe<Scalars["String"]>;
};
export type DueDiligencePoliticallyExposedPersonsInput = {
  isPoliticallyExposed: Scalars["Boolean"];
  politicalOfficials?: Maybe<Array<Maybe<DueDiligencePoliticalOfficialsInput>>>;
};
export type DueDiligencePoliticalOfficialsInput = {
  immediateFamily: Array<Maybe<Scalars["String"]>>;
  legalName: Scalars["String"];
  politicalOrganization: Scalars["String"];
  politicalTitle: Scalars["String"];
  role: Scalars["String"];
};
export interface UpdateIndividualAccountFormResponse {
  __typename?: "UpdateIndividualAccountFormResponse";
  /** Object for New Direct Account Form at Apex */
  individualAccountForm: IndividualAccountForm;
}
export type UpdateIndividualAccountFormRequestInput = {
  applicantSignature?: Maybe<ApplicantSignatureInput>;
  /** A - Institutional Customer, E - Employee Account, I - Individual Customer */
  catAccountholderType?: Maybe<CatAccountHolderType>;
  contact?: Maybe<ContactInput>;
  customerType?: Maybe<CustomerType>;
  disclosures?: Maybe<DisclosuresInput>;
  employment?: Maybe<EmploymentInput>;
  identity?: Maybe<IdentityInput>;
  investmentProfile?: Maybe<InvestmentProfileInput>;
  serviceProfile?: Maybe<IndividualServiceProfileInput>;
  suitabilityProfile?: Maybe<SuitabilityProfileInput>;
  trustedContact?: Maybe<TrustedContactEnum>;
};
export type ApplicantSignatureInput = {
  eSigned: YesNoEnum;
};
export type ContactInput = {
  emailAddresses: Array<Maybe<Scalars["String"]>>;
  homeAddress: PhysicalAddressInput;
  phoneNumbers: Array<Maybe<PhoneNumberInput>>;
};
export type PhoneNumberInput = {
  phoneNumber: Scalars["String"];
  phoneNumberType: Scalars["String"];
};
export type DisclosuresInput = {
  affiliatedApproval?: Maybe<Array<Maybe<Scalars["String"]>>>;
  /** ticker symbols of publicly traded companies. */
  companySymbols?: Maybe<Array<Maybe<Scalars["String"]>>>;
  firmName?: Maybe<Scalars["String"]>;
  isAffiliatedExchangeOrFINRA: YesNoEnum;
  isControlPerson: YesNoEnum;
  isPoliticallyExposed: YesNoEnum;
  politicalExposureDetail?: Maybe<PoliticalExposureDetailInput>;
};
export type PoliticalExposureDetailInput = {
  immediateFamily: Array<Maybe<Scalars["String"]>>;
  politicalOrganization: Scalars["String"];
};
export type EmploymentInput = {
  /** reqiored if employmentStatus is EMPLOYED */
  employer?: Maybe<Scalars["String"]>;
  employmentStatus: EmploymentStatus;
  positionEmployed?: Maybe<Scalars["String"]>;
};
export type IdentityInput = {
  birthCountry?: Maybe<Scalars["String"]>;
  citizenshipCountry: Scalars["String"];
  /** Example 2003-04-23 */
  dateOfBirth?: Maybe<Scalars["String"]>;
  name: PrimaryNameInput;
  permanentResident?: Maybe<YesNoEnum>;
  /** Example 123-45-6789 */
  socialSecurityNumber?: Maybe<Scalars["String"]>;
  /** Required when a valid visaType is selected. Example 2003-04-23 */
  visaExpirationDate?: Maybe<Scalars["String"]>;
  visaType?: Maybe<VisaType>;
};
export type InvestmentProfileInput = {
  annualIncomeUSD: Amount;
  federalTaxBracketPercent: Scalars["Float"];
  investmentExperience: InvestmentExperience;
  investmentObjective: InvestmentObjective;
  liquidNetWorthUSD: Worth;
  riskTolerance: RiskTolerance;
  totalNetWorthUSD: Worth;
};
export type IndividualServiceProfileInput = {
  dividendProceeds?: Maybe<DividendProceeds>;
  dividendProceedsSendFrequency?: Maybe<DividendProceedsSendFrequency>;
  dividendReinvestment?: Maybe<DividendReinvestment>;
  householdingService?: Maybe<YesNoEnum>;
  issuerDirectCommunication: IssuerDirectCommunicationCode;
  securitySaleProceeds?: Maybe<SecuritySaleProceeds>;
  sweepInstructions?: Maybe<SweepInstructions>;
};
export interface UpdateInterestedPartyFormResponse {
  __typename?: "UpdateInterestedPartyFormResponse";
  /** Object for Interested Party Request Form at Apex */
  interestedPartyForm: InterestedPartyForm;
}
export type UpdateInterestedPartyFormRequestInput = {
  /** Array of interested parties. */
  interestedParties: Array<Maybe<InterestedParties2Input>>;
};
export type InterestedParties2Input = {
  mailingAddress: PhysicalAddressInput;
  /** This only applies to individual accounts */
  name: InterestedPartyNameInput;
};
/** This only applies to individual accounts */
export type InterestedPartyNameInput = {
  companyName: Scalars["String"];
};
export interface UpdateLlcAgreementFormResponse {
  __typename?: "UpdateLlcAgreementFormResponse";
  /** Object for Entity LLC Agreement Form at Apex */
  llcAgreementForm: LlcAgreementForm;
}
export type UpdateLlcAgreementFormRequestInput = {
  articlesOfIncorporationOrOperatingAgreementSnapId?: Maybe<Scalars["String"]>;
  authorizedSignerName?: Maybe<Scalars["String"]>;
  authorizedSignerTitle?: Maybe<Scalars["String"]>;
  entityName?: Maybe<Scalars["String"]>;
  isAuthorizedSignerESigned?: Maybe<Scalars["Boolean"]>;
  membersAndManagers?: Maybe<Array<Maybe<MembersAndManagers2Input>>>;
  /** example, 2014-10-21 */
  resolutionAdoptionDate?: Maybe<Scalars["String"]>;
  stateOfOrigin?: Maybe<Scalars["String"]>;
};
export type MembersAndManagers2Input = {
  isManager: Scalars["Boolean"];
  isManagerESigned?: Maybe<Scalars["Boolean"]>;
  legalName: Scalars["String"];
  organizationalRole: Scalars["String"];
};
export interface UpdateTrustedContactFormResponse {
  __typename?: "UpdateTrustedContactFormResponse";
  /** Object for Trusted Contact Form at Apex */
  trustedContactForm: TrustedContactForm;
}
/** Object for Trusted Contact Form at Apex */
export type UpdateTrustedContactFormRequestInput = {
  emailAddress?: Maybe<Scalars["String"]>;
  familyName?: Maybe<Scalars["String"]>;
  givenName?: Maybe<Scalars["String"]>;
  mailingAddress?: Maybe<PhysicalAddressInput>;
  phoneNumber?: Maybe<PhoneNumberInput>;
};
export interface UpdateLinkedBankAccountStatusResponse {
  __typename?: "UpdateLinkedBankAccountStatusResponse";
  linkedBankAccount: LinkedBankAccount;
}
export type UpdateLinkedBankAccountStatusRequestInput = {
  status: LinkedBankAccountStatus;
};
export interface UpdateApexAccountStatusResponse {
  __typename?: "UpdateApexAccountStatusResponse";
  apexAccount: ApexAccount2;
}
export type UpdateApexAccountStatusRequestInput = {
  status: AccountStatus2;
};
export interface UpdateApexAccountResponse {
  __typename?: "UpdateApexAccountResponse";
  apexAccount: ApexAccount;
}
export type UpdateApexAccountRequestInput = {
  accountRequestId: Scalars["String"];
  formList: Array<Maybe<FormList2Input>>;
};
export type FormList2Input = {
  formId: Scalars["String"];
  formName: FormName;
};
export interface SettleTransferResponse {
  __typename?: "SettleTransferResponse";
  transfer: Transfer4;
}
export interface Transfer4 {
  __typename?: "Transfer4";
  accountNumber: Scalars["String"];
  amount: Scalars["Float"];
  counterparty: Counterparty;
  counterpartyId: Scalars["String"];
  createdAt: Scalars["String"];
  direction: TransferDirection;
  status: TransferStatus4;
  transferId: Scalars["String"];
  updatedAt: Scalars["String"];
}
export enum Counterparty {
  Apex = "APEX",
  Portfolio = "PORTFOLIO"
}
export enum TransferStatus4 {
  Confirmed = "CONFIRMED",
  Settled = "SETTLED",
  Canceled = "CANCELED",
  Error = "ERROR"
}
export interface UpdateAssetResponse {
  __typename?: "UpdateAssetResponse";
  created: Scalars["Boolean"];
  updated: Scalars["Boolean"];
}
export type UpdateAssetRequestInput = {
  asset: Asset5Input;
};
export type Asset5Input = {
  /** Allocation data */
  allocation?: Maybe<Allocation7Input>;
  analytics?: Maybe<AnalyticsInput>;
  /** Asset sub-types specific to an instrument type */
  assetSubtype?: Maybe<AssetSubtype>;
  /** Higher level asset and instrument types, for instance bonds, stocks, funds, etc. */
  assetType?: Maybe<AssetType>;
  /** Bond object, which include Corp/Muni/Sovereign etc. */
  bond?: Maybe<Bond4Input>;
  country?: Maybe<Scalars["String"]>;
  createdAt?: Maybe<Scalars["String"]>;
  createdBy?: Maybe<Scalars["String"]>;
  /** The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) currency code for the asset currency */
  currency?: Maybe<Scalars["String"]>;
  description?: Maybe<Scalars["String"]>;
  /** BondHouse generated readable id that should have 1 to 1 relationship with the generated ID */
  displayId?: Maybe<Scalars["String"]>;
  equity?: Maybe<EquityInput>;
  /** Scores for Environmental, Social, and Governance */
  esgScores?: Maybe<EsgScores2Input>;
  fund?: Maybe<Fund4Input>;
  /** BondHouse unique identifier for an asset. This is not a public identifier. */
  id: Scalars["String"];
  /**
   * asset/security identifier:
   * * cusip - 9 alpha-numeric characters that includes the check digit, first 6 alpha numeric characters refers to
   *   the issuer
   * * isin - 12 alpha-numeric characters, first 2 characters contains country code, last character is a check
   *   digit
   * * sedol - 7 alpha-numeric characters, single security can have multiple SEDOL, handle later
   * * primaryTicker - primary exchange ticker
   * * cins - 9 alpha-numeric characters managed by cusip
   * * bbGlobal - 12 alpha-numeric characters managed by Bloomberg
   * The first 2 characters are upper-case consonants (including "Y"),
   * the third character is the upper-case "G",
   * characters 4 -11 are any upper-case consonant (including "Y")
   * or integer between 0 and 9, and the last character is a check-digit.
   * An identifier is assigned to instruments of all asset classes,
   * is unique to an individual instrument and once issued will not change for an instrument.
   * * refinitivAssetId - 18 alpha-numeric characters asset id, example sourced from DSFI
   * * refinitivIssuePermId - unique Refinitiv system-generated PermID for an asset
   * * refinitivLipperId - id to specify a share class of a fund and also
   * * refinitivLipperPermId - lipper permanent id
   * * valoren - nine digits for official Swiss Identification number
   * * cik - SEC's central index key for corporations/individuals
   * * apex - APEX identifier
   */
  identifiers?: Maybe<IdentifiersInput>;
  legalEntity?: Maybe<LegalEntityInput>;
  /** Indicates whether there are current bids/offers that makes the asset transactable */
  liquid?: Maybe<Scalars["Boolean"]>;
  market?: Maybe<Scalars["String"]>;
  metadata?: Maybe<Scalars["JSON"]>;
  name?: Maybe<Scalars["String"]>;
  /**
   * BondHouse best price from available pricing sources, quote following market conventions:
   * * Clean price for most bonds
   * * Dirty price for preferred stock
   * * Close-mid for equities
   * * Market price for funds
   */
  price?: Maybe<Scalars["Float"]>;
  priceDate?: Maybe<Scalars["String"]>;
  priceQuotes?: Maybe<Array<Maybe<PriceQuoteInput>>>;
  primaryExchange?: Maybe<Scalars["String"]>;
  primaryExchangeMic?: Maybe<Scalars["String"]>;
  /** Normalized rating */
  rating?: Maybe<Scalars["String"]>;
  /** BondHouse's proprietary scores */
  scores?: Maybe<RoverScoresInput>;
  /**
   * The common street ticker for a security. For bonds, ticker code used to identify the common stock when
   * available, else common acronym of company if known, else matched to immediate parent, else unique value
   * based on name for standalone organizations.
   */
  ticker?: Maybe<Scalars["String"]>;
  unit?: Maybe<Scalars["String"]>;
  /** Universe inclusion information */
  universes?: Maybe<UniversesInput>;
  updatedAt?: Maybe<Scalars["String"]>;
  updatedBy?: Maybe<Scalars["String"]>;
};
/** Allocation data */
export type Allocation7Input = {
  /** Country allocation data */
  country?: Maybe<Scalars["JSON"]>;
  /** Currency allocation data */
  currency?: Maybe<Scalars["JSON"]>;
  /** Debt type allocation */
  debtType?: Maybe<DebtTypeAllocation2Input>;
  /** Maturity allocation data */
  maturity?: Maybe<MaturityAllocationInput>;
  /** Rating allocation data */
  rating?: Maybe<RatingAllocation2Input>;
  /** Region allocation data */
  region?: Maybe<RegionAllocationInput>;
  /** Sector allocation */
  sector?: Maybe<SectorAllocationInput>;
};
/** Debt type allocation */
export type DebtTypeAllocation2Input = {
  /** Allocation to asset-backed securities not covered by other categories */
  assetBackedSecurities?: Maybe<Scalars["Float"]>;
  /** Allocation to bonds */
  bonds?: Maybe<Scalars["Float"]>;
  /** Allocation to debentures */
  debentures?: Maybe<Scalars["Float"]>;
  /** Allocation to mortgage-backed securities, including collateralized mortgage obligations (CMOs) */
  mortgageBackedSecurities?: Maybe<Scalars["Float"]>;
  /** Allocation to municipal bonds and similar products such as tax anticipation notes */
  municipalBonds?: Maybe<Scalars["Float"]>;
  /** Allocation to notes */
  notes?: Maybe<Scalars["Float"]>;
  /** Allocation to other or unknown debt products */
  other?: Maybe<Scalars["Float"]>;
  /** Allocation to preferred stock */
  preferredStock?: Maybe<Scalars["Float"]>;
  /** Allocation to supranational bonds */
  supranationalBonds?: Maybe<Scalars["Float"]>;
};
/** Maturity allocation data */
export type MaturityAllocationInput = {
  /** Allocation to securities maturing in 5-10 years */
  fiveToTenYears?: Maybe<Scalars["Float"]>;
  /** Allocation to securities maturing in greater than 30 years */
  greaterThanThirtyYears?: Maybe<Scalars["Float"]>;
  /** Allocation to securities maturing in less than 1 years */
  lessThanOneYear?: Maybe<Scalars["Float"]>;
  /** Allocation to securities maturing in 1-3 years */
  oneToThreeYears?: Maybe<Scalars["Float"]>;
  /** Allocation to securities with an unknown or uncategorizable maturity */
  other?: Maybe<Scalars["Float"]>;
  /** Allocation to securities maturing in 10-20 years */
  tenToTwentyYears?: Maybe<Scalars["Float"]>;
  /** Allocation to securities maturing in 3-5 years */
  threeToFiveYears?: Maybe<Scalars["Float"]>;
  /** Allocation to securities maturing in 20-30 years */
  twentyToThirtyYears?: Maybe<Scalars["Float"]>;
};
/** Rating allocation data */
export type RatingAllocation2Input = {
  a?: Maybe<Scalars["Float"]>;
  aa?: Maybe<Scalars["Float"]>;
  aaa?: Maybe<Scalars["Float"]>;
  b?: Maybe<Scalars["Float"]>;
  bb?: Maybe<Scalars["Float"]>;
  bbb?: Maybe<Scalars["Float"]>;
  c?: Maybe<Scalars["Float"]>;
  cc?: Maybe<Scalars["Float"]>;
  ccc?: Maybe<Scalars["Float"]>;
  d?: Maybe<Scalars["Float"]>;
  nr?: Maybe<Scalars["Float"]>;
};
/** Region allocation data */
export type RegionAllocationInput = {
  /** Allocation to Africa ex-North Africa */
  africaExNorthAfrica?: Maybe<Scalars["Float"]>;
  /** Allocation to Asia Pacific ex-Japan */
  asiaPacificExJapan?: Maybe<Scalars["Float"]>;
  /** Allocation to emerging markets in Asia */
  emergingMarketsAsia?: Maybe<Scalars["Float"]>;
  /** Allocation to emerging markets in Europe */
  emergingMarketsEurope?: Maybe<Scalars["Float"]>;
  /** Allocation to Europe ex-United Kingdom */
  europeExUnitedKingdom?: Maybe<Scalars["Float"]>;
  /** Allocation to Japan */
  japan?: Maybe<Scalars["Float"]>;
  /** Allocation to Latin America */
  latinAmerica?: Maybe<Scalars["Float"]>;
  /** Allocation to the Middle East and North Africa */
  middleEastNorthAfrica?: Maybe<Scalars["Float"]>;
  /** Allocation to North America ex-United States */
  northAmericaExUnitedStates?: Maybe<Scalars["Float"]>;
  /** Allocation to other or unknown regions */
  other?: Maybe<Scalars["Float"]>;
  /** Allocation to the United Kingdom */
  unitedKingdom?: Maybe<Scalars["Float"]>;
  /** Allocation to the United States */
  unitedStates?: Maybe<Scalars["Float"]>;
};
/** Sector allocation */
export type SectorAllocationInput = {
  /** Allocation to the agency sector */
  agency?: Maybe<Scalars["Float"]>;
  /** Allocation to the communications sector */
  communications?: Maybe<Scalars["Float"]>;
  /** Allocation to the consumer goods sector */
  consumerGoods?: Maybe<Scalars["Float"]>;
  /** Allocation to the energy sector */
  energy?: Maybe<Scalars["Float"]>;
  /** Allocation to the financials sector */
  financials?: Maybe<Scalars["Float"]>;
  /** Allocation to the manufacturing sector */
  manufacturing?: Maybe<Scalars["Float"]>;
  /** Allocation to the municipal sector */
  municipal?: Maybe<Scalars["Float"]>;
  /** Allocation to the other sector */
  other?: Maybe<Scalars["Float"]>;
  /** Allocation to the services sector */
  services?: Maybe<Scalars["Float"]>;
  /** Allocation to the sovereign sector */
  sovereign?: Maybe<Scalars["Float"]>;
  /** Allocation to the supranational sector */
  supranational?: Maybe<Scalars["Float"]>;
  /** Allocation to the transportation sector */
  transportation?: Maybe<Scalars["Float"]>;
};
export type AnalyticsInput = {
  /**
   * A measure of the curvature of the price-yield relationship of a fixed income security, calculated using a
   * model that accounts for any embedded options
   */
  convexity?: Maybe<Scalars["Float"]>;
  creditBeta?: Maybe<Scalars["Float"]>;
  /** Current yield, coupon divided by price, expressed as a percent */
  currentYield?: Maybe<Scalars["Float"]>;
  /** Analysis date */
  date?: Maybe<Scalars["String"]>;
  /** Default-adjusted yield */
  defaultAdjustedYield?: Maybe<Scalars["Float"]>;
  distributionYield?: Maybe<Scalars["Float"]>;
  dividendYield?: Maybe<Scalars["Float"]>;
  /**
   * The duration of a security calculated using an option-based model that accounts for embedded options. This
   * measure indicates how cash flows change when interest rates change.
   */
  duration?: Maybe<Scalars["Float"]>;
  /**
   * The duration of a security calculated using an option-based model that accounts for embedded options. This
   * measure indicates how cash flows change when interest rates change.
   */
  effectiveDuration?: Maybe<Scalars["Float"]>;
  /**
   * The difference between the yield on a bond and yield on Treasury Bonds of the same maturity, expressed in
   * basis points
   */
  gSpread?: Maybe<Scalars["Float"]>;
  /** A measure of a security's extra return over the risk-free return after accounting for any embedded options */
  optionAdjustedSpread?: Maybe<Scalars["Float"]>;
  recoveryRate?: Maybe<Scalars["Float"]>;
  secYield?: Maybe<Scalars["Float"]>;
  /** Analysis source */
  source?: Maybe<Scalars["String"]>;
  /**
   * Duration with respect to a change in the option adjusted spread. The calculation is identical to
   * option-adjusted duration except that the option-adjusted spread is shifted rather than the term structure.
   */
  spreadDuration?: Maybe<Scalars["Float"]>;
  standaloneRisk?: Maybe<Scalars["Float"]>;
  /**
   * The average life, computed using cash-flow assumptions that represent expected outcome. For mortgage-backed
   * securities, prepayment speeds are applied. For corporates and governments, this incorporates the worst
   * sinking fund and call, and the best put.
   */
  yearsToMaturity?: Maybe<Scalars["Float"]>;
  /** Yield to maturity adjusted for the value of embedded options */
  yield?: Maybe<Scalars["Float"]>;
  /** Yield to next call */
  yieldToCall?: Maybe<Scalars["Float"]>;
  /** Yield to contractual maturity */
  yieldToMaturity?: Maybe<Scalars["Float"]>;
  /**
   * The yield on the bond calculated using the cash flow assumptions described in the definition of
   * yearsToMaturity
   */
  yieldToWorst?: Maybe<Scalars["Float"]>;
  /**
   * The constant spread in basis points that will make the price equal to the present value of the cash flows
   * when added to each relevant point of the yield curve
   */
  zSpread?: Maybe<Scalars["Float"]>;
};
/** Bond object, which include Corp/Muni/Sovereign etc. */
export type Bond4Input = {
  accruedInterest?: Maybe<Scalars["Float"]>;
  /** Indicates if the bond is active */
  active?: Maybe<Scalars["Boolean"]>;
  /** Current outstanding amount expressed in the currency of denomination */
  amountOutstanding?: Maybe<Scalars["Float"]>;
  /** Current outstanding amount date */
  amountOutstandingDate?: Maybe<Scalars["String"]>;
  /**
   * A flag indicating that the security pays equal amounts on each payment date. Each such payment consists of
   * a decreasing interest amount and an increasing principal amount
   */
  annuity?: Maybe<Scalars["Boolean"]>;
  /** Description representing the asset status */
  assetStatus?: Maybe<Scalars["String"]>;
  /** Call type for callable bonds */
  callType?: Maybe<Scalars["String"]>;
  /** Indicates if the bond is callable */
  callable?: Maybe<Scalars["Boolean"]>;
  /** Type of allocation of municipal bond proceeds */
  capType?: Maybe<Scalars["String"]>;
  classifications?: Maybe<ClassificationsInput>;
  /** Bond price excluding accrued interest */
  cleanPrice?: Maybe<Scalars["Float"]>;
  /** Indicates if the bond has a clean-up call */
  cleanUpCallable?: Maybe<Scalars["Boolean"]>;
  /** Indicates if the bond is convertible */
  convertible?: Maybe<Scalars["Boolean"]>;
  /**
   * Code representing the country in which the security was issued.
   * This is usually, the country of residence of the issuer. For Global
   * bonds the Country of Issue is determined by the country of the
   * currency_cd, for Eurobonds it is always 'EU'.
   */
  countryOfIssue?: Maybe<Scalars["String"]>;
  /** Description representing the coupon type */
  couponClass?: Maybe<Scalars["String"]>;
  couponResetHistory?: Maybe<Array<Maybe<CouponResetPeriodInput>>>;
  /**
   * list of coupone period, where each of the coupone period
   * can contain complex logic for coupon calculation
   */
  couponSchedule?: Maybe<Array<Maybe<CouponPeriodInput>>>;
  /** Coupon type */
  couponType?: Maybe<Scalars["String"]>;
  /**
   * Indicates if the bond is a covered bond. Covered bonds are debt securities issued by a bank or mortgage
   * institution and collateralised against a pool of assets that, in case of failure of the issuer, can cover
   * claims at any point of time.
   */
  covered?: Maybe<Scalars["Boolean"]>;
  /** Creation information */
  creationUnit?: Maybe<Scalars["String"]>;
  /** Credit enhancements including guarantor information for principal and interest payments */
  creditEnhancement?: Maybe<CreditEnhancementInput>;
  /** current coupon of the bond */
  currentCoupon?: Maybe<Scalars["Float"]>;
  /** Date from which interest on the bond begins accruing. */
  datedDate?: Maybe<Scalars["String"]>;
  /**
   * Day count convention.
   *
   * The rules for each day count are listed below. More than one rule may take effect. They are applied in
   * order, and if a date is changed in one rule the changed value is used in the following rules. Where Date1
   * is mentioned, it can be decomposed as Date1 = (D1,M1,Y1), with the same principle applied to Date2, etc.
   *
   * * 30U/360 - If (Date2 is end of the month) and (Date1 is the last day of February) and (Date2 is the last
   *   day of February), then change D2 to 30. If (Date2 is end of the month) and (Date1 is the last day of
   *   February), then change D1 to 30. If D2 is 31 and D1 is 30 or 31, then change D2 to 30. If D1 is 31, then
   *   change D1 to 30. Day Count Fraction = (360*(Y2-Y1)+30*(M2-M1)+D2-D1) / 360
   * * 30/360_ISDA - If D1=31, then change D1 to 30 If D2=31 and D1=30, then change D2 to 30. Day Count
   *   Fraction = (360 * (Y2 - Y1) + 30 * (M2 - M1) + D2 - D1) / 360
   * * A/360 - Day Count Fraction = Days(Date1, Date2) / 360
   * * A/365C - Date3 is the next interest payment date. If the number of days of interest accrual is less than
   *   the actual number of days in the interest period: Day Count Fraction = (Days(Date1, Date2) * Pay
   *   frequency) / 365. If the number of days of interest accrual exceeds 365 / Pay frequency, or 182.5 days for
   *   a semi-annual pay security: Day Count Fraction = 1- (Days(Date2, Date3) * Pay frequency) / 365
   * * A/A_ICMA - Date3 is the previous interest payment date. Date4 is the next interest payment date. Day
   *   Count Fraction = Days(Date1, Date2) / (Days(Date3, Date4) * Pay frequency)
   * * NL/365 - If period between Date1 and Date2 contains 29 February: Day Count Fraction = (Days(Date1,
   *   Date2)-1) / 365 Else: Day Count Fraction = Days(Date1, Date2) / 365
   * * A/A_ISDA - Day Count Fraction = Days(Date1, Date2) / 365
   * * A/365 - Day Count Fraction = (Days not in leap year / 365) + (Days in leap year / 366)
   * * 30E/360_ICMA - If D1 is 31, then change D1 to 30. If D2 is 31, then change D2 to 30. Day Count Fraction
   *   = (360 * (Y2 - Y1) + 30 * (M2 - M1) + D2 - D1) / 360
   * * 30E/360_ISDA - If D1 is last day of the month, then change D1 to 30. If D2 is last day of the month,
   *   then change D2 to 30. Day Count Fraction = (360 * (Y2 - Y1) + 30 * (M2 - M1) + D2 - D1) / 360
   * * A/365L - If payment frequency is annual and 29 February is included in the interest period or if payment
   *   frequency is more frequent than annual and payment date falls in a leap year: Day Count Fraction =
   *   Days(Date1, Date2) / 366 Else: Day Count Fraction = Days(Date1, Date2) / 365
   * * A/A_AFB - If period between Date1 and Date2 contains 29 February: Day Count Fraction =
   *   Days(Date1, Date2) / 366 Else: Day Count Fraction = Days(Date1, Date2) / 365
   * * 30/A - Date3 is the previous interest payment date. Date4 is the next interest payment date. If (Date2
   *   is end of the month) and (Date1 is the last day of February) and (Date2 is the last day of February), then
   *   change D2 to 30. If (Date2 is end of the month) and (Date1 is the last day of February), then change D1
   *   to 30. If D2 is 31 and D1 is 30 or 31, then change D2 to 30. If D1 is 31, then change D1 to 30. Day Count
   *   Fraction = (360 * (Y2 - Y1) + 30 * (M2 - M1) + D2 - D1) / (Days(Date3, Date4) * Pay frequency)
   * * Changeable - Changeable day count convention. Arbitrary/unpredictable changes to the day count can
   *   occur.
   * * Unknown - Unknown day count convention
   * * 30/365G - If D1 is last day of the month, then change D1 to 30. If D2 is last day of the month, then
   *   change D2 to 30. Day Count Fraction = (360 * (Y2 - Y1) + 30 * (M2 - M1) + D2 - D1) / 365
   * * A/364 - Day Count Fraction = Days(Date1, Date2) / 364
   * * NL/360 - If period between Date1 and Date2 contains 29 February: Day Count Fraction = (Days(Date1,
   *   Date2) - 1) / 360 Else: Day Count Fraction = Days(Date1, Date2) / 360
   * * B/252 - Day Count Fraction = Business Days(Date1, Date2) / 252
   */
  dayCount?: Maybe<Scalars["String"]>;
  /** Debt service type */
  debtServiceType?: Maybe<Scalars["String"]>;
  /**
   * A flag indicating whether the security has the option to be legally or economically defeased in the future,
   * as specified in the prospectus. That is, the issuing company has either provided money for all coupon and
   * principal payments to the trustee (economic) or, the bond issuer sets up an irrevocable trust for the profit
   * of the bondholder and is no longer legally bound by the convenants of the issue.
   */
  defeasable?: Maybe<Scalars["Boolean"]>;
  /**
   * The minimum multiples in which a bond can be held in the secondary market above the Minimum
   * Denomination
   */
  denominationIncrement?: Maybe<Scalars["Float"]>;
  /** Bond price including accrued interest */
  dirtyPrice?: Maybe<Scalars["Float"]>;
  dualCurrency?: Maybe<Scalars["Boolean"]>;
  /** Textual description of calendar adjustment methodology */
  exDividendCalendarAdjustment?: Maybe<Scalars["String"]>;
  /**
   * Integer used in conjunction with the ex-dividend calendar code. For example, if the calendar is a
   * "_n_th calendar day of month" value and the ex-dividend date is on the 30th calendar day of the month, 30
   * would show in this field. If the ex-dividend calendar description is a "_n_ calendar day(s) prior" value,
   * then it is an offset from the pay date. For example, 15 means "15 calendar days prior to the pay date."
   */
  exDividendCalendarAdjustmentValue?: Maybe<Scalars["Int"]>;
  exchangeListed?: Maybe<Scalars["Boolean"]>;
  /**
   * Date on which the first coupon payment (either cash, capitalization, PIK or some combination of these) is
   * made. Date is not adjusted for nonbusiness days.
   */
  firstCouponDate?: Maybe<Scalars["String"]>;
  /** Indicates if the bond has a floating rate coupon */
  floating?: Maybe<Scalars["Boolean"]>;
  /**
   * Indicates whether a bond is a green bond. Green bonds are fixed income products where the proceeds are used
   * or earmarked for environmentally beneficial projects. This also includes ESG bonds where the proceeds are
   * used only for environmental projects. Thomson Reuters definition of this field is in line with that of
   * Climate Bond Initiative’s definition.
   */
  green?: Maybe<Scalars["Boolean"]>;
  /**
   * A flag flag indicating whether there is a third party guarantee or, in some rare instances, a self guarantee
   * in effect as to the timely payment of interest and principal applicable to the asset within the guaranteed
   * period terms.
   */
  guaranteed?: Maybe<Scalars["Boolean"]>;
  /** warrants were attached to the bond at issue */
  hasWarrantsAttached?: Maybe<Scalars["Boolean"]>;
  inflationProtected?: Maybe<Scalars["Boolean"]>;
  /**
   * A description of the security itself. For example, bond, note, bill, debenture, preferred stock, warrant, or
   * commercial paper.
   */
  instrumentType?: Maybe<Scalars["String"]>;
  issue?: Maybe<IssueInput>;
  /** The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) currency code for the currency of issue */
  issueCurrency?: Maybe<Scalars["String"]>;
  /**
   * The settlement date for the initial placement of the security, except when a market designates a different
   * issue date.
   */
  issueDate?: Maybe<Scalars["String"]>;
  issuer?: Maybe<Issuer4Input>;
  /**
   * Date on which the last coupon payment (either cash, capitalization, PIK or some combination of these) prior
   * to the expected maturity date or the maturity date, whichever is currently applicable, is made. Date is not
   * adjusted for non-business days.
   */
  lastCouponDate?: Maybe<Scalars["String"]>;
  /** The last date on which this asset was included as a liquid ETF constituent */
  lastLiquidEtfConstituentDate?: Maybe<Scalars["String"]>;
  /** Liquidity criteria */
  liquidityCriteria?: Maybe<BondLiquidityCriteriaInput>;
  marketData?: Maybe<MarketData2Input>;
  /**
   * Date on which the principal amount of the security becomes due
   * and payable, as stated in the terms of the security.
   */
  maturityDate?: Maybe<Scalars["String"]>;
  /** A flag indicating whether the security is a issued under a medium term note program. */
  mediumTermNote?: Maybe<Scalars["Boolean"]>;
  /**
   * The smallest amount in which a bond may be purchased in the secondary market,
   * expressed in face value also known as par value
   */
  minimumDenomination?: Maybe<Scalars["Float"]>;
  /** The nearest call period's end date */
  nearestCallPeriodEndDate?: Maybe<Scalars["String"]>;
  /**
   * The nearest ordinary call period's start date. The nearest call may start before the loading date, as long
   * as the end date occurs afterward.
   */
  nearestCallPeriodStartDate?: Maybe<Scalars["String"]>;
  /** The nearest call's price */
  nearestCallPrice?: Maybe<Scalars["Float"]>;
  /** The date of the next coupon rate change */
  nextResetDate?: Maybe<Scalars["String"]>;
  /** The maximum notice period for the ordinary call */
  ordinaryCallNoticePeriodMaximumAmount?: Maybe<Scalars["Int"]>;
  /** The minimum notice period for the ordinary call */
  ordinaryCallNoticePeriodMinimumAmount?: Maybe<Scalars["Int"]>;
  /** The notice period units for the ordinary call */
  ordinaryCallNoticePeriodUnits?: Maybe<Scalars["String"]>;
  /** The option type for the bond's ordinary call */
  ordinaryCallOptionType?: Maybe<Scalars["String"]>;
  /** Indicates if the bond has an ordinary call option */
  ordinaryCallable?: Maybe<Scalars["Boolean"]>;
  originalAmountIssued?: Maybe<Scalars["Float"]>;
  /** Underlying benchmark */
  originalBenchmark?: Maybe<Scalars["String"]>;
  /**
   * Price at which the public may purchase the offered security from the underwriters, expressed as a percentage
   * of par
   */
  originalIssuePrice?: Maybe<Scalars["Float"]>;
  /** Difference between the yield of the security issued vs pricing security in basis points */
  originalIssueSpread?: Maybe<Scalars["Float"]>;
  originalYieldToMaturity?: Maybe<Scalars["Float"]>;
  /**
   * Identifies the defined par value at the initial issuance of the security, also known as stated or face
   * value, expressed in units of the current currency of denomination and usually updated based on the following
   * criteria:
   *
   * * For convertibles, it is the conversion par value and when in the initial segment with conversion terms
   * * For preferreds, it is the par value
   * * For all other cases and securities, it is the denomination amount
   *
   * Note that the value in the field may be different than the value produced by one of these criteria. Also, if
   * an applicable Denomination Amount is not available to display as the par value, a value may still be updated
   * in the field based on source documentation.
   */
  parValue?: Maybe<Scalars["Float"]>;
  partlyPaid?: Maybe<Scalars["Boolean"]>;
  /**
   * A flag indicating if the security can pay interest/dividends in the form of additional securities or equity
   * instead of, or in addition to, cash. This flag is set to true where the issuer (or borrower) has the
   * obligation to pay interest (or a portion of the interest) in-kind, which is compulsory and is predefined in
   * the terms of the security.
   */
  payableInKind?: Maybe<Scalars["Boolean"]>;
  /** Indicates if the bond is paying coupons & principals and not in default */
  performing?: Maybe<Scalars["Boolean"]>;
  perpetual?: Maybe<Scalars["Boolean"]>;
  /**
   * Price quote convention:
   * * 128THS
   * * 16THS
   * * 256THS
   * * 32NDS
   * * 320THS
   * * 64THS
   * * 8THS
   * * DECIMAL
   * * PRICE
   * * SPREAD
   * * UPFRONT
   */
  priceQuoteConvention?: Maybe<Scalars["String"]>;
  /** A description of whether a security is quoted in currency per unit or points of 100% */
  priceQuoteMethod?: Maybe<Scalars["String"]>;
  /** Textual description of rounding method */
  priceQuoteRoundingMethod?: Maybe<Scalars["String"]>;
  /**
   * The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the currency in which the principal is paid
   * in the current principal period
   */
  principalCurrency?: Maybe<Scalars["String"]>;
  /**
   * If the issuer's offering documentation (e.g., prospectus or offering memorandum) includes a statement to the
   * effect that the security will be offered and sold in reliance upon Rule 144A of the U.S. Securities Act of
   * 1933. It allows privately placed securities to be traded among qualified institutional buyers.
   */
  private144a?: Maybe<Scalars["Boolean"]>;
  privatePlacement?: Maybe<Scalars["Boolean"]>;
  /** Indicates if the bond is puttable */
  puttable?: Maybe<Scalars["Boolean"]>;
  /** True for bonds quoted at their full (dirty) price and false for those quoted at their clean price */
  quotedDirty?: Maybe<Scalars["Boolean"]>;
  /** Issue ratings */
  ratings?: Maybe<IssueRatingsInput>;
  /** Textual description of calendar adjustment methodology */
  recordDateCalendarAdjustment?: Maybe<Scalars["String"]>;
  recordDateCalendarAdjustmentValue?: Maybe<Scalars["Int"]>;
  /**
   * The redemption value of the asset at maturity. Generally this is par value (100.00) but may be different
   * for certain securities.
   */
  redemptionValue?: Maybe<Scalars["Float"]>;
  /** Rich/Cheap information */
  richCheap?: Maybe<RichCheapInput>;
  /** Description of the level of seniority, secured/unsecured status, preferred, non-preferred, etc. */
  seniority?: Maybe<Scalars["String"]>;
  /**
   * The series number, for example, 1998-F. This column may also be
   * used for hybrid securities, for example, MIPPS. For the Danish
   * market, the series number and Capital Centre information will be
   * available.
   */
  series?: Maybe<Scalars["String"]>;
  /** Sinking/Amortization Indicator */
  sinkingOrAmortizing?: Maybe<Scalars["Boolean"]>;
  /**
   * Further detail on the classification of sovereign securities:
   * * Agency
   * * Central Bank
   * * Government/Treasury
   * * Municipal
   * * Provincial
   */
  sovereignClass?: Maybe<Scalars["String"]>;
  /** The state of issuance for a US-based municipal security */
  state?: Maybe<Scalars["String"]>;
  /** Indicates whether the security is tax exempt by the state where it was issued */
  stateTaxExempt?: Maybe<Scalars["Boolean"]>;
  /**
   * Indicates if the bond is straight. A straight bond is a bullet bond that pays a fixed interest rate through
   * its life and has no embedded options.
   */
  straight?: Maybe<Scalars["Boolean"]>;
  /**
   * A flag indicating whether the coupon payments may be "stripped" from the offered security. Stripping is the
   * process of separating a bond into its principal component and interest components. These components are then
   * sold separately.
   */
  strippable?: Maybe<Scalars["Boolean"]>;
  /** Indicates whether the interest of a tax-exempt security is subject to the US Alternative Minimum Tax (AMT) */
  subjectToAlternativeMinimumTax?: Maybe<Scalars["Boolean"]>;
  /**
   * The total amount issued. For Treasuries, this represents amt_iss_public plus an amount that is kept by the
   * Federal Reserve for their own investing or made available to foreign banks and investors. For strips, this
   * represents the portion held in a stripped form. Expressed in thousands.
   */
  totalAmountIssued?: Maybe<Scalars["Float"]>;
  /** Indicates whether a security is exempt from federal taxes in the United States */
  unitedStatesTaxExempt?: Maybe<Scalars["Boolean"]>;
  /** Description of the registrant's planned use of its proceeds from the offering */
  useOfProceeds?: Maybe<Scalars["String"]>;
  /**
   * The tax deducted at source on interest or dividends to be paid by the investor. This is most often given
   * for international government issues.
   */
  withholdingTax?: Maybe<Scalars["Float"]>;
};
export type ClassificationsInput = {
  barclaysLevel1?: Maybe<Scalars["String"]>;
  barclaysLevel2?: Maybe<Scalars["String"]>;
  barclaysLevel3?: Maybe<Scalars["String"]>;
  barclaysLevel4?: Maybe<Scalars["String"]>;
  bondhouse?: Maybe<Scalars["String"]>;
  datastreamSubtype?: Maybe<Scalars["String"]>;
  datastreamType?: Maybe<Scalars["String"]>;
  gics?: Maybe<Scalars["String"]>;
};
export type CouponResetPeriodInput = {
  effectiveDate: Scalars["String"];
  rate?: Maybe<Scalars["Float"]>;
  rateNonAnnual?: Maybe<Scalars["Float"]>;
};
export type CouponPeriodInput = {
  /**
   * The maximum coupon rate to which the security can be reset associated with the particular leg number.
   * Note: This field is only applicable when couponClass = FLT, RNG, or TBP.
   */
  cap?: Maybe<Scalars["Float"]>;
  /**
   * Description representing the coupon type:
   * * DSC - Discount/Zero Coupon
   * * FIX - Fixed Coupon
   * * FLT - Floating Coupon
   * * RNG - Range Coupon
   * * STR - Stripped Coupon
   * * TBP - To Be Priced Coupon
   * * UNK - Unknown
   * * VAR - Variable Coupon
   */
  couponClass?: Maybe<Scalars["String"]>;
  /**
   * Details of the formula used to calculate the new rate of
   * interest.
   * * Formula Structure -->
   * multiplier|index|lookback|spread
   * * Multiplier Typically --> one.
   * * Index --> See the RIGs database or base_index_cds for description. Indices with pricing are in
   * RIGs. Others can be found in the base_index_cds table in the GCodes
   * Database Viewer.
   * * Lookback --> Identifies rate determination date (for example, 2 business days prior to reset date).
   * * Spread --> 0.10 = 10 basis points.
   * ***Example 1.00*#US3MLIB<2d+0.10
   * Note: This field is only applicable when couponClass =
   * FLT, RNG, or TBP.***
   */
  couponFormula?: Maybe<Scalars["JSON"]>;
  /** Human-friendly description of rounding method */
  couponRateRoundingMethod?: Maybe<Scalars["String"]>;
  /** Day count convention */
  dayCount?: Maybe<Scalars["String"]>;
  effectiveDate: Scalars["String"];
  floor?: Maybe<Scalars["Float"]>;
  indexDescription?: Maybe<Scalars["String"]>;
  /** Human-friendly name for holiday calendar */
  indexHolidayCalendar?: Maybe<Scalars["String"]>;
  numberCutOffDays?: Maybe<Scalars["Int"]>;
  /** Business day rule, often known as the business day adjustment */
  paymentBusinessDayRule?: Maybe<Scalars["String"]>;
  /** Human-friendly description of calendar adjustment methodology */
  paymentCalendarAdjustment?: Maybe<Scalars["String"]>;
  paymentCalendarAdjustmentValue?: Maybe<Scalars["Int"]>;
  /** The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) currency code for the payment currency */
  paymentCurrency?: Maybe<Scalars["String"]>;
  /** Human-friendly description of frequency */
  paymentFrequency?: Maybe<Scalars["String"]>;
  /** Human-friendly name for holiday calendar */
  paymentHolidayCalendar?: Maybe<Scalars["String"]>;
  /** Business day rule, often known as the business day adjustment */
  resetBusinessDayRule?: Maybe<Scalars["String"]>;
  /** Human-friendly description of calendar adjustment methodology */
  resetCalendarAdjustment?: Maybe<Scalars["String"]>;
  resetCalendarAdjustmentValue?: Maybe<Scalars["Int"]>;
  /** Human-friendly description of frequency */
  resetFrequency?: Maybe<Scalars["String"]>;
  /** Human-friendly name for holiday calendar */
  resetHolidayCalendar?: Maybe<Scalars["String"]>;
};
/** Credit enhancements including guarantor information for principal and interest payments */
export type CreditEnhancementInput = {
  /** The type of credit enhancement. */
  additionalCreditType?: Maybe<Scalars["String"]>;
  /**
   * A y/n flag indicating if a borrower or guarantor defaults on one of its loans, it will constitute a default
   * on all of its borrowing.
   */
  crossDefaultForGuarantor?: Maybe<Scalars["Boolean"]>;
  /** Date on which the enhancement credit becomes effective. */
  enhancementEffectiveDate?: Maybe<Scalars["String"]>;
  /** Last date for which the credit enhancement is effective. */
  enhancementEndDate?: Maybe<Scalars["String"]>;
  /** A number to differentiate between multiple guarantors on the same effective date. */
  enhancementLegNumber?: Maybe<Scalars["Float"]>;
  /** A flag indicating whether money is held in escrow for this security. */
  escrowAccount?: Maybe<Scalars["Boolean"]>;
  /**
   * A flag indicating the contractually specified events that allow lenders to demand immediate repayment of a
   * debt.
   */
  eventsofDefaultforGuarantor?: Maybe<Scalars["Boolean"]>;
  /** Whether a bond is explicitly guaranteed or another type of guarantee is applicable. */
  guarantee?: Maybe<Scalars["String"]>;
  /**
   * This is the permanent identifier of the entity(s) guaranteeing the payment of principal and/or interest of
   * the security.
   */
  guarantorPermId?: Maybe<Scalars["String"]>;
  /** Type of guarantor program */
  guarantorProgram?: Maybe<Scalars["String"]>;
  /**
   * A flag indicating whether the respective guarantee is provided via insurance, purchased by either the issuer
   * or the holder of the security with an insurer.
   */
  insurance?: Maybe<Scalars["Boolean"]>;
  /** The insurer insuring interest of the security either at issuance or in the secondary market. */
  interestCollateralType?: Maybe<Scalars["String"]>;
  /** Expiration date for the letter of credit. */
  letterOfCreditExpirationDate?: Maybe<Scalars["String"]>;
  /**
   * A flag indicating the Guarantor would not issue another bond of the same type in the future that will have
   * higher priority in case the Guarantor defaults.
   */
  negativePledgeForGuarantor?: Maybe<Scalars["Boolean"]>;
  /** A flag indicating if the Guarantor has any other covenants. */
  otherCovenantsForGuarantor?: Maybe<Scalars["Boolean"]>;
  /** Specifies how much of the interest is collateralized or guaranteed for each corresponding guarantor. */
  percentInterestCollateralized?: Maybe<Scalars["Float"]>;
  /** Specifies how much of the principal is collateralized or guaranteed for each corresponding guarantor. */
  percentPrincipalCollateralized?: Maybe<Scalars["Float"]>;
  /** The insurer insuring principal of the security either at issuance or in the secondary market. */
  principalCollateralType?: Maybe<Scalars["String"]>;
};
export type IssueInput = {
  /**
   * Indicates whether all or a portion of this issue remains outstanding, possessing an amount outstanding
   * greater than zero
   */
  active?: Maybe<Scalars["Boolean"]>;
  /** Unique identifier for an issue */
  id: Scalars["String"];
  /** Description of the issue */
  issueDescription?: Maybe<Scalars["String"]>;
  /** Unique Refinitiv system-generated identifier for a muni issue */
  issueIdentifier?: Maybe<Scalars["String"]>;
  /** Unique Refinitiv system-generated identifier for a party */
  issuerIdentifier?: Maybe<Scalars["String"]>;
  /** Offering date */
  offeringDate?: Maybe<Scalars["String"]>;
  /** Offering description */
  offeringDescription?: Maybe<Scalars["String"]>;
  /**
   * If the issuer's offering documentation (e.g., prospectus or offering memorandum) includes a statement to the
   * effect that the security will be offered and sold in reliance upon Rule 144A of the U.S. Securities Act of
   * 1933. It allows privately placed securities to be traded among qualified institutional buyers.
   */
  private144a?: Maybe<Scalars["Boolean"]>;
  /** Indicates whether the issue is a private placement */
  privatePlacement?: Maybe<Scalars["Boolean"]>;
  /** The total par value (or discounted value) of debt initially issued as per the offering statement */
  totalProgramAmount?: Maybe<Scalars["Float"]>;
};
export type Issuer4Input = {
  /** Whether the issuer still exists as a company */
  active?: Maybe<Scalars["Boolean"]>;
  /** Whether the issuer is currently in bankruptcy */
  bankrupt?: Maybe<Scalars["Boolean"]>;
  /** Country of domicile for the issuer's principal executive offices */
  country?: Maybe<Scalars["String"]>;
  /** A physical address */
  headquartersAddress?: Maybe<Address2Input>;
  /** Unique identifier for an issuer */
  id: Scalars["String"];
  /**
   * Unique identifier for the immediate parent of the issuer, defined as a company that owns or controls greater
   * than 50% of the voting stock
   */
  immediateParentId?: Maybe<Scalars["String"]>;
  /** Current legal name of the issuer */
  legalName?: Maybe<Scalars["String"]>;
  /** Long name of the issuer */
  longName?: Maybe<Scalars["String"]>;
  /** Issuer ratings */
  ratings?: Maybe<IssuerRatingsInput>;
  /** A physical address */
  registeredAddress?: Maybe<Address2Input>;
  /** Industry of the issuer */
  sector?: Maybe<Scalars["String"]>;
  /** Short name of the issuer */
  shortName?: Maybe<Scalars["String"]>;
  /** Description of the sovereign entity */
  sovereignClass?: Maybe<Scalars["String"]>;
  /** Within sector, further breakdown of the industry of the issuer */
  subsector?: Maybe<Scalars["String"]>;
  /**
   * Ticker code used to identify the common stock when available, else common acronym of company if known, else
   * matched to immediate parent, else unique value based on name for standalone organizations.
   */
  ticker?: Maybe<Scalars["String"]>;
  /**
   * Unique identifier for the ultimate parent of the issuer, defined as a company that owns or controls greater
   * than 50% of the voting stock at the highest level of the issuer tree
   */
  ultimateParentId?: Maybe<Scalars["String"]>;
  /**
   * URL of the legal entity's corporate website or company homepage. For funds, this is the URL of the fund
   * family.
   */
  url?: Maybe<Scalars["String"]>;
};
/** A physical address */
export type Address2Input = {
  /** City/town as published in valid source documents */
  cityOrTown?: Maybe<Scalars["String"]>;
  /** Code indicating the ISO country */
  country?: Maybe<Scalars["String"]>;
  /** Region within the country as defined by the postal authority/agency */
  stateOrCountyOrRegion?: Maybe<Scalars["String"]>;
  /** Building name, floor, suite or level */
  street1?: Maybe<Scalars["String"]>;
  /** Street number and name or post office box */
  street2?: Maybe<Scalars["String"]>;
  /** Additional address information required by the postal authority/agency, such as zone or urbanization */
  street3?: Maybe<Scalars["String"]>;
  /** Designated postal code/zip code as assigned by the postal authority/agency */
  zipCode?: Maybe<Scalars["String"]>;
};
/** Issuer ratings */
export type IssuerRatingsInput = {
  /** Rating */
  snpLongTerm?: Maybe<Rating3Input>;
  /** Rating */
  snpSeniorSecured?: Maybe<Rating3Input>;
  /** Rating */
  snpSeniorUnsecured?: Maybe<Rating3Input>;
  /** Rating */
  snpShortTerm?: Maybe<Rating3Input>;
  /** Rating */
  snpSubordinated?: Maybe<Rating3Input>;
};
/** Rating */
export type Rating3Input = {
  /** Effective date */
  effectiveDate: Scalars["String"];
  /** S&P equivalent rank */
  rank: Scalars["Float"];
  /** Rating */
  rating: Scalars["String"];
};
/** Liquidity criteria */
export type BondLiquidityCriteriaInput = {
  /** Has quote from four days ago */
  hasAdequateQuotes?: Maybe<Scalars["Boolean"]>;
  /** Date liquidity criteria was last evaluated */
  liquidityCriteriaDate: Scalars["String"];
};
export type MarketData2Input = {
  ejv?: Maybe<MarketQuoteInput>;
};
export type MarketQuoteInput = {
  /** Accrued interest */
  accruedInterest?: Maybe<Scalars["Float"]>;
  /** The ask price, yield, or discount of the security */
  askPrice?: Maybe<Scalars["Float"]>;
  /** The ask yield of the security */
  askYield?: Maybe<Scalars["Float"]>;
  /** The difference between the bond's native bid yield to maturity and the interest rate swap */
  assetSwapSpread?: Maybe<Scalars["Float"]>;
  /** The difference between the bond's yield and the yield of its benchmark */
  benchmarkSpread?: Maybe<Scalars["Float"]>;
  /** The bid price, yield, or discount of the security */
  bidPrice?: Maybe<Scalars["Float"]>;
  /** The bid yield of the security */
  bidYield?: Maybe<Scalars["Float"]>;
  /**
   * The corporate bond equivalent cash flow yield using the cash-flow assumptions described as follows: the
   * average life of the security, calculated with the cash-flow assumption that corporate and government
   * securities trade to maturity
   */
  cbeYieldToMaturity?: Maybe<Scalars["Float"]>;
  /**
   * The corporate bond equivalent cash-flow yield using the cash-flow assumptions described as follows: the
   * average life, computed using cash-flow assumptions that represent expected outcome.
   */
  cbeYieldToWorst?: Maybe<Scalars["Float"]>;
  /** The exchange contributed market closing price for the security */
  closePrice?: Maybe<Scalars["Float"]>;
  /** The effective date of the price */
  date: Scalars["String"];
  /** The exchange contributed highest market price of the day for the security */
  highPrice?: Maybe<Scalars["Float"]>;
  /** The exchange contributed lowest market price of the day for the security */
  lowPrice?: Maybe<Scalars["Float"]>;
  /** The exchange contributed market open price for the security */
  openPrice?: Maybe<Scalars["Float"]>;
  /** Price following market and vendor conventions */
  price?: Maybe<Scalars["Float"]>;
  /** Pricing vendor or contributor */
  source?: Maybe<Scalars["String"]>;
  /** The difference between the bond’s yield and the LIBOR curve, expressed in basis points */
  swapSpread?: Maybe<Scalars["Float"]>;
  /** The exchange contributed trade volume for the day for the security */
  volume?: Maybe<Scalars["Float"]>;
  /** Yield is calculated using the native yield to maturity convention */
  yieldToMaturity?: Maybe<Scalars["Float"]>;
  /**
   * Yield is calculated based on the native yield to worst formula, after taking all of the bond redemption
   * features into account
   */
  yieldToWorst?: Maybe<Scalars["Float"]>;
  /**
   * The constant spread in basis points that will make the price equal to the present value of the cash flows
   * when added to each relevant point of the yield curve
   */
  zSpread?: Maybe<Scalars["Float"]>;
};
/** Issue ratings */
export type IssueRatingsInput = {
  /** Rating */
  snpLongTerm?: Maybe<Rating3Input>;
  /** Rating */
  snpShortTerm?: Maybe<Rating3Input>;
};
/** Rich/Cheap information */
export type RichCheapInput = {
  effectiveDate: Scalars["String"];
  /** Rich/cheap relative to historical range, bound by 0 (rich) and 100 (cheap) */
  interquartileRange?: Maybe<Scalars["Float"]>;
  /** Rich/cheap in basis points */
  richCheapBps: Scalars["Float"];
};
export type EquityInput = {
  eps?: Maybe<Scalars["Float"]>;
  marketCap?: Maybe<Scalars["Float"]>;
  peRatio?: Maybe<Scalars["Float"]>;
  shareClass?: Maybe<Scalars["String"]>;
  tradeLotRoundSize?: Maybe<Scalars["Float"]>;
  tradeLotSize?: Maybe<Scalars["Float"]>;
};
/** Scores for Environmental, Social, and Governance */
export type EsgScores2Input = {
  /** Environmental score */
  environmental?: Maybe<Scalars["Int"]>;
  /** Governance score */
  governance?: Maybe<Scalars["Int"]>;
  /** Social score */
  social?: Maybe<Scalars["Int"]>;
  timestamp?: Maybe<Scalars["String"]>;
  /** Overall score */
  total?: Maybe<Scalars["Int"]>;
};
export type Fund4Input = {
  /** Fund allocation data */
  allocation?: Maybe<FundAllocationInput>;
  /** Information on whether a fund is supported by Apex. Only applies to mutual funds. */
  apexSupport?: Maybe<ApexSupportInput>;
  /** Description representing the asset status */
  assetStatus?: Maybe<Scalars["String"]>;
  benchmark?: Maybe<Scalars["String"]>;
  /** BondHouse classification */
  classification?: Maybe<Scalars["String"]>;
  /** Fund distributions */
  distributions?: Maybe<FundDistributionsInput>;
  fees?: Maybe<FeesInput>;
  focus?: Maybe<FocusInput>;
  /** fund type, should matches assetType on the parent level */
  fundType?: Maybe<Scalars["String"]>;
  inceptionDate?: Maybe<Scalars["String"]>;
  /** Indicates whether the share class is institutional only */
  institutional?: Maybe<Scalars["Boolean"]>;
  /** The fund management company */
  managementCompany?: Maybe<Scalars["String"]>;
  /**
   * The market mid price. Certain types of funds, including closed-end funds (CEFs) and exchange-traded funds
   * (ETFs) may trade at a premium or discount.
   */
  midPrice?: Maybe<Scalars["Float"]>;
  /**
   * The net asset value (NAV) per share, equivalent to the market value of the underlying securities divided by
   * the number of shares outstanding
   */
  netAssetValuePerShare?: Maybe<Scalars["Float"]>;
  /** Fund net assets */
  netAssets?: Maybe<Scalars["Float"]>;
  /** Date of the latest fund assets value */
  netAssetsDate?: Maybe<Scalars["String"]>;
  /** The date of the latest price and NAV/share figures */
  priceDate?: Maybe<Scalars["String"]>;
  regulatoryStructure?: Maybe<Scalars["String"]>;
  replicationStrategy?: Maybe<Scalars["String"]>;
  /** Lipper Leaders scores */
  scores?: Maybe<Scores6Input>;
  /** Specifies the minimum number of shares that can be purchased, as regulated by an exchange */
  tradeLotSize?: Maybe<Scalars["Float"]>;
  /** Fund yields */
  yields?: Maybe<FundYieldsInput>;
};
/** Fund allocation data */
export type FundAllocationInput = {
  /** Asset allocation data */
  asset?: Maybe<AssetAllocationInput>;
  /** Currency allocation data */
  currency?: Maybe<Scalars["JSON"]>;
  /** Debt type allocation */
  debtType?: Maybe<DebtTypeAllocation2Input>;
  /** Country allocation data */
  equityCountry?: Maybe<Scalars["JSON"]>;
  /** Region allocation data */
  equityRegion?: Maybe<RegionAllocationInput>;
  /** Country allocation data */
  fixedIncomeCountry?: Maybe<Scalars["JSON"]>;
  /** Region allocation data */
  fixedIncomeRegion?: Maybe<RegionAllocationInput>;
  /** GICS sub-industry allocation data */
  gicsSubIndustry?: Maybe<GicsSubIndustryAllocationInput>;
  /** Maturity allocation data */
  maturity?: Maybe<MaturityAllocationInput>;
  /** Rating allocation data */
  rating?: Maybe<RatingAllocation2Input>;
  /** Region allocation data */
  region?: Maybe<RegionAllocationInput>;
  /** TRBC Industry allocation data */
  trbcIndustry?: Maybe<TrbcIndustryAllocationInput>;
};
/** Asset allocation data */
export type AssetAllocationInput = {
  /** Allocation to the cash sector */
  cash?: Maybe<Scalars["Float"]>;
  /** Allocation to the equity sector */
  equity?: Maybe<Scalars["Float"]>;
  /** Allocation to the fixed income sector */
  fixedIncome?: Maybe<Scalars["Float"]>;
  /** Allocation to other or unknown sectors */
  other?: Maybe<Scalars["Float"]>;
};
/** GICS sub-industry allocation data */
export type GicsSubIndustryAllocationInput = {
  /** Allocation to the communication services sub-industry */
  communicationServices?: Maybe<Scalars["Float"]>;
  /** Allocation to the consumer discretionary sub-industry */
  consumerDiscretionary?: Maybe<Scalars["Float"]>;
  /** Allocation to the consumer staples sub-industry */
  consumerStaples?: Maybe<Scalars["Float"]>;
  /** Allocation to the energy sub-industry */
  energy?: Maybe<Scalars["Float"]>;
  /** Allocation to the financials sub-industry */
  financials?: Maybe<Scalars["Float"]>;
  /** Allocation to the health care sub-industry */
  healthCare?: Maybe<Scalars["Float"]>;
  /** Allocation to the industrials sub-industry */
  industrials?: Maybe<Scalars["Float"]>;
  /** Allocation to the information technology sub-industry */
  informationTechnology?: Maybe<Scalars["Float"]>;
  /** Allocation to the materials sub-industry */
  materials?: Maybe<Scalars["Float"]>;
  /** Allocation to other or unknown sub-industries */
  other?: Maybe<Scalars["Float"]>;
  /** Allocation to the real estate sub-industry */
  realEstate?: Maybe<Scalars["Float"]>;
  /** Allocation to the utilities sub-industry */
  utilities?: Maybe<Scalars["Float"]>;
};
/** TRBC Industry allocation data */
export type TrbcIndustryAllocationInput = {
  /** Allocation to the basic materials sector */
  basicMaterials?: Maybe<Scalars["Float"]>;
  /** Allocation to the consumer cyclicals sector */
  consumerCyclicals?: Maybe<Scalars["Float"]>;
  /** Allocation to the consumer non-cyclicals sector */
  consumerNonCyclicals?: Maybe<Scalars["Float"]>;
  /** Allocation to the energy sector */
  energy?: Maybe<Scalars["Float"]>;
  /** Allocation to the financials sector */
  financials?: Maybe<Scalars["Float"]>;
  /** Allocation to the healthcare sector */
  healthcare?: Maybe<Scalars["Float"]>;
  /** Allocation to the industrials sector */
  industrials?: Maybe<Scalars["Float"]>;
  /** Allocation to the other sector */
  other?: Maybe<Scalars["Float"]>;
  /** Allocation to the technology sector */
  technology?: Maybe<Scalars["Float"]>;
  /** Allocation to the telecommunications services sector */
  telecommunicationsServices?: Maybe<Scalars["Float"]>;
  /** Allocation to the utilities sector */
  utilities?: Maybe<Scalars["Float"]>;
};
/** Information on whether a fund is supported by Apex. Only applies to mutual funds. */
export type ApexSupportInput = {
  /** Date that Apex trade support was evaluated */
  supportDate: Scalars["String"];
  /** Whether the fund is supported for trading on Apex */
  supported: Scalars["Boolean"];
};
/** Fund distributions */
export type FundDistributionsInput = {
  capitalGain?: Maybe<CapitalGainDistributionsInput>;
  foreignTaxCredit?: Maybe<ForeignTaxCreditDistributionsInput>;
  income?: Maybe<IncomeDistributionsInput>;
  repaymentCategory?: Maybe<RepaymentCategoryDistributionsInput>;
};
export type CapitalGainDistributionsInput = {
  capitalGain?: Maybe<FundDistributionInput>;
  collectibles?: Maybe<FundDistributionInput>;
  longTermCapitalGain?: Maybe<FundDistributionInput>;
  mediumTermCapitalGain?: Maybe<FundDistributionInput>;
  nonQualifiedShortTermCapitalGain?: Maybe<FundDistributionInput>;
  qualifiedShortTermCapitalGain?: Maybe<FundDistributionInput>;
  returnOfCapital?: Maybe<FundDistributionInput>;
  shortTermCapitalGain?: Maybe<FundDistributionInput>;
  superLongTermCapitalGain?: Maybe<FundDistributionInput>;
};
export type FundDistributionInput = {
  /** Accounting date */
  accountingDate?: Maybe<Scalars["String"]>;
  /** Ex date */
  exDate?: Maybe<Scalars["String"]>;
  /** Distribution amount */
  exValue?: Maybe<Scalars["Float"]>;
  /** Payment date */
  paymentDate?: Maybe<Scalars["String"]>;
  /** Record date */
  recordDate?: Maybe<Scalars["String"]>;
  /** Reinvestment date */
  reinvestmentDate?: Maybe<Scalars["String"]>;
  /** Reinvestment type */
  reinvestmentType?: Maybe<Scalars["String"]>;
  /** Reinvestment value */
  reinvestmentValue?: Maybe<Scalars["Float"]>;
  /** Taxable interest income */
  taxableInterestIncome?: Maybe<Scalars["Float"]>;
};
export type ForeignTaxCreditDistributionsInput = {
  foreignTaxCredit?: Maybe<FundDistributionInput>;
  nonQualifiedForeignTaxPaid?: Maybe<FundDistributionInput>;
  qualifiedForeignTaxPaid?: Maybe<FundDistributionInput>;
};
export type IncomeDistributionsInput = {
  aggregateAccrual?: Maybe<FundDistributionInput>;
  exemptIncome?: Maybe<FundDistributionInput>;
  incomeDividend?: Maybe<FundDistributionInput>;
  interestIncome?: Maybe<FundDistributionInput>;
  nonQualifiedIncomeDividend?: Maybe<FundDistributionInput>;
  qualifiedIncomeDividend?: Maybe<FundDistributionInput>;
};
export type RepaymentCategoryDistributionsInput = {
  bonusIssue?: Maybe<FundDistributionInput>;
  factor?: Maybe<FundDistributionInput>;
  repayment?: Maybe<FundDistributionInput>;
  rightsIssue?: Maybe<FundDistributionInput>;
  split?: Maybe<FundDistributionInput>;
};
export type FeesInput = {
  backLoad?: Maybe<Scalars["Float"]>;
  frontLoad?: Maybe<Scalars["Float"]>;
  fundExpenseRatio?: Maybe<Scalars["Float"]>;
  managementFee?: Maybe<Scalars["Float"]>;
  marketing12b1Fee?: Maybe<Scalars["Float"]>;
  performanceFee?: Maybe<Scalars["Float"]>;
};
export type FocusInput = {
  /**
   * Broad asset class that the fund intends to invest in. An asset class is a grouping of investments that
   * exhibit similar characteristics and are subject to the
   * same laws and regulations. This focus is interpreted from the fund's prospectus.
   */
  assetClassFocus?: Maybe<Scalars["String"]>;
  geoFocus?: Maybe<Scalars["String"]>;
};
/** Lipper Leaders scores */
export type Scores6Input = {
  /** Fund scores organized by the time period of measurement */
  consistentReturn?: Maybe<ScoreInput>;
  /** Fund scores organized by the time period of measurement */
  expense?: Maybe<ScoreInput>;
  /** Fund scores organized by the time period of measurement */
  preservation?: Maybe<ScoreInput>;
  /** Fund scores organized by the time period of measurement */
  taxEfficiency?: Maybe<ScoreInput>;
  /** Fund scores organized by the time period of measurement */
  totalReturn?: Maybe<ScoreInput>;
};
/** Fund scores organized by the time period of measurement */
export type ScoreInput = {
  /** The 5-year score */
  fiveYear?: Maybe<Scalars["Int"]>;
  /** The overall score */
  overall?: Maybe<Scalars["Int"]>;
  /** The 10-year score */
  tenYear?: Maybe<Scalars["Int"]>;
  /** The 3-year score */
  threeYear?: Maybe<Scalars["Int"]>;
};
/** Fund yields */
export type FundYieldsInput = {
  /** Daily SEC yield */
  dailySecYield?: Maybe<Scalars["Float"]>;
  /** Daily SEC yield date */
  dailySecYieldDate?: Maybe<Scalars["String"]>;
  /** Distribution yield */
  distributionYield?: Maybe<Scalars["Float"]>;
  /** Dividend yield */
  dividendYield?: Maybe<Scalars["Float"]>;
  /** Lipper distribution yield */
  lipperDistributionYield?: Maybe<Scalars["Float"]>;
  /** Lipper projected yield */
  projectedYield?: Maybe<Scalars["Float"]>;
  /** SEC yield */
  secYield?: Maybe<Scalars["Float"]>;
  /** Simple yield at the beginning of the measured period */
  simpleYieldBegin?: Maybe<Scalars["Float"]>;
  /** Simple yield at the end of the measured period */
  simpleYieldEnd?: Maybe<Scalars["Float"]>;
  /** 30-day yield */
  thirtyDayYield?: Maybe<Scalars["Float"]>;
  /** Trailing twelve-month yield */
  trailingTwelveMonthYield?: Maybe<Scalars["Float"]>;
};
/**
 * asset/security identifier:
 * * cusip - 9 alpha-numeric characters that includes the check digit, first 6 alpha numeric characters refers to
 *   the issuer
 * * isin - 12 alpha-numeric characters, first 2 characters contains country code, last character is a check
 *   digit
 * * sedol - 7 alpha-numeric characters, single security can have multiple SEDOL, handle later
 * * primaryTicker - primary exchange ticker
 * * cins - 9 alpha-numeric characters managed by cusip
 * * bbGlobal - 12 alpha-numeric characters managed by Bloomberg
 * The first 2 characters are upper-case consonants (including "Y"),
 * the third character is the upper-case "G",
 * characters 4 -11 are any upper-case consonant (including "Y")
 * or integer between 0 and 9, and the last character is a check-digit.
 * An identifier is assigned to instruments of all asset classes,
 * is unique to an individual instrument and once issued will not change for an instrument.
 * * refinitivAssetId - 18 alpha-numeric characters asset id, example sourced from DSFI
 * * refinitivIssuePermId - unique Refinitiv system-generated PermID for an asset
 * * refinitivLipperId - id to specify a share class of a fund and also
 * * refinitivLipperPermId - lipper permanent id
 * * valoren - nine digits for official Swiss Identification number
 * * cik - SEC's central index key for corporations/individuals
 * * apex - APEX identifier
 */
export type IdentifiersInput = {
  /** APEX identifier */
  apex?: Maybe<Scalars["String"]>;
  bbGlobal?: Maybe<Scalars["String"]>;
  cik?: Maybe<Scalars["String"]>;
  cins?: Maybe<Scalars["String"]>;
  cusip?: Maybe<Scalars["String"]>;
  isin?: Maybe<Scalars["String"]>;
  primaryTicker?: Maybe<Scalars["String"]>;
  /** Unique Refinitiv system-generated identifier for a security */
  refinitivAssetId?: Maybe<Scalars["String"]>;
  /** Unique Refinitiv system-generated PermID for an asset */
  refinitivIssuePermId?: Maybe<Scalars["String"]>;
  refinitivLipperId?: Maybe<Scalars["String"]>;
  /**
   * The share classes' parent id if the fund is a share class within a larger
   * fund structure / sub-fund
   */
  refinitivLipperParentId?: Maybe<Scalars["String"]>;
  refinitivLipperPermId?: Maybe<Scalars["String"]>;
  sedol?: Maybe<Scalars["String"]>;
  valoren?: Maybe<Scalars["String"]>;
};
export type LegalEntityInput = {
  /** The issuer legal entity identification */
  issuingLegalEntityId?: Maybe<Scalars["String"]>;
  ultimateObligor?: Maybe<Scalars["String"]>;
  ultimateObligorId?: Maybe<Scalars["String"]>;
  ultimateParent?: Maybe<Scalars["String"]>;
  ultimateParentId?: Maybe<Scalars["String"]>;
  ultimateParentTickerExchange?: Maybe<Scalars["String"]>;
};
export type PriceQuoteInput = {
  /** Accrued interest */
  accruedInterest?: Maybe<Scalars["Float"]>;
  /** The ask price, yield, or discount of the security */
  askPrice?: Maybe<Scalars["Float"]>;
  /** The ask yield of the security */
  askYield?: Maybe<Scalars["Float"]>;
  /** The difference between the bond's native bid yield to maturity and the interest rate swap */
  assetSwapSpread?: Maybe<Scalars["Float"]>;
  /** The difference between the bond's yield and the yield of its benchmark */
  benchmarkSpread?: Maybe<Scalars["Float"]>;
  /** The bid price, yield, or discount of the security */
  bidPrice?: Maybe<Scalars["Float"]>;
  /** The bid yield of the security */
  bidYield?: Maybe<Scalars["Float"]>;
  /**
   * The corporate bond equivalent cash flow yield using the cash-flow assumptions described as follows: the
   * average life of the security, calculated with the cash-flow assumption that corporate and government
   * securities trade to maturity
   */
  cbeYieldToMaturity?: Maybe<Scalars["Float"]>;
  /**
   * The corporate bond equivalent cash-flow yield using the cash-flow assumptions described as follows: the
   * average life, computed using cash-flow assumptions that represent expected outcome.
   */
  cbeYieldToWorst?: Maybe<Scalars["Float"]>;
  /** The exchange contributed market closing price for the security */
  closePrice?: Maybe<Scalars["Float"]>;
  /** The effective date of the price */
  date: Scalars["String"];
  /** The exchange contributed highest market price of the day for the security */
  highPrice?: Maybe<Scalars["Float"]>;
  /** The exchange contributed lowest market price of the day for the security */
  lowPrice?: Maybe<Scalars["Float"]>;
  /** The exchange contributed market open price for the security */
  openPrice?: Maybe<Scalars["Float"]>;
  /** Price following market and vendor conventions */
  price?: Maybe<Scalars["Float"]>;
  /** Pricing vendor or contributor */
  source: Scalars["String"];
  /** The difference between the bond’s yield and the LIBOR curve, expressed in basis points */
  swapSpread?: Maybe<Scalars["Float"]>;
  /** The exchange contributed trade volume for the day for the security */
  volume?: Maybe<Scalars["Float"]>;
  /** Yield is calculated using the native yield to maturity convention */
  yieldToMaturity?: Maybe<Scalars["Float"]>;
  /**
   * Yield is calculated based on the native yield to worst formula, after taking all of the bond redemption
   * features into account
   */
  yieldToWorst?: Maybe<Scalars["Float"]>;
  /**
   * The constant spread in basis points that will make the price equal to the present value of the cash flows
   * when added to each relevant point of the yield curve
   */
  zSpread?: Maybe<Scalars["Float"]>;
};
/** BondHouse's proprietary scores */
export type RoverScoresInput = {
  /**
   * BondHouse's proprietary measure for the attractiveness of an asset, which is a function of its expected
   * return and risk
   */
  attractiveness?: Maybe<Scalars["Float"]>;
  /**
   * BondHouse's proprietary credit score, based on a number of inputs to evaluate the credit-worthiness of a
   * bond
   */
  credit?: Maybe<Scalars["Float"]>;
  /**
   * (Funds only) BondHouse's proprietary efficiency score, measuring the effectiveness of fund management in
   * managing taxes, expenses, etc.
   */
  efficiency?: Maybe<Scalars["Float"]>;
  /** BondHouse's proprietary liquidity score, which measures the investor's ability to transact in an asset */
  liquidity?: Maybe<Scalars["Float"]>;
  /** BondHouse's proprietary risk measure based on our risk model */
  risk?: Maybe<Scalars["Float"]>;
  /** The date and time that this score was calculated */
  timestamp?: Maybe<Scalars["String"]>;
};
/** Universe inclusion information */
export type UniversesInput = {
  /** Custom universe inclusion flags. This is for internal purposes and will be removed from any asset responses. */
  custom?: Maybe<Scalars["JSON"]>;
  /** Whether the asset is included in the general universe */
  general?: Maybe<Scalars["Boolean"]>;
  /** Whether the asset is included in the liquid universe */
  liquid?: Maybe<Scalars["Boolean"]>;
  /** Whether the asset is included in the search universe */
  search?: Maybe<Scalars["Boolean"]>;
  /** Universe inclusion evaluation date */
  timestamp?: Maybe<Scalars["String"]>;
};
export interface UpdateAssetTimeSeriesResponse {
  __typename?: "UpdateAssetTimeSeriesResponse";
  updated: Scalars["Boolean"];
}
export type UpdateAssetTimeSeriesRequestInput = {
  assetTimeSeries: Array<Maybe<AssetTimeSeriesDataInput>>;
};
/**
 * The persisted entity backing asset time-series. Representing all field values
 * for a single asset at a single time
 */
export type AssetTimeSeriesDataInput = {
  /** BondHouse unique identifier for an asset. This is not a public identifier. */
  assetId: Scalars["String"];
  fields: Scalars["JSON"];
  timestamp: Scalars["String"];
};
export interface UpdateInstitutionResponse {
  __typename?: "UpdateInstitutionResponse";
  institution: Institution;
}
export type UpdateInstitutionRequestInput = {
  metadata?: Maybe<Scalars["JSON"]>;
  name?: Maybe<Scalars["String"]>;
  primaryContact?: Maybe<PrimaryContactInput>;
};
export type PrimaryContactInput = {
  email: Scalars["String"];
  first: Scalars["String"];
  last: Scalars["String"];
};
export interface UpdateApiCallRecordResponse {
  __typename?: "UpdateApiCallRecordResponse";
  apiCallRecord: ApiCallRecord;
}
export type UpdateApiCallRecordRequestInput = {
  action?: Maybe<Action>;
  responseStatus?: Maybe<Scalars["String"]>;
  url?: Maybe<Scalars["String"]>;
};
export interface UpdateInventoryResponse {
  __typename?: "UpdateInventoryResponse";
  unmappedConstituents: Array<Maybe<Constituent>>;
}
export interface Constituent {
  __typename?: "Constituent";
  assetId?: Maybe<Scalars["String"]>;
  cusip?: Maybe<Scalars["String"]>;
  isin?: Maybe<Scalars["String"]>;
  ticker?: Maybe<Scalars["String"]>;
}
export type UpdateInventoryRequestInput = {
  /** Client inventory that requires resolution of public identifiers */
  inventory: UnmappedInventoryInput;
};
/** Client inventory that requires resolution of public identifiers */
export type UnmappedInventoryInput = {
  /** Name of the app the inventory applies to */
  app: App2;
  constituents: Array<Maybe<ConstituentInput>>;
  /** Unique inventory identifier */
  id: Scalars["String"];
  /** The inventory's user-friendly name */
  name: Scalars["String"];
};
export type ConstituentInput = {
  assetId?: Maybe<Scalars["String"]>;
  cusip?: Maybe<Scalars["String"]>;
  isin?: Maybe<Scalars["String"]>;
  ticker?: Maybe<Scalars["String"]>;
};
export interface UpdateUserMappingResponse {
  __typename?: "UpdateUserMappingResponse";
  userMapping: UserMapping;
}
export type UpdateUserMappingRequestInput = {
  email?: Maybe<Scalars["String"]>;
  userId?: Maybe<Scalars["String"]>;
  userType?: Maybe<Scalars["String"]>;
};
export interface UpdateInvestorResponse {
  __typename?: "UpdateInvestorResponse";
  investor: Investor;
}
export type UpdateInvestorRequestInput = {
  investorInfo: UpdateInvestorInfoInput;
  metadata?: Maybe<Scalars["JSON"]>;
};
export type UpdateInvestorInfoInput = {
  /** Only required for organizations */
  beneficialOwnersAndOfficers?: Maybe<BeneficialOwnersAndOfficersInput>;
  /** Agreement for corporations. Required for organizations with entityType of C_CORPORATION or S_CORPORATION */
  cashAccountAgreement?: Maybe<CashAccountAgreementInput>;
  contactInformation?: Maybe<ContactInformationInput>;
  disclosures?: Maybe<Disclosures2Input>;
  /** Only required for individuals */
  employment?: Maybe<Employment2Input>;
  entityDueDiligence?: Maybe<EntityDueDiligenceInput>;
  /** Only required for organizations */
  exemptLegalCustomer?: Maybe<ExemptLegalCustomerInput>;
  familyName?: Maybe<Scalars["String"]>;
  givenName?: Maybe<Scalars["String"]>;
  /** Only required for individuals */
  investmentProfile?: Maybe<InvestmentProfile2Input>;
  /**
   * Agreement for LLCs. Required for organizations with entityType of LIMITED_LIABILITY_COMPANY_C_CORPORATION,
   * LIMITED_LIABILITY_COMPANY_S_CORPORATION, or LIMITED_LIABILITY_COMPANY_PARTNERSHIP
   */
  llcAccountAgreement?: Maybe<LlcAccountAgreementInput>;
  /** Only required for organizations */
  organization?: Maybe<OrganizationInput>;
  organizationName?: Maybe<Scalars["String"]>;
  suitabilityProfile?: Maybe<SuitabilityProfileInput>;
  title?: Maybe<Scalars["String"]>;
  trustedContactInfo?: Maybe<TrustedContactInfoInput>;
  /** Only required for organizations */
  wnineTaxForm?: Maybe<WNineTaxFormInput>;
};
/** Only required for organizations */
export type BeneficialOwnersAndOfficersInput = {
  beneficialOwners: Array<Maybe<BeneficialOwners3Input>>;
  businessClassification: BusinessClassification;
  officers: Array<Maybe<Officers2Input>>;
};
export type BeneficialOwners3Input = {
  address: AddressInput;
  dateOfBirth: Scalars["String"];
  /** Either ssn or other identification number is required (i.e. passport) */
  identificationNumber?: Maybe<Scalars["String"]>;
  name: NameInput;
  /** Either ssn or other identification number is required (i.e. passport) */
  socialSecurityNumber?: Maybe<Scalars["String"]>;
};
export type AddressInput = {
  city: Scalars["String"];
  country: Scalars["String"];
  postalCode?: Maybe<Scalars["String"]>;
  state?: Maybe<Scalars["String"]>;
  /** Upto 3 rows */
  streetAddress: Array<Maybe<Scalars["String"]>>;
};
export type NameInput = {
  familyName: Scalars["String"];
  givenName: Scalars["String"];
  legalName: Scalars["String"];
};
export type Officers2Input = {
  address: AddressInput;
  dateOfBirth: Scalars["String"];
  /** Either ssn or other identification number is required (i.e. passport) */
  identificationNumber?: Maybe<Scalars["String"]>;
  name: NameInput;
  /** Either ssn or other identification number is required (i.e. passport) */
  socialSecurityNumber?: Maybe<Scalars["String"]>;
};
/** Agreement for corporations. Required for organizations with entityType of C_CORPORATION or S_CORPORATION */
export type CashAccountAgreementInput = {
  /** upload articles of incorporation and place the document Id string here */
  articlesOfIncorporationSnapId: Scalars["String"];
  authorizedOfficerName: Scalars["String"];
  authorizedOfficerTitle: Scalars["String"];
  /** organizationName can be placed here */
  corporationName: Scalars["String"];
  isAuthorizedOfficerESigned: Scalars["Boolean"];
  isSecretaryESigned: Scalars["Boolean"];
  secretaryName: Scalars["String"];
  /** 2 character state abbreviation */
  stateOfIncorporation: Scalars["String"];
};
export type ContactInformationInput = {
  city: Scalars["String"];
  country: Scalars["String"];
  /** The organization form only takes one email so only the first will be taken */
  emailAddresses: Array<Maybe<Scalars["String"]>>;
  phone: Scalars["String"];
  phoneType: PhoneType;
  postalCode: Scalars["String"];
  state: Scalars["String"];
  streetAddress: Scalars["String"];
};
export type Disclosures2Input = {
  /**
   * The form Ids of the 407 approval form. Required if isAffiliatedExchangeOrFINRA is true AND investorType is
   * INDIVIDUAL. Not required for organizations.
   */
  affiliatedApproval?: Maybe<Array<Maybe<Scalars["String"]>>>;
  /** required if isControlPerson is true */
  companySymbols?: Maybe<Array<Maybe<Scalars["String"]>>>;
  /** required if isAffiliatedExchangeOrFINRA is true */
  firmName?: Maybe<Scalars["String"]>;
  interestedParties?: Maybe<Array<Maybe<InterestedParties4Input>>>;
  isAffiliatedExchangeOrFINRA: Scalars["Boolean"];
  isControlPerson: Scalars["Boolean"];
  isPoliticallyExposed: Scalars["Boolean"];
  politicalExposureDetail?: Maybe<PoliticalExposureDetail2Input>;
};
/** required if isAffiliatedExchangeOrFINRA is true AND employer requires notices. Cannot be updated. */
export type InterestedParties4Input = {
  mailingAddress: InterestedPartyAddressInput;
  /** This only applies to individual accounts */
  name: InterestedPartyNameInput;
};
export type InterestedPartyAddressInput = {
  city: Scalars["String"];
  country: Scalars["String"];
  postalCode: Scalars["String"];
  state: Scalars["String"];
  streetAddress: Array<Maybe<Scalars["String"]>>;
};
export type PoliticalExposureDetail2Input = {
  /** required if isPoliticallyExposed is true */
  immediateFamily: Array<Maybe<Scalars["String"]>>;
  /** required if isPoliticallyExposed is true */
  politicalOrganization: Scalars["String"];
};
/** Only required for individuals */
export type Employment2Input = {
  /** required if employed is true */
  employer?: Maybe<Scalars["String"]>;
  employmentStatus: EmploymentStatus;
  /** required if employed is true */
  positionEmployed?: Maybe<Scalars["String"]>;
};
export type EntityDueDiligenceInput = {
  accountActivity: AccountActivityInput;
  accountInformation: DueDiligenceAccountInformation2Input;
  additionalAccounts: AdditionalAccountsInput;
  assessedRiskRating: AssessedRiskRating;
  entityOrAssociatesHaveNegativeNews: Scalars["Boolean"];
  politicallyExposedPersons: PoliticallyExposedPersonsInput;
};
export type AccountActivityInput = {
  expectedWithdrawalFrequency: ExpectedWithdrawalFrequency;
  initialDepositAmount: Scalars["Float"];
  initialDepositSource: Scalars["String"];
  primaryEntityAccountActivity: PrimaryEntityAccountActivity;
  willTransactForeignBonds: Scalars["Boolean"];
  willTransactLowPricedSecurities: Scalars["Boolean"];
};
export type DueDiligenceAccountInformation2Input = {
  accountName: Scalars["String"];
  businessLocations: Array<Maybe<Scalars["String"]>>;
  countryOfIncorporation: Scalars["String"];
  hasRelatedAccounts: Scalars["Boolean"];
  relatedAccountList?: Maybe<Array<Maybe<RelatedAccounts2Input>>>;
};
export type RelatedAccounts2Input = {
  accountNumber: Scalars["String"];
  entityName: Scalars["String"];
};
export type AdditionalAccountsInput = {
  confirmEntityDoesNotIssueBearerShares: Scalars["Boolean"];
  institutionNames: Array<Maybe<Scalars["String"]>>;
  primaryOngoingFundingSource: PrimaryOngoingFundingSource;
  primaryOngoingFundingSourceClarification?: Maybe<Scalars["String"]>;
  scopeOfBusiness: ScopeOfBusiness;
  scopeOfBusinessClarification?: Maybe<Scalars["String"]>;
};
export type PoliticallyExposedPersonsInput = {
  isPoliticallyExposed: Scalars["Boolean"];
  politicalOfficials?: Maybe<Array<Maybe<PoliticalOfficials3Input>>>;
};
export type PoliticalOfficials3Input = {
  immediateFamily: Array<Maybe<Scalars["String"]>>;
  legalName: Scalars["String"];
  politicalOrganization: Scalars["String"];
  politicalTitle: Scalars["String"];
  role: Scalars["String"];
};
/** Only required for organizations */
export type ExemptLegalCustomerInput = {
  /** required if customerExempt is true */
  exemption?: Maybe<CustomerExemption>;
  isExemptLegalCustomer: Scalars["Boolean"];
};
/** Only required for individuals */
export type InvestmentProfile2Input = {
  annualIncomeUSD: Amount;
  /** a number between 0 and 100 */
  federalTaxBracketPercent: Scalars["Float"];
  investmentExperience: InvestmentExperience;
  investmentObjective: InvestmentObjective2;
  liquidNetWorthUSD: Worth;
  riskTolerance: RiskTolerance2;
  totalNetWorthUSD: Worth;
};
/**
 * Agreement for LLCs. Required for organizations with entityType of LIMITED_LIABILITY_COMPANY_C_CORPORATION,
 * LIMITED_LIABILITY_COMPANY_S_CORPORATION, or LIMITED_LIABILITY_COMPANY_PARTNERSHIP
 */
export type LlcAccountAgreementInput = {
  authorizedSignerName: Scalars["String"];
  authorizedSignerTitle: Scalars["String"];
  /** organizationName can be placed here */
  entityName: Scalars["String"];
  isAuthorizedSignerESigned: Scalars["Boolean"];
  membersAndManagers: Array<Maybe<MembersAndManagers2Input>>;
  /** date format YYYY-MM-DD */
  resolutionAdoptionDate: Scalars["String"];
  /** 2 character state abbreviation */
  stateOfOrigin: Scalars["String"];
};
/** Only required for organizations */
export type OrganizationInput = {
  entityType: EntityType;
  /** required if isForeignBank is TRUE */
  foreignBankUSAgent?: Maybe<Scalars["String"]>;
  isForeignBank: Scalars["Boolean"];
  isMaintainedForForeignFinancialInstitution: Scalars["Boolean"];
  uploadedWNineForm?: Maybe<Scalars["String"]>;
  usEntity: Scalars["Boolean"];
};
export type TrustedContactInfoInput = {
  trustedContact: TrustedContact;
  /** required if trustedContact is INCLUDE */
  trustedContactPerson?: Maybe<TrustedContactPersonInput>;
};
/** required if trustedContact is INCLUDE */
export type TrustedContactPersonInput = {
  emailAddress: Scalars["String"];
  familyName: Scalars["String"];
  givenName: Scalars["String"];
};
/** Only required for organizations */
export type WNineTaxFormInput = {
  exemptPayeeCode?: Maybe<Scalars["String"]>;
  exemptionFromFatca?: Maybe<Scalars["String"]>;
};
export interface UpdateTransferStatusResponse {
  __typename?: "UpdateTransferStatusResponse";
  transfer: Transfer3;
}
export type UpdateTransferStatusRequestInput = {
  status?: Maybe<TransferStatus3>;
};
export interface UpdateIssueResponse {
  __typename?: "UpdateIssueResponse";
  created: Scalars["Boolean"];
  updated: Scalars["Boolean"];
}
export type UpdateIssueRequestInput = {
  issue: IssueInput;
};
export interface UpdateIssuerResponse {
  __typename?: "UpdateIssuerResponse";
  created: Scalars["Boolean"];
  updated: Scalars["Boolean"];
}
export type UpdateIssuerRequestInput = {
  issuer: Issuer4Input;
};
export interface CancelTrafixOrderResponse {
  __typename?: "CancelTrafixOrderResponse";
  message: Scalars["String"];
  timestamp: Scalars["String"];
}
export interface UpdatePortfolioResponse {
  __typename?: "UpdatePortfolioResponse";
  portfolio: Portfolio3;
}
export type UpdatePortfolioRequestInput = {
  app?: Maybe<AppType2>;
  currency?: Maybe<Scalars["String"]>;
  description?: Maybe<Scalars["String"]>;
  metadata?: Maybe<Scalars["JSON"]>;
  name?: Maybe<Scalars["String"]>;
  status?: Maybe<PortfolioStatus>;
};
export interface UpdateOrderResponse {
  __typename?: "UpdateOrderResponse";
  order: Order2;
}
export type UpdateOrderRequestInput = {
  assetId?: Maybe<Scalars["String"]>;
  assignedTo?: Maybe<Scalars["String"]>;
  /** Comment for the order */
  comment?: Maybe<Scalars["String"]>;
  filled?: Maybe<Scalars["Float"]>;
  metadata?: Maybe<Scalars["JSON"]>;
  positionId?: Maybe<Scalars["String"]>;
  quantity?: Maybe<Scalars["Float"]>;
  status?: Maybe<OrderStatus>;
};
export interface CancelOrderResponse {
  __typename?: "CancelOrderResponse";
  canceled: Scalars["Boolean"];
}
export type CancelOrderRequestInput = {
  reason?: Maybe<Scalars["String"]>;
};
export interface CancelTradeResponse {
  __typename?: "CancelTradeResponse";
  cancelled?: Maybe<Scalars["Boolean"]>;
}
export type CancelTradeRequestInput = {
  reason?: Maybe<Scalars["String"]>;
};
export interface UpdateUserResponse {
  __typename?: "UpdateUserResponse";
  user: User;
}
/** Note that passwords are updated directly with Auth0 */
export type UpdateUserRequestInput = {
  email?: Maybe<Scalars["String"]>;
  first?: Maybe<Scalars["String"]>;
  last?: Maybe<Scalars["String"]>;
  metadata?: Maybe<Scalars["JSON"]>;
  phone?: Maybe<Scalars["String"]>;
  userType?: Maybe<UserType>;
};
export interface BlockUserResponse {
  __typename?: "BlockUserResponse";
  user: User;
}
export type BlockUserRequestInput = {
  block: Scalars["Boolean"];
};
export interface ResendUserInviteResponse {
  __typename?: "ResendUserInviteResponse";
  invitedUser: InvitedUser;
}
export interface CreateApexAchRelationshipResponse {
  __typename?: "CreateApexACHRelationshipResponse";
  apexAchRelationship: ApexAchRelationship;
}
export type CreateApexAchRelationshipRequestInput = {
  linkedBankAccountId: Scalars["String"];
};
export interface CreateCorporateAgreementFormResponse {
  __typename?: "CreateCorporateAgreementFormResponse";
  /** Object for Entity Corporate Cash Account Agreement Form at Apex */
  corporateAgreementForm: CorporateAgreementForm;
}
/** Object for Entity Corporate Cash Account Agreement Form at Apex */
export type CreateCorporateAgreementFormRequestInput = {
  articlesOfIncorporationSnapId: Scalars["String"];
  authorizedOfficerName: Scalars["String"];
  authorizedOfficerTitle: Scalars["String"];
  corporationName: Scalars["String"];
  formId: Scalars["String"];
  isAuthorizedOfficerESigned: Scalars["Boolean"];
  isSecretaryESigned: Scalars["Boolean"];
  secretaryName: Scalars["String"];
  stateOfIncorporation: Scalars["String"];
};
export interface CreateEntityAccountFormResponse {
  __typename?: "CreateEntityAccountFormResponse";
  /** Object for Entity New Direct Account RIA Form at Apex */
  entityAccountForm: EntityAccountForm;
}
/** Object for Entity New Direct Account RIA Form at Apex */
export type CreateEntityAccountFormRequestInput = {
  accountInformation?: Maybe<EntityAccountInformationInput>;
  accountNature?: Maybe<AccountNature>;
  additionalAccountInformation?: Maybe<EntityAdditionalAccountInformationInput>;
  authorizedSigner: EntityAuthorizedSignerInput;
  beneficialOwners?: Maybe<Array<Maybe<OwnerOrOfficerInput>>>;
  /** A - Institutional Customer, E - Employee Account, I - Individual Customer */
  catAccountholderType?: Maybe<CatAccountHolderType>;
  customerType: EntityCustomerType;
  entityOfficers?: Maybe<Array<Maybe<OwnerOrOfficerInput>>>;
  exemptLegalCustomer?: Maybe<EntityAccountExemptLegalCustomerInput>;
  formId: Scalars["String"];
  isApplicantESigned?: Maybe<Scalars["Boolean"]>;
  issuerDirectCommunicationCode?: Maybe<IssuerDirectCommunicationCode>;
  legalEntityIdentifier?: Maybe<Scalars["String"]>;
  serviceProfile?: Maybe<EntityAccountProfileInput>;
  suitabilityProfile?: Maybe<SuitabilityProfileInput>;
  w9Certification?: Maybe<W9CertificationInput>;
};
export interface CreateEntityDueDiligenceFormResponse {
  __typename?: "CreateEntityDueDiligenceFormResponse";
  /** Object for Entity Due Diligence Form at Apex */
  entityDueDiligenceForm: EntityDueDiligenceForm;
}
/** Object for Entity Due Diligence Form at Apex */
export type CreateEntityDueDiligenceFormRequestInput = {
  accountActivity?: Maybe<DueDiligenceAccountActivityInput>;
  accountInformation?: Maybe<DueDiligenceAccountInformationInput>;
  additionalAccounts?: Maybe<DueDiligenceAdditionalAccountsInput>;
  assessedRiskRating?: Maybe<AssessedRiskRating>;
  entityOrAssociatesHaveNegativeNews?: Maybe<Scalars["Boolean"]>;
  /** If entityOrAssociatesHaveNegativeNews is YES */
  entityOrAssociatesNegativeNewsInfo?: Maybe<Scalars["String"]>;
  formId: Scalars["String"];
  politicallyExposedPersons?: Maybe<DueDiligencePoliticallyExposedPersonsInput>;
  principalApproverName?: Maybe<Scalars["String"]>;
  registeredRepresentativeApproverName?: Maybe<Scalars["String"]>;
};
export interface CreateIndividualAccountFormResponse {
  __typename?: "CreateIndividualAccountFormResponse";
  /** Object for New Direct Account Form at Apex */
  individualAccountForm: IndividualAccountForm;
}
export type CreateIndividualAccountFormRequestInput = {
  applicantSignature?: Maybe<ApplicantSignatureInput>;
  /** A - Institutional Customer, E - Employee Account, I - Individual Customer */
  catAccountholderType?: Maybe<CatAccountHolderType>;
  contact?: Maybe<ContactInput>;
  customerType: CustomerType;
  disclosures?: Maybe<DisclosuresInput>;
  employment?: Maybe<EmploymentInput>;
  formId: Scalars["String"];
  identity: CreateIdentityInput;
  investmentProfile?: Maybe<InvestmentProfileInput>;
  serviceProfile?: Maybe<IndividualServiceProfileInput>;
  suitabilityProfile?: Maybe<SuitabilityProfileInput>;
  trustedContact?: Maybe<TrustedContactEnum>;
};
export type CreateIdentityInput = {
  birthCountry?: Maybe<Scalars["String"]>;
  citizenshipCountry: Scalars["String"];
  /** Example 2003-04-23 */
  dateOfBirth: Scalars["String"];
  name: PrimaryNameInput;
  permanentResident?: Maybe<YesNoEnum>;
  /** Example 123-45-6789 */
  socialSecurityNumber: Scalars["String"];
  /** Required when a valid visaType is selected. Example 2003-04-23 */
  visaExpirationDate?: Maybe<Scalars["String"]>;
  visaType?: Maybe<VisaType>;
};
export interface CreateInterestedPartyFormResponse {
  __typename?: "CreateInterestedPartyFormResponse";
  /** Object for Interested Party Request Form at Apex */
  interestedPartyForm: InterestedPartyForm;
}
/** Object for Interested Party Request Form at Apex */
export type CreateInterestedPartyFormRequestInput = {
  formId: Scalars["String"];
  /** Array of interested parties. */
  interestedParties: Array<Maybe<InterestedParties2Input>>;
};
export interface CreateLlcAgreementFormResponse {
  __typename?: "CreateLlcAgreementFormResponse";
  /** Object for Entity LLC Agreement Form at Apex */
  llcAgreementForm: LlcAgreementForm;
}
/** Object for Entity LLC Agreement Form at Apex */
export type CreateLlcAgreementFormRequestInput = {
  articlesOfIncorporationOrOperatingAgreementSnapId: Scalars["String"];
  authorizedSignerName: Scalars["String"];
  authorizedSignerTitle: Scalars["String"];
  entityName: Scalars["String"];
  formId: Scalars["String"];
  isAuthorizedSignerESigned: Scalars["Boolean"];
  membersAndManagers: Array<Maybe<MembersAndManagers2Input>>;
  /** example 2014-10-21 */
  resolutionAdoptionDate: Scalars["String"];
  stateOfOrigin: Scalars["String"];
};
export interface CreateTrustedContactFormResponse {
  __typename?: "CreateTrustedContactFormResponse";
  /** Object for Trusted Contact Form at Apex */
  trustedContactForm: TrustedContactForm;
}
/** Object for Trusted Contact Form at Apex */
export type CreateTrustedContactFormRequestInput = {
  emailAddress: Scalars["String"];
  familyName: Scalars["String"];
  formId: Scalars["String"];
  givenName: Scalars["String"];
  mailingAddress?: Maybe<PhysicalAddressInput>;
  phoneNumber?: Maybe<PhoneNumberInput>;
};
export interface LinkBankAccountDirectlyResponse {
  __typename?: "LinkBankAccountDirectlyResponse";
  linkedBankAccount: LinkedBankAccount2;
}
export interface LinkedBankAccount2 {
  __typename?: "LinkedBankAccount2";
  accountNumber: Scalars["String"];
  accountType: AccountType2;
  approvalMethod: ApprovalMethod;
  bankName: Scalars["String"];
  createdAt: Scalars["String"];
  linkedBankAccountId: Scalars["String"];
  mask: Scalars["String"];
  metadata?: Maybe<Scalars["JSON"]>;
  owner: Scalars["String"];
  status: LinkedBankAccountStatus2;
  updatedAt: Scalars["String"];
}
export enum ApprovalMethod {
  Quovo = "QUOVO",
  Plaid = "PLAID",
  Synapse = "SYNAPSE",
  Finicity = "FINICITY",
  Sophotron = "SOPHOTRON",
  MicroDeposit = "MICRO_DEPOSIT",
  UseExisting = "USE_EXISTING"
}
export enum LinkedBankAccountStatus2 {
  Active = "ACTIVE",
  Inactive = "INACTIVE",
  Pending = "PENDING",
  Removed = "REMOVED"
}
export type LinkBankAccountDirectlyRequestInput = {
  accountType: AccountType2;
  approvalMethod: ApprovalMethod;
  bankAccountNumber: Scalars["String"];
  bankName: Scalars["String"];
  linkedBankAccountId: Scalars["String"];
  owner: Scalars["String"];
  routing: Scalars["String"];
  wireRouting?: Maybe<Scalars["String"]>;
};
export interface LinkBankAccountPlaidResponse {
  __typename?: "LinkBankAccountPlaidResponse";
  linkedBankAccount: LinkedBankAccount2;
}
export type LinkBankAccountPlaidRequestInput = {
  accountId: Scalars["String"];
  accountType: AccountType2;
  /** bankName */
  institution: Scalars["String"];
  linkSessionId: Scalars["String"];
  linkedBankAccountId: Scalars["String"];
  mask: Scalars["String"];
  owner: Scalars["String"];
  publicToken: Scalars["String"];
};
export interface CreateApexTransferResponse2 {
  __typename?: "CreateApexTransferResponse2";
  apexTransfer: ApexTransfer;
}
export type AccountTransfersInput = {
  transfer: Transfer2Input;
};
export type Transfer2Input = {
  amount: Scalars["Float"];
  currency: Scalars["String"];
  direction: TransferDirection;
  investorId: Scalars["String"];
  linkedBankAccountId: Scalars["String"];
  metadata?: Maybe<Scalars["JSON"]>;
  transferId: Scalars["String"];
  transferMethod?: Maybe<TransferMethod>;
};
export interface CreateApexAccountResponse {
  __typename?: "CreateApexAccountResponse";
  apexAccount: ApexAccount;
}
export type CreateApexAccountRequestInput = {
  accountRequestId: Scalars["String"];
  accountType: AccountType;
  formList: Array<Maybe<FormList2Input>>;
};
export interface SetAchRelationshipResponse {
  __typename?: "SetAchRelationshipResponse";
  achRelationship: AchRelationship;
}
export type SetAchRelationshipRequestInput = {
  linkedBankAccountId: Scalars["String"];
};
export interface CreateApexTransferResponse {
  __typename?: "CreateApexTransferResponse";
  transfer: Transfer;
}
export type CreateApexTransferRequestInput = {
  accountNumber: Scalars["String"];
  amount: Scalars["Float"];
  direction: TransferDirection;
  linkedBankAccountId: Scalars["String"];
  transferId: Scalars["String"];
  transferMethod: TransferMethod;
};
export interface InternalTransferResponse {
  __typename?: "InternalTransferResponse";
  transfer: Transfer4;
}
export type InternalTransferRequestInput = {
  amount: Scalars["Float"];
  counterparty: Counterparty;
  counterpartyId: Scalars["String"];
  direction: TransferDirection;
  /** idempotent UUID provided by requestor */
  transferId: Scalars["String"];
};
export interface GetAnalysesResponse {
  __typename?: "GetAnalysesResponse";
  analyses: Array<Maybe<Analysis2>>;
}
export type GetAnalysesRequestInput = {
  analysisIds: Array<Maybe<Scalars["String"]>>;
};
export interface AnalyzeAssetResponse {
  __typename?: "AnalyzeAssetResponse";
  analytics: Array<Maybe<Analytic>>;
}
/** Represents a single analytic computed by Asset Analyzer */
export interface Analytic {
  __typename?: "Analytic";
  field: AnalyticField;
  value: Scalars["Float"];
}
export enum AnalyticField {
  Accruedinterest = "ACCRUEDINTEREST",
  Yield = "YIELD",
  Duration = "DURATION",
  Effectiveduration = "EFFECTIVEDURATION",
  Convexity = "CONVEXITY",
  Defaultadjustedyield = "DEFAULTADJUSTEDYIELD",
  Yieldtomaturity = "YIELDTOMATURITY",
  Yieldtoworst = "YIELDTOWORST",
  Yieldtocall = "YIELDTOCALL",
  Currentyield = "CURRENTYIELD",
  Creditbeta = "CREDITBETA",
  Zspread = "ZSPREAD",
  Gspread = "GSPREAD",
  Optionadjustedspread = "OPTIONADJUSTEDSPREAD",
  Recoveryrate = "RECOVERYRATE",
  Standalonerisk = "STANDALONERISK",
  Dividendyield = "DIVIDENDYIELD",
  Secyield = "SECYIELD",
  Yearstomaturity = "YEARSTOMATURITY"
}
/** Analyze an asset by passing the whole asset object */
export type AnalyzeAssetRequestInput = {
  asset: AssetInput;
};
export type AssetInput = {
  /** Allocation data */
  allocation?: Maybe<Allocation2Input>;
  analytics?: Maybe<AnalyticsInput>;
  /** Asset sub-types specific to an instrument type */
  assetSubtype?: Maybe<AssetSubtype>;
  /** Higher level asset and instrument types, for instance bonds, stocks, funds, etc. */
  assetType?: Maybe<AssetType>;
  /** Bond object, which include Corp/Muni/Sovereign etc. */
  bond?: Maybe<BondInput>;
  country?: Maybe<Scalars["String"]>;
  createdAt?: Maybe<Scalars["String"]>;
  createdBy?: Maybe<Scalars["String"]>;
  /** The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) currency code for the asset currency */
  currency?: Maybe<Scalars["String"]>;
  description?: Maybe<Scalars["String"]>;
  /** BondHouse generated readable id that should have 1 to 1 relationship with the generated ID */
  displayId?: Maybe<Scalars["String"]>;
  equity?: Maybe<EquityInput>;
  /** Scores for Environmental, Social, and Governance */
  esgScores?: Maybe<EsgScores2Input>;
  fund?: Maybe<FundInput>;
  /** BondHouse unique identifier for an asset. This is not a public identifier. */
  id: Scalars["String"];
  /**
   * asset/security identifier:
   * * cusip - 9 alpha-numeric characters that includes the check digit, first 6 alpha numeric characters refers to
   *   the issuer
   * * isin - 12 alpha-numeric characters, first 2 characters contains country code, last character is a check
   *   digit
   * * sedol - 7 alpha-numeric characters, single security can have multiple SEDOL, handle later
   * * primaryTicker - primary exchange ticker
   * * cins - 9 alpha-numeric characters managed by cusip
   * * bbGlobal - 12 alpha-numeric characters managed by Bloomberg
   * The first 2 characters are upper-case consonants (including "Y"),
   * the third character is the upper-case "G",
   * characters 4 -11 are any upper-case consonant (including "Y")
   * or integer between 0 and 9, and the last character is a check-digit.
   * An identifier is assigned to instruments of all asset classes,
   * is unique to an individual instrument and once issued will not change for an instrument.
   * * refinitivAssetId - 18 alpha-numeric characters asset id, example sourced from DSFI
   * * refinitivIssuePermId - unique Refinitiv system-generated PermID for an asset
   * * refinitivLipperId - id to specify a share class of a fund and also
   * * refinitivLipperPermId - lipper permanent id
   * * valoren - nine digits for official Swiss Identification number
   * * cik - SEC's central index key for corporations/individuals
   * * apex - APEX identifier
   */
  identifiers?: Maybe<IdentifiersInput>;
  legalEntity?: Maybe<LegalEntityInput>;
  /** Indicates whether there are current bids/offers that makes the asset transactable */
  liquid?: Maybe<Scalars["Boolean"]>;
  market?: Maybe<Scalars["String"]>;
  metadata?: Maybe<Scalars["JSON"]>;
  name?: Maybe<Scalars["String"]>;
  /**
   * BondHouse best price from available pricing sources, quote following market conventions:
   * * Clean price for most bonds
   * * Dirty price for preferred stock
   * * Close-mid for equities
   * * Market price for funds
   */
  price?: Maybe<Scalars["Float"]>;
  priceDate?: Maybe<Scalars["String"]>;
  priceQuotes?: Maybe<Array<Maybe<PriceQuotesListItemInput>>>;
  primaryExchange?: Maybe<Scalars["String"]>;
  primaryExchangeMic?: Maybe<Scalars["String"]>;
  /** Normalized rating */
  rating?: Maybe<Scalars["String"]>;
  /** BondHouse's proprietary scores */
  scores?: Maybe<Scores2Input>;
  /**
   * The common street ticker for a security. For bonds, ticker code used to identify the common stock when
   * available, else common acronym of company if known, else matched to immediate parent, else unique value
   * based on name for standalone organizations.
   */
  ticker?: Maybe<Scalars["String"]>;
  unit?: Maybe<Scalars["String"]>;
  /** Universe inclusion information */
  universes?: Maybe<UniversesInput>;
  updatedAt?: Maybe<Scalars["String"]>;
  updatedBy?: Maybe<Scalars["String"]>;
};
/** Allocation data */
export type Allocation2Input = {
  /** Country allocation data */
  country?: Maybe<Scalars["JSON"]>;
  /** Currency allocation data */
  currency?: Maybe<Scalars["JSON"]>;
  /** Debt type allocation */
  debtType?: Maybe<DebtType2Input>;
  /** Maturity allocation data */
  maturity?: Maybe<MaturityInput>;
  /** Rating allocation data */
  rating?: Maybe<Rating2Input>;
  /** Region allocation data */
  region?: Maybe<RegionInput>;
  /** Sector allocation */
  sector?: Maybe<SectorInput>;
};
/** Debt type allocation */
export type DebtType2Input = {
  /** Allocation to asset-backed securities not covered by other categories */
  assetBackedSecurities?: Maybe<Scalars["Float"]>;
  /** Allocation to bonds */
  bonds?: Maybe<Scalars["Float"]>;
  /** Allocation to debentures */
  debentures?: Maybe<Scalars["Float"]>;
  /** Allocation to mortgage-backed securities, including collateralized mortgage obligations (CMOs) */
  mortgageBackedSecurities?: Maybe<Scalars["Float"]>;
  /** Allocation to municipal bonds and similar products such as tax anticipation notes */
  municipalBonds?: Maybe<Scalars["Float"]>;
  /** Allocation to notes */
  notes?: Maybe<Scalars["Float"]>;
  /** Allocation to other or unknown debt products */
  other?: Maybe<Scalars["Float"]>;
  /** Allocation to preferred stock */
  preferredStock?: Maybe<Scalars["Float"]>;
  /** Allocation to supranational bonds */
  supranationalBonds?: Maybe<Scalars["Float"]>;
};
/** Rating allocation data */
export type Rating2Input = {
  a?: Maybe<Scalars["Float"]>;
  aa?: Maybe<Scalars["Float"]>;
  aaa?: Maybe<Scalars["Float"]>;
  b?: Maybe<Scalars["Float"]>;
  bb?: Maybe<Scalars["Float"]>;
  bbb?: Maybe<Scalars["Float"]>;
  c?: Maybe<Scalars["Float"]>;
  cc?: Maybe<Scalars["Float"]>;
  ccc?: Maybe<Scalars["Float"]>;
  d?: Maybe<Scalars["Float"]>;
  nr?: Maybe<Scalars["Float"]>;
};
/** Bond object, which include Corp/Muni/Sovereign etc. */
export type BondInput = {
  accruedInterest?: Maybe<Scalars["Float"]>;
  /** Indicates if the bond is active */
  active?: Maybe<Scalars["Boolean"]>;
  /** Current outstanding amount expressed in the currency of denomination */
  amountOutstanding?: Maybe<Scalars["Float"]>;
  /** Current outstanding amount date */
  amountOutstandingDate?: Maybe<Scalars["String"]>;
  /**
   * A flag indicating that the security pays equal amounts on each payment date. Each such payment consists of
   * a decreasing interest amount and an increasing principal amount
   */
  annuity?: Maybe<Scalars["Boolean"]>;
  /** Description representing the asset status */
  assetStatus?: Maybe<Scalars["String"]>;
  /** Call type for callable bonds */
  callType?: Maybe<Scalars["String"]>;
  /** Indicates if the bond is callable */
  callable?: Maybe<Scalars["Boolean"]>;
  /** Type of allocation of municipal bond proceeds */
  capType?: Maybe<Scalars["String"]>;
  classifications?: Maybe<ClassificationsInput>;
  /** Bond price excluding accrued interest */
  cleanPrice?: Maybe<Scalars["Float"]>;
  /** Indicates if the bond has a clean-up call */
  cleanUpCallable?: Maybe<Scalars["Boolean"]>;
  /** Indicates if the bond is convertible */
  convertible?: Maybe<Scalars["Boolean"]>;
  /**
   * Code representing the country in which the security was issued.
   * This is usually, the country of residence of the issuer. For Global
   * bonds the Country of Issue is determined by the country of the
   * currency_cd, for Eurobonds it is always 'EU'.
   */
  countryOfIssue?: Maybe<Scalars["String"]>;
  /** Description representing the coupon type */
  couponClass?: Maybe<Scalars["String"]>;
  couponResetHistory?: Maybe<Array<Maybe<CouponResetHistoryListItemInput>>>;
  /**
   * list of coupone period, where each of the coupone period
   * can contain complex logic for coupon calculation
   */
  couponSchedule?: Maybe<Array<Maybe<CouponScheduleListItemInput>>>;
  /** Coupon type */
  couponType?: Maybe<Scalars["String"]>;
  /**
   * Indicates if the bond is a covered bond. Covered bonds are debt securities issued by a bank or mortgage
   * institution and collateralised against a pool of assets that, in case of failure of the issuer, can cover
   * claims at any point of time.
   */
  covered?: Maybe<Scalars["Boolean"]>;
  /** Creation information */
  creationUnit?: Maybe<Scalars["String"]>;
  /** Credit enhancements including guarantor information for principal and interest payments */
  creditEnhancement?: Maybe<CreditEnhancementInput>;
  /** current coupon of the bond */
  currentCoupon?: Maybe<Scalars["Float"]>;
  /** Date from which interest on the bond begins accruing. */
  datedDate?: Maybe<Scalars["String"]>;
  /**
   * Day count convention.
   *
   * The rules for each day count are listed below. More than one rule may take effect. They are applied in
   * order, and if a date is changed in one rule the changed value is used in the following rules. Where Date1
   * is mentioned, it can be decomposed as Date1 = (D1,M1,Y1), with the same principle applied to Date2, etc.
   *
   * * 30U/360 - If (Date2 is end of the month) and (Date1 is the last day of February) and (Date2 is the last
   *   day of February), then change D2 to 30. If (Date2 is end of the month) and (Date1 is the last day of
   *   February), then change D1 to 30. If D2 is 31 and D1 is 30 or 31, then change D2 to 30. If D1 is 31, then
   *   change D1 to 30. Day Count Fraction = (360*(Y2-Y1)+30*(M2-M1)+D2-D1) / 360
   * * 30/360_ISDA - If D1=31, then change D1 to 30 If D2=31 and D1=30, then change D2 to 30. Day Count
   *   Fraction = (360 * (Y2 - Y1) + 30 * (M2 - M1) + D2 - D1) / 360
   * * A/360 - Day Count Fraction = Days(Date1, Date2) / 360
   * * A/365C - Date3 is the next interest payment date. If the number of days of interest accrual is less than
   *   the actual number of days in the interest period: Day Count Fraction = (Days(Date1, Date2) * Pay
   *   frequency) / 365. If the number of days of interest accrual exceeds 365 / Pay frequency, or 182.5 days for
   *   a semi-annual pay security: Day Count Fraction = 1- (Days(Date2, Date3) * Pay frequency) / 365
   * * A/A_ICMA - Date3 is the previous interest payment date. Date4 is the next interest payment date. Day
   *   Count Fraction = Days(Date1, Date2) / (Days(Date3, Date4) * Pay frequency)
   * * NL/365 - If period between Date1 and Date2 contains 29 February: Day Count Fraction = (Days(Date1,
   *   Date2)-1) / 365 Else: Day Count Fraction = Days(Date1, Date2) / 365
   * * A/A_ISDA - Day Count Fraction = Days(Date1, Date2) / 365
   * * A/365 - Day Count Fraction = (Days not in leap year / 365) + (Days in leap year / 366)
   * * 30E/360_ICMA - If D1 is 31, then change D1 to 30. If D2 is 31, then change D2 to 30. Day Count Fraction
   *   = (360 * (Y2 - Y1) + 30 * (M2 - M1) + D2 - D1) / 360
   * * 30E/360_ISDA - If D1 is last day of the month, then change D1 to 30. If D2 is last day of the month,
   *   then change D2 to 30. Day Count Fraction = (360 * (Y2 - Y1) + 30 * (M2 - M1) + D2 - D1) / 360
   * * A/365L - If payment frequency is annual and 29 February is included in the interest period or if payment
   *   frequency is more frequent than annual and payment date falls in a leap year: Day Count Fraction =
   *   Days(Date1, Date2) / 366 Else: Day Count Fraction = Days(Date1, Date2) / 365
   * * A/A_AFB - If period between Date1 and Date2 contains 29 February: Day Count Fraction =
   *   Days(Date1, Date2) / 366 Else: Day Count Fraction = Days(Date1, Date2) / 365
   * * 30/A - Date3 is the previous interest payment date. Date4 is the next interest payment date. If (Date2
   *   is end of the month) and (Date1 is the last day of February) and (Date2 is the last day of February), then
   *   change D2 to 30. If (Date2 is end of the month) and (Date1 is the last day of February), then change D1
   *   to 30. If D2 is 31 and D1 is 30 or 31, then change D2 to 30. If D1 is 31, then change D1 to 30. Day Count
   *   Fraction = (360 * (Y2 - Y1) + 30 * (M2 - M1) + D2 - D1) / (Days(Date3, Date4) * Pay frequency)
   * * Changeable - Changeable day count convention. Arbitrary/unpredictable changes to the day count can
   *   occur.
   * * Unknown - Unknown day count convention
   * * 30/365G - If D1 is last day of the month, then change D1 to 30. If D2 is last day of the month, then
   *   change D2 to 30. Day Count Fraction = (360 * (Y2 - Y1) + 30 * (M2 - M1) + D2 - D1) / 365
   * * A/364 - Day Count Fraction = Days(Date1, Date2) / 364
   * * NL/360 - If period between Date1 and Date2 contains 29 February: Day Count Fraction = (Days(Date1,
   *   Date2) - 1) / 360 Else: Day Count Fraction = Days(Date1, Date2) / 360
   * * B/252 - Day Count Fraction = Business Days(Date1, Date2) / 252
   */
  dayCount?: Maybe<Scalars["String"]>;
  /** Debt service type */
  debtServiceType?: Maybe<Scalars["String"]>;
  /**
   * A flag indicating whether the security has the option to be legally or economically defeased in the future,
   * as specified in the prospectus. That is, the issuing company has either provided money for all coupon and
   * principal payments to the trustee (economic) or, the bond issuer sets up an irrevocable trust for the profit
   * of the bondholder and is no longer legally bound by the convenants of the issue.
   */
  defeasable?: Maybe<Scalars["Boolean"]>;
  /**
   * The minimum multiples in which a bond can be held in the secondary market above the Minimum
   * Denomination
   */
  denominationIncrement?: Maybe<Scalars["Float"]>;
  /** Bond price including accrued interest */
  dirtyPrice?: Maybe<Scalars["Float"]>;
  dualCurrency?: Maybe<Scalars["Boolean"]>;
  /** Textual description of calendar adjustment methodology */
  exDividendCalendarAdjustment?: Maybe<Scalars["String"]>;
  /**
   * Integer used in conjunction with the ex-dividend calendar code. For example, if the calendar is a
   * "_n_th calendar day of month" value and the ex-dividend date is on the 30th calendar day of the month, 30
   * would show in this field. If the ex-dividend calendar description is a "_n_ calendar day(s) prior" value,
   * then it is an offset from the pay date. For example, 15 means "15 calendar days prior to the pay date."
   */
  exDividendCalendarAdjustmentValue?: Maybe<Scalars["Int"]>;
  exchangeListed?: Maybe<Scalars["Boolean"]>;
  /**
   * Date on which the first coupon payment (either cash, capitalization, PIK or some combination of these) is
   * made. Date is not adjusted for nonbusiness days.
   */
  firstCouponDate?: Maybe<Scalars["String"]>;
  /** Indicates if the bond has a floating rate coupon */
  floating?: Maybe<Scalars["Boolean"]>;
  /**
   * Indicates whether a bond is a green bond. Green bonds are fixed income products where the proceeds are used
   * or earmarked for environmentally beneficial projects. This also includes ESG bonds where the proceeds are
   * used only for environmental projects. Thomson Reuters definition of this field is in line with that of
   * Climate Bond Initiative’s definition.
   */
  green?: Maybe<Scalars["Boolean"]>;
  /**
   * A flag flag indicating whether there is a third party guarantee or, in some rare instances, a self guarantee
   * in effect as to the timely payment of interest and principal applicable to the asset within the guaranteed
   * period terms.
   */
  guaranteed?: Maybe<Scalars["Boolean"]>;
  /** warrants were attached to the bond at issue */
  hasWarrantsAttached?: Maybe<Scalars["Boolean"]>;
  inflationProtected?: Maybe<Scalars["Boolean"]>;
  /**
   * A description of the security itself. For example, bond, note, bill, debenture, preferred stock, warrant, or
   * commercial paper.
   */
  instrumentType?: Maybe<Scalars["String"]>;
  issue?: Maybe<IssueInput>;
  /** The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) currency code for the currency of issue */
  issueCurrency?: Maybe<Scalars["String"]>;
  /**
   * The settlement date for the initial placement of the security, except when a market designates a different
   * issue date.
   */
  issueDate?: Maybe<Scalars["String"]>;
  issuer?: Maybe<IssuerInput>;
  /**
   * Date on which the last coupon payment (either cash, capitalization, PIK or some combination of these) prior
   * to the expected maturity date or the maturity date, whichever is currently applicable, is made. Date is not
   * adjusted for non-business days.
   */
  lastCouponDate?: Maybe<Scalars["String"]>;
  /** The last date on which this asset was included as a liquid ETF constituent */
  lastLiquidEtfConstituentDate?: Maybe<Scalars["String"]>;
  /** Liquidity criteria */
  liquidityCriteria?: Maybe<LiquidityCriteriaInput>;
  marketData?: Maybe<MarketDataInput>;
  /**
   * Date on which the principal amount of the security becomes due
   * and payable, as stated in the terms of the security.
   */
  maturityDate?: Maybe<Scalars["String"]>;
  /** A flag indicating whether the security is a issued under a medium term note program. */
  mediumTermNote?: Maybe<Scalars["Boolean"]>;
  /**
   * The smallest amount in which a bond may be purchased in the secondary market,
   * expressed in face value also known as par value
   */
  minimumDenomination?: Maybe<Scalars["Float"]>;
  /** The nearest call period's end date */
  nearestCallPeriodEndDate?: Maybe<Scalars["String"]>;
  /**
   * The nearest ordinary call period's start date. The nearest call may start before the loading date, as long
   * as the end date occurs afterward.
   */
  nearestCallPeriodStartDate?: Maybe<Scalars["String"]>;
  /** The nearest call's price */
  nearestCallPrice?: Maybe<Scalars["Float"]>;
  /** The date of the next coupon rate change */
  nextResetDate?: Maybe<Scalars["String"]>;
  /** The maximum notice period for the ordinary call */
  ordinaryCallNoticePeriodMaximumAmount?: Maybe<Scalars["Int"]>;
  /** The minimum notice period for the ordinary call */
  ordinaryCallNoticePeriodMinimumAmount?: Maybe<Scalars["Int"]>;
  /** The notice period units for the ordinary call */
  ordinaryCallNoticePeriodUnits?: Maybe<Scalars["String"]>;
  /** The option type for the bond's ordinary call */
  ordinaryCallOptionType?: Maybe<Scalars["String"]>;
  /** Indicates if the bond has an ordinary call option */
  ordinaryCallable?: Maybe<Scalars["Boolean"]>;
  originalAmountIssued?: Maybe<Scalars["Float"]>;
  /** Underlying benchmark */
  originalBenchmark?: Maybe<Scalars["String"]>;
  /**
   * Price at which the public may purchase the offered security from the underwriters, expressed as a percentage
   * of par
   */
  originalIssuePrice?: Maybe<Scalars["Float"]>;
  /** Difference between the yield of the security issued vs pricing security in basis points */
  originalIssueSpread?: Maybe<Scalars["Float"]>;
  originalYieldToMaturity?: Maybe<Scalars["Float"]>;
  /**
   * Identifies the defined par value at the initial issuance of the security, also known as stated or face
   * value, expressed in units of the current currency of denomination and usually updated based on the following
   * criteria:
   *
   * * For convertibles, it is the conversion par value and when in the initial segment with conversion terms
   * * For preferreds, it is the par value
   * * For all other cases and securities, it is the denomination amount
   *
   * Note that the value in the field may be different than the value produced by one of these criteria. Also, if
   * an applicable Denomination Amount is not available to display as the par value, a value may still be updated
   * in the field based on source documentation.
   */
  parValue?: Maybe<Scalars["Float"]>;
  partlyPaid?: Maybe<Scalars["Boolean"]>;
  /**
   * A flag indicating if the security can pay interest/dividends in the form of additional securities or equity
   * instead of, or in addition to, cash. This flag is set to true where the issuer (or borrower) has the
   * obligation to pay interest (or a portion of the interest) in-kind, which is compulsory and is predefined in
   * the terms of the security.
   */
  payableInKind?: Maybe<Scalars["Boolean"]>;
  /** Indicates if the bond is paying coupons & principals and not in default */
  performing?: Maybe<Scalars["Boolean"]>;
  perpetual?: Maybe<Scalars["Boolean"]>;
  /**
   * Price quote convention:
   * * 128THS
   * * 16THS
   * * 256THS
   * * 32NDS
   * * 320THS
   * * 64THS
   * * 8THS
   * * DECIMAL
   * * PRICE
   * * SPREAD
   * * UPFRONT
   */
  priceQuoteConvention?: Maybe<Scalars["String"]>;
  /** A description of whether a security is quoted in currency per unit or points of 100% */
  priceQuoteMethod?: Maybe<Scalars["String"]>;
  /** Textual description of rounding method */
  priceQuoteRoundingMethod?: Maybe<Scalars["String"]>;
  /**
   * The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the currency in which the principal is paid
   * in the current principal period
   */
  principalCurrency?: Maybe<Scalars["String"]>;
  /**
   * If the issuer's offering documentation (e.g., prospectus or offering memorandum) includes a statement to the
   * effect that the security will be offered and sold in reliance upon Rule 144A of the U.S. Securities Act of
   * 1933. It allows privately placed securities to be traded among qualified institutional buyers.
   */
  private144a?: Maybe<Scalars["Boolean"]>;
  privatePlacement?: Maybe<Scalars["Boolean"]>;
  /** Indicates if the bond is puttable */
  puttable?: Maybe<Scalars["Boolean"]>;
  /** True for bonds quoted at their full (dirty) price and false for those quoted at their clean price */
  quotedDirty?: Maybe<Scalars["Boolean"]>;
  /** Issue ratings */
  ratings?: Maybe<Ratings2Input>;
  /** Textual description of calendar adjustment methodology */
  recordDateCalendarAdjustment?: Maybe<Scalars["String"]>;
  recordDateCalendarAdjustmentValue?: Maybe<Scalars["Int"]>;
  /**
   * The redemption value of the asset at maturity. Generally this is par value (100.00) but may be different
   * for certain securities.
   */
  redemptionValue?: Maybe<Scalars["Float"]>;
  /** Rich/Cheap information */
  richCheap?: Maybe<RichCheapInput>;
  /** Description of the level of seniority, secured/unsecured status, preferred, non-preferred, etc. */
  seniority?: Maybe<Scalars["String"]>;
  /**
   * The series number, for example, 1998-F. This column may also be
   * used for hybrid securities, for example, MIPPS. For the Danish
   * market, the series number and Capital Centre information will be
   * available.
   */
  series?: Maybe<Scalars["String"]>;
  /** Sinking/Amortization Indicator */
  sinkingOrAmortizing?: Maybe<Scalars["Boolean"]>;
  /**
   * Further detail on the classification of sovereign securities:
   * * Agency
   * * Central Bank
   * * Government/Treasury
   * * Municipal
   * * Provincial
   */
  sovereignClass?: Maybe<Scalars["String"]>;
  /** The state of issuance for a US-based municipal security */
  state?: Maybe<Scalars["String"]>;
  /** Indicates whether the security is tax exempt by the state where it was issued */
  stateTaxExempt?: Maybe<Scalars["Boolean"]>;
  /**
   * Indicates if the bond is straight. A straight bond is a bullet bond that pays a fixed interest rate through
   * its life and has no embedded options.
   */
  straight?: Maybe<Scalars["Boolean"]>;
  /**
   * A flag indicating whether the coupon payments may be "stripped" from the offered security. Stripping is the
   * process of separating a bond into its principal component and interest components. These components are then
   * sold separately.
   */
  strippable?: Maybe<Scalars["Boolean"]>;
  /** Indicates whether the interest of a tax-exempt security is subject to the US Alternative Minimum Tax (AMT) */
  subjectToAlternativeMinimumTax?: Maybe<Scalars["Boolean"]>;
  /**
   * The total amount issued. For Treasuries, this represents amt_iss_public plus an amount that is kept by the
   * Federal Reserve for their own investing or made available to foreign banks and investors. For strips, this
   * represents the portion held in a stripped form. Expressed in thousands.
   */
  totalAmountIssued?: Maybe<Scalars["Float"]>;
  /** Indicates whether a security is exempt from federal taxes in the United States */
  unitedStatesTaxExempt?: Maybe<Scalars["Boolean"]>;
  /** Description of the registrant's planned use of its proceeds from the offering */
  useOfProceeds?: Maybe<Scalars["String"]>;
  /**
   * The tax deducted at source on interest or dividends to be paid by the investor. This is most often given
   * for international government issues.
   */
  withholdingTax?: Maybe<Scalars["Float"]>;
};
export type CouponResetHistoryListItemInput = {
  effectiveDate: Scalars["String"];
  rate?: Maybe<Scalars["Float"]>;
  rateNonAnnual?: Maybe<Scalars["Float"]>;
};
export type CouponScheduleListItemInput = {
  /**
   * The maximum coupon rate to which the security can be reset associated with the particular leg number.
   * Note: This field is only applicable when couponClass = FLT, RNG, or TBP.
   */
  cap?: Maybe<Scalars["Float"]>;
  /**
   * Description representing the coupon type:
   * * DSC - Discount/Zero Coupon
   * * FIX - Fixed Coupon
   * * FLT - Floating Coupon
   * * RNG - Range Coupon
   * * STR - Stripped Coupon
   * * TBP - To Be Priced Coupon
   * * UNK - Unknown
   * * VAR - Variable Coupon
   */
  couponClass?: Maybe<Scalars["String"]>;
  /**
   * Details of the formula used to calculate the new rate of
   * interest.
   * * Formula Structure -->
   * multiplier|index|lookback|spread
   * * Multiplier Typically --> one.
   * * Index --> See the RIGs database or base_index_cds for description. Indices with pricing are in
   * RIGs. Others can be found in the base_index_cds table in the GCodes
   * Database Viewer.
   * * Lookback --> Identifies rate determination date (for example, 2 business days prior to reset date).
   * * Spread --> 0.10 = 10 basis points.
   * ***Example 1.00*#US3MLIB<2d+0.10
   * Note: This field is only applicable when couponClass =
   * FLT, RNG, or TBP.***
   */
  couponFormula?: Maybe<Scalars["JSON"]>;
  /** Human-friendly description of rounding method */
  couponRateRoundingMethod?: Maybe<Scalars["String"]>;
  /** Day count convention */
  dayCount?: Maybe<Scalars["String"]>;
  effectiveDate: Scalars["String"];
  floor?: Maybe<Scalars["Float"]>;
  indexDescription?: Maybe<Scalars["String"]>;
  /** Human-friendly name for holiday calendar */
  indexHolidayCalendar?: Maybe<Scalars["String"]>;
  numberCutOffDays?: Maybe<Scalars["Int"]>;
  /** Business day rule, often known as the business day adjustment */
  paymentBusinessDayRule?: Maybe<Scalars["String"]>;
  /** Human-friendly description of calendar adjustment methodology */
  paymentCalendarAdjustment?: Maybe<Scalars["String"]>;
  paymentCalendarAdjustmentValue?: Maybe<Scalars["Int"]>;
  /** The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) currency code for the payment currency */
  paymentCurrency?: Maybe<Scalars["String"]>;
  /** Human-friendly description of frequency */
  paymentFrequency?: Maybe<Scalars["String"]>;
  /** Human-friendly name for holiday calendar */
  paymentHolidayCalendar?: Maybe<Scalars["String"]>;
  /** Business day rule, often known as the business day adjustment */
  resetBusinessDayRule?: Maybe<Scalars["String"]>;
  /** Human-friendly description of calendar adjustment methodology */
  resetCalendarAdjustment?: Maybe<Scalars["String"]>;
  resetCalendarAdjustmentValue?: Maybe<Scalars["Int"]>;
  /** Human-friendly description of frequency */
  resetFrequency?: Maybe<Scalars["String"]>;
  /** Human-friendly name for holiday calendar */
  resetHolidayCalendar?: Maybe<Scalars["String"]>;
};
export type IssuerInput = {
  /** Whether the issuer still exists as a company */
  active?: Maybe<Scalars["Boolean"]>;
  /** Whether the issuer is currently in bankruptcy */
  bankrupt?: Maybe<Scalars["Boolean"]>;
  /** Country of domicile for the issuer's principal executive offices */
  country?: Maybe<Scalars["String"]>;
  /** A physical address */
  headquartersAddress?: Maybe<HeadquartersAddressInput>;
  /** Unique identifier for an issuer */
  id: Scalars["String"];
  /**
   * Unique identifier for the immediate parent of the issuer, defined as a company that owns or controls greater
   * than 50% of the voting stock
   */
  immediateParentId?: Maybe<Scalars["String"]>;
  /** Current legal name of the issuer */
  legalName?: Maybe<Scalars["String"]>;
  /** Long name of the issuer */
  longName?: Maybe<Scalars["String"]>;
  /** Issuer ratings */
  ratings?: Maybe<RatingsInput>;
  /** A physical address */
  registeredAddress?: Maybe<HeadquartersAddressInput>;
  /** Industry of the issuer */
  sector?: Maybe<Scalars["String"]>;
  /** Short name of the issuer */
  shortName?: Maybe<Scalars["String"]>;
  /** Description of the sovereign entity */
  sovereignClass?: Maybe<Scalars["String"]>;
  /** Within sector, further breakdown of the industry of the issuer */
  subsector?: Maybe<Scalars["String"]>;
  /**
   * Ticker code used to identify the common stock when available, else common acronym of company if known, else
   * matched to immediate parent, else unique value based on name for standalone organizations.
   */
  ticker?: Maybe<Scalars["String"]>;
  /**
   * Unique identifier for the ultimate parent of the issuer, defined as a company that owns or controls greater
   * than 50% of the voting stock at the highest level of the issuer tree
   */
  ultimateParentId?: Maybe<Scalars["String"]>;
  /**
   * URL of the legal entity's corporate website or company homepage. For funds, this is the URL of the fund
   * family.
   */
  url?: Maybe<Scalars["String"]>;
};
/** A physical address */
export type HeadquartersAddressInput = {
  /** City/town as published in valid source documents */
  cityOrTown?: Maybe<Scalars["String"]>;
  /** Code indicating the ISO country */
  country?: Maybe<Scalars["String"]>;
  /** Region within the country as defined by the postal authority/agency */
  stateOrCountyOrRegion?: Maybe<Scalars["String"]>;
  /** Building name, floor, suite or level */
  street1?: Maybe<Scalars["String"]>;
  /** Street number and name or post office box */
  street2?: Maybe<Scalars["String"]>;
  /** Additional address information required by the postal authority/agency, such as zone or urbanization */
  street3?: Maybe<Scalars["String"]>;
  /** Designated postal code/zip code as assigned by the postal authority/agency */
  zipCode?: Maybe<Scalars["String"]>;
};
/** Issuer ratings */
export type RatingsInput = {
  /** Rating */
  snpLongTerm?: Maybe<SnpLongTermInput>;
  /** Rating */
  snpSeniorSecured?: Maybe<SnpLongTermInput>;
  /** Rating */
  snpSeniorUnsecured?: Maybe<SnpLongTermInput>;
  /** Rating */
  snpShortTerm?: Maybe<SnpLongTermInput>;
  /** Rating */
  snpSubordinated?: Maybe<SnpLongTermInput>;
};
/** Rating */
export type SnpLongTermInput = {
  /** Effective date */
  effectiveDate: Scalars["String"];
  /** S&P equivalent rank */
  rank: Scalars["Float"];
  /** Rating */
  rating: Scalars["String"];
};
/** Liquidity criteria */
export type LiquidityCriteriaInput = {
  /** Has quote from four days ago */
  hasAdequateQuotes?: Maybe<Scalars["Boolean"]>;
  /** Date liquidity criteria was last evaluated */
  liquidityCriteriaDate: Scalars["String"];
};
export type MarketDataInput = {
  ejv?: Maybe<EjvInput>;
};
export type EjvInput = {
  /** Accrued interest */
  accruedInterest?: Maybe<Scalars["Float"]>;
  /** The ask price, yield, or discount of the security */
  askPrice?: Maybe<Scalars["Float"]>;
  /** The ask yield of the security */
  askYield?: Maybe<Scalars["Float"]>;
  /** The difference between the bond's native bid yield to maturity and the interest rate swap */
  assetSwapSpread?: Maybe<Scalars["Float"]>;
  /** The difference between the bond's yield and the yield of its benchmark */
  benchmarkSpread?: Maybe<Scalars["Float"]>;
  /** The bid price, yield, or discount of the security */
  bidPrice?: Maybe<Scalars["Float"]>;
  /** The bid yield of the security */
  bidYield?: Maybe<Scalars["Float"]>;
  /**
   * The corporate bond equivalent cash flow yield using the cash-flow assumptions described as follows: the
   * average life of the security, calculated with the cash-flow assumption that corporate and government
   * securities trade to maturity
   */
  cbeYieldToMaturity?: Maybe<Scalars["Float"]>;
  /**
   * The corporate bond equivalent cash-flow yield using the cash-flow assumptions described as follows: the
   * average life, computed using cash-flow assumptions that represent expected outcome.
   */
  cbeYieldToWorst?: Maybe<Scalars["Float"]>;
  /** The exchange contributed market closing price for the security */
  closePrice?: Maybe<Scalars["Float"]>;
  /** The effective date of the price */
  date: Scalars["String"];
  /** The exchange contributed highest market price of the day for the security */
  highPrice?: Maybe<Scalars["Float"]>;
  /** The exchange contributed lowest market price of the day for the security */
  lowPrice?: Maybe<Scalars["Float"]>;
  /** The exchange contributed market open price for the security */
  openPrice?: Maybe<Scalars["Float"]>;
  /** Price following market and vendor conventions */
  price?: Maybe<Scalars["Float"]>;
  /** Pricing vendor or contributor */
  source?: Maybe<Scalars["String"]>;
  /** The difference between the bond’s yield and the LIBOR curve, expressed in basis points */
  swapSpread?: Maybe<Scalars["Float"]>;
  /** The exchange contributed trade volume for the day for the security */
  volume?: Maybe<Scalars["Float"]>;
  /** Yield is calculated using the native yield to maturity convention */
  yieldToMaturity?: Maybe<Scalars["Float"]>;
  /**
   * Yield is calculated based on the native yield to worst formula, after taking all of the bond redemption
   * features into account
   */
  yieldToWorst?: Maybe<Scalars["Float"]>;
  /**
   * The constant spread in basis points that will make the price equal to the present value of the cash flows
   * when added to each relevant point of the yield curve
   */
  zSpread?: Maybe<Scalars["Float"]>;
};
/** Issue ratings */
export type Ratings2Input = {
  /** Rating */
  snpLongTerm?: Maybe<SnpLongTermInput>;
  /** Rating */
  snpShortTerm?: Maybe<SnpLongTermInput>;
};
export type FundInput = {
  /** Fund allocation data */
  allocation?: Maybe<AllocationInput>;
  /** Information on whether a fund is supported by Apex. Only applies to mutual funds. */
  apexSupport?: Maybe<ApexSupportInput>;
  /** Description representing the asset status */
  assetStatus?: Maybe<Scalars["String"]>;
  benchmark?: Maybe<Scalars["String"]>;
  /** BondHouse classification */
  classification?: Maybe<Scalars["String"]>;
  /** Fund distributions */
  distributions?: Maybe<DistributionsInput>;
  fees?: Maybe<FeesInput>;
  focus?: Maybe<FocusInput>;
  /** fund type, should matches assetType on the parent level */
  fundType?: Maybe<Scalars["String"]>;
  inceptionDate?: Maybe<Scalars["String"]>;
  /** Indicates whether the share class is institutional only */
  institutional?: Maybe<Scalars["Boolean"]>;
  /** The fund management company */
  managementCompany?: Maybe<Scalars["String"]>;
  /**
   * The market mid price. Certain types of funds, including closed-end funds (CEFs) and exchange-traded funds
   * (ETFs) may trade at a premium or discount.
   */
  midPrice?: Maybe<Scalars["Float"]>;
  /**
   * The net asset value (NAV) per share, equivalent to the market value of the underlying securities divided by
   * the number of shares outstanding
   */
  netAssetValuePerShare?: Maybe<Scalars["Float"]>;
  /** Fund net assets */
  netAssets?: Maybe<Scalars["Float"]>;
  /** Date of the latest fund assets value */
  netAssetsDate?: Maybe<Scalars["String"]>;
  /** The date of the latest price and NAV/share figures */
  priceDate?: Maybe<Scalars["String"]>;
  regulatoryStructure?: Maybe<Scalars["String"]>;
  replicationStrategy?: Maybe<Scalars["String"]>;
  /** Lipper Leaders scores */
  scores?: Maybe<ScoresInput>;
  /** Specifies the minimum number of shares that can be purchased, as regulated by an exchange */
  tradeLotSize?: Maybe<Scalars["Float"]>;
  /** Fund yields */
  yields?: Maybe<YieldsInput>;
};
/** Fund allocation data */
export type AllocationInput = {
  /** Asset allocation data */
  asset?: Maybe<Asset2Input>;
  /** Currency allocation data */
  currency?: Maybe<Scalars["JSON"]>;
  /** Debt type allocation */
  debtType?: Maybe<DebtType2Input>;
  /** Country allocation data */
  equityCountry?: Maybe<Scalars["JSON"]>;
  /** Region allocation data */
  equityRegion?: Maybe<RegionInput>;
  /** Country allocation data */
  fixedIncomeCountry?: Maybe<Scalars["JSON"]>;
  /** Region allocation data */
  fixedIncomeRegion?: Maybe<RegionInput>;
  /** GICS sub-industry allocation data */
  gicsSubIndustry?: Maybe<GicsSubIndustryInput>;
  /** Maturity allocation data */
  maturity?: Maybe<MaturityInput>;
  /** Rating allocation data */
  rating?: Maybe<Rating2Input>;
  /** Region allocation data */
  region?: Maybe<RegionInput>;
  /** TRBC Industry allocation data */
  trbcIndustry?: Maybe<TrbcIndustryInput>;
};
/** Asset allocation data */
export type Asset2Input = {
  /** Allocation to the cash sector */
  cash?: Maybe<Scalars["Float"]>;
  /** Allocation to the equity sector */
  equity?: Maybe<Scalars["Float"]>;
  /** Allocation to the fixed income sector */
  fixedIncome?: Maybe<Scalars["Float"]>;
  /** Allocation to other or unknown sectors */
  other?: Maybe<Scalars["Float"]>;
};
/** GICS sub-industry allocation data */
export type GicsSubIndustryInput = {
  /** Allocation to the communication services sub-industry */
  communicationServices?: Maybe<Scalars["Float"]>;
  /** Allocation to the consumer discretionary sub-industry */
  consumerDiscretionary?: Maybe<Scalars["Float"]>;
  /** Allocation to the consumer staples sub-industry */
  consumerStaples?: Maybe<Scalars["Float"]>;
  /** Allocation to the energy sub-industry */
  energy?: Maybe<Scalars["Float"]>;
  /** Allocation to the financials sub-industry */
  financials?: Maybe<Scalars["Float"]>;
  /** Allocation to the health care sub-industry */
  healthCare?: Maybe<Scalars["Float"]>;
  /** Allocation to the industrials sub-industry */
  industrials?: Maybe<Scalars["Float"]>;
  /** Allocation to the information technology sub-industry */
  informationTechnology?: Maybe<Scalars["Float"]>;
  /** Allocation to the materials sub-industry */
  materials?: Maybe<Scalars["Float"]>;
  /** Allocation to other or unknown sub-industries */
  other?: Maybe<Scalars["Float"]>;
  /** Allocation to the real estate sub-industry */
  realEstate?: Maybe<Scalars["Float"]>;
  /** Allocation to the utilities sub-industry */
  utilities?: Maybe<Scalars["Float"]>;
};
/** TRBC Industry allocation data */
export type TrbcIndustryInput = {
  /** Allocation to the basic materials sector */
  basicMaterials?: Maybe<Scalars["Float"]>;
  /** Allocation to the consumer cyclicals sector */
  consumerCyclicals?: Maybe<Scalars["Float"]>;
  /** Allocation to the consumer non-cyclicals sector */
  consumerNonCyclicals?: Maybe<Scalars["Float"]>;
  /** Allocation to the energy sector */
  energy?: Maybe<Scalars["Float"]>;
  /** Allocation to the financials sector */
  financials?: Maybe<Scalars["Float"]>;
  /** Allocation to the healthcare sector */
  healthcare?: Maybe<Scalars["Float"]>;
  /** Allocation to the industrials sector */
  industrials?: Maybe<Scalars["Float"]>;
  /** Allocation to the other sector */
  other?: Maybe<Scalars["Float"]>;
  /** Allocation to the technology sector */
  technology?: Maybe<Scalars["Float"]>;
  /** Allocation to the telecommunications services sector */
  telecommunicationsServices?: Maybe<Scalars["Float"]>;
  /** Allocation to the utilities sector */
  utilities?: Maybe<Scalars["Float"]>;
};
/** Fund distributions */
export type DistributionsInput = {
  capitalGain?: Maybe<CapitalGainInput>;
  foreignTaxCredit?: Maybe<ForeignTaxCreditInput>;
  income?: Maybe<IncomeInput>;
  repaymentCategory?: Maybe<RepaymentCategoryInput>;
};
export type CapitalGainInput = {
  capitalGain?: Maybe<CapitalGain2Input>;
  collectibles?: Maybe<CapitalGain2Input>;
  longTermCapitalGain?: Maybe<CapitalGain2Input>;
  mediumTermCapitalGain?: Maybe<CapitalGain2Input>;
  nonQualifiedShortTermCapitalGain?: Maybe<CapitalGain2Input>;
  qualifiedShortTermCapitalGain?: Maybe<CapitalGain2Input>;
  returnOfCapital?: Maybe<CapitalGain2Input>;
  shortTermCapitalGain?: Maybe<CapitalGain2Input>;
  superLongTermCapitalGain?: Maybe<CapitalGain2Input>;
};
export type CapitalGain2Input = {
  /** Accounting date */
  accountingDate?: Maybe<Scalars["String"]>;
  /** Ex date */
  exDate?: Maybe<Scalars["String"]>;
  /** Distribution amount */
  exValue?: Maybe<Scalars["Float"]>;
  /** Payment date */
  paymentDate?: Maybe<Scalars["String"]>;
  /** Record date */
  recordDate?: Maybe<Scalars["String"]>;
  /** Reinvestment date */
  reinvestmentDate?: Maybe<Scalars["String"]>;
  /** Reinvestment type */
  reinvestmentType?: Maybe<Scalars["String"]>;
  /** Reinvestment value */
  reinvestmentValue?: Maybe<Scalars["Float"]>;
  /** Taxable interest income */
  taxableInterestIncome?: Maybe<Scalars["Float"]>;
};
export type ForeignTaxCreditInput = {
  foreignTaxCredit?: Maybe<CapitalGain2Input>;
  nonQualifiedForeignTaxPaid?: Maybe<CapitalGain2Input>;
  qualifiedForeignTaxPaid?: Maybe<CapitalGain2Input>;
};
export type IncomeInput = {
  aggregateAccrual?: Maybe<CapitalGain2Input>;
  exemptIncome?: Maybe<CapitalGain2Input>;
  incomeDividend?: Maybe<CapitalGain2Input>;
  interestIncome?: Maybe<CapitalGain2Input>;
  nonQualifiedIncomeDividend?: Maybe<CapitalGain2Input>;
  qualifiedIncomeDividend?: Maybe<CapitalGain2Input>;
};
export type RepaymentCategoryInput = {
  bonusIssue?: Maybe<CapitalGain2Input>;
  factor?: Maybe<CapitalGain2Input>;
  repayment?: Maybe<CapitalGain2Input>;
  rightsIssue?: Maybe<CapitalGain2Input>;
  split?: Maybe<CapitalGain2Input>;
};
/** Lipper Leaders scores */
export type ScoresInput = {
  /** Fund scores organized by the time period of measurement */
  consistentReturn?: Maybe<TotalReturnInput>;
  /** Fund scores organized by the time period of measurement */
  expense?: Maybe<TotalReturnInput>;
  /** Fund scores organized by the time period of measurement */
  preservation?: Maybe<TotalReturnInput>;
  /** Fund scores organized by the time period of measurement */
  taxEfficiency?: Maybe<TotalReturnInput>;
  /** Fund scores organized by the time period of measurement */
  totalReturn?: Maybe<TotalReturnInput>;
};
/** Fund scores organized by the time period of measurement */
export type TotalReturnInput = {
  /** The 5-year score */
  fiveYear?: Maybe<Scalars["Int"]>;
  /** The overall score */
  overall?: Maybe<Scalars["Int"]>;
  /** The 10-year score */
  tenYear?: Maybe<Scalars["Int"]>;
  /** The 3-year score */
  threeYear?: Maybe<Scalars["Int"]>;
};
/** Fund yields */
export type YieldsInput = {
  /** Daily SEC yield */
  dailySecYield?: Maybe<Scalars["Float"]>;
  /** Daily SEC yield date */
  dailySecYieldDate?: Maybe<Scalars["String"]>;
  /** Distribution yield */
  distributionYield?: Maybe<Scalars["Float"]>;
  /** Dividend yield */
  dividendYield?: Maybe<Scalars["Float"]>;
  /** Lipper distribution yield */
  lipperDistributionYield?: Maybe<Scalars["Float"]>;
  /** Lipper projected yield */
  projectedYield?: Maybe<Scalars["Float"]>;
  /** SEC yield */
  secYield?: Maybe<Scalars["Float"]>;
  /** Simple yield at the beginning of the measured period */
  simpleYieldBegin?: Maybe<Scalars["Float"]>;
  /** Simple yield at the end of the measured period */
  simpleYieldEnd?: Maybe<Scalars["Float"]>;
  /** 30-day yield */
  thirtyDayYield?: Maybe<Scalars["Float"]>;
  /** Trailing twelve-month yield */
  trailingTwelveMonthYield?: Maybe<Scalars["Float"]>;
};
export type PriceQuotesListItemInput = {
  /** Accrued interest */
  accruedInterest?: Maybe<Scalars["Float"]>;
  /** The ask price, yield, or discount of the security */
  askPrice?: Maybe<Scalars["Float"]>;
  /** The ask yield of the security */
  askYield?: Maybe<Scalars["Float"]>;
  /** The difference between the bond's native bid yield to maturity and the interest rate swap */
  assetSwapSpread?: Maybe<Scalars["Float"]>;
  /** The difference between the bond's yield and the yield of its benchmark */
  benchmarkSpread?: Maybe<Scalars["Float"]>;
  /** The bid price, yield, or discount of the security */
  bidPrice?: Maybe<Scalars["Float"]>;
  /** The bid yield of the security */
  bidYield?: Maybe<Scalars["Float"]>;
  /**
   * The corporate bond equivalent cash flow yield using the cash-flow assumptions described as follows: the
   * average life of the security, calculated with the cash-flow assumption that corporate and government
   * securities trade to maturity
   */
  cbeYieldToMaturity?: Maybe<Scalars["Float"]>;
  /**
   * The corporate bond equivalent cash-flow yield using the cash-flow assumptions described as follows: the
   * average life, computed using cash-flow assumptions that represent expected outcome.
   */
  cbeYieldToWorst?: Maybe<Scalars["Float"]>;
  /** The exchange contributed market closing price for the security */
  closePrice?: Maybe<Scalars["Float"]>;
  /** The effective date of the price */
  date: Scalars["String"];
  /** The exchange contributed highest market price of the day for the security */
  highPrice?: Maybe<Scalars["Float"]>;
  /** The exchange contributed lowest market price of the day for the security */
  lowPrice?: Maybe<Scalars["Float"]>;
  /** The exchange contributed market open price for the security */
  openPrice?: Maybe<Scalars["Float"]>;
  /** Price following market and vendor conventions */
  price?: Maybe<Scalars["Float"]>;
  /** Pricing vendor or contributor */
  source: Scalars["String"];
  /** The difference between the bond’s yield and the LIBOR curve, expressed in basis points */
  swapSpread?: Maybe<Scalars["Float"]>;
  /** The exchange contributed trade volume for the day for the security */
  volume?: Maybe<Scalars["Float"]>;
  /** Yield is calculated using the native yield to maturity convention */
  yieldToMaturity?: Maybe<Scalars["Float"]>;
  /**
   * Yield is calculated based on the native yield to worst formula, after taking all of the bond redemption
   * features into account
   */
  yieldToWorst?: Maybe<Scalars["Float"]>;
  /**
   * The constant spread in basis points that will make the price equal to the present value of the cash flows
   * when added to each relevant point of the yield curve
   */
  zSpread?: Maybe<Scalars["Float"]>;
};
/** BondHouse's proprietary scores */
export type Scores2Input = {
  /**
   * BondHouse's proprietary measure for the attractiveness of an asset, which is a function of its expected
   * return and risk
   */
  attractiveness?: Maybe<Scalars["Float"]>;
  /**
   * BondHouse's proprietary credit score, based on a number of inputs to evaluate the credit-worthiness of a
   * bond
   */
  credit?: Maybe<Scalars["Float"]>;
  /**
   * (Funds only) BondHouse's proprietary efficiency score, measuring the effectiveness of fund management in
   * managing taxes, expenses, etc.
   */
  efficiency?: Maybe<Scalars["Float"]>;
  /** BondHouse's proprietary liquidity score, which measures the investor's ability to transact in an asset */
  liquidity?: Maybe<Scalars["Float"]>;
  /** BondHouse's proprietary risk measure based on our risk model */
  risk?: Maybe<Scalars["Float"]>;
  /** The date and time that this score was calculated */
  timestamp?: Maybe<Scalars["String"]>;
};
export interface SearchApiCallRecordsResponse {
  __typename?: "SearchApiCallRecordsResponse";
  apiCallRecords: Array<Maybe<ApiCallRecord>>;
}
export type SearchApiCallRecordsRequestInput = {
  action?: Maybe<Action>;
  createdAt?: Maybe<DateRangeInput>;
  institutionIds?: Maybe<Array<Maybe<Scalars["String"]>>>;
  responseStatuses?: Maybe<Array<Maybe<Scalars["String"]>>>;
  updatedAt?: Maybe<DateRangeInput>;
  urls?: Maybe<Array<Maybe<Scalars["String"]>>>;
};
export type DateRangeInput = {
  end?: Maybe<Scalars["String"]>;
  start?: Maybe<Scalars["String"]>;
};
export interface AnalyzeAssetByIdResponse {
  __typename?: "AnalyzeAssetByIdResponse";
  analytics: Array<Maybe<Analytic>>;
}
export interface ProjectCashFlowsByIdResponse {
  __typename?: "ProjectCashFlowsByIdResponse";
  cashFlows: Array<Maybe<CashFlow>>;
}
export interface UploadAssetsResponse {
  __typename?: "UploadAssetsResponse";
  /** Partial portfolio containing the translated portfolio */
  positions: Array<Maybe<PositionAllocation>>;
}
export interface PositionAllocation {
  __typename?: "PositionAllocation";
  /** Yieldx Asset Identifier */
  assetId?: Maybe<Scalars["String"]>;
  /** The */
  externalId: Scalars["String"];
  externalIdType: IdentifierType;
  /** Percentage of the analyzed portfolio allocated to the asset */
  percentage: Scalars["Float"];
}
export enum IdentifierType {
  Cusip = "CUSIP",
  Isin = "ISIN",
  Ticker = "TICKER",
  Unknown = "UNKNOWN"
}
export interface CalculateAssetRiskResponse {
  __typename?: "CalculateAssetRiskResponse";
  risk: Scalars["Float"];
}
export type CalculateAssetRiskRequestInput = {
  asset: Asset3Input;
  /** Analysis date that marks the last day of observations. Defaults to the previous business day. */
  date?: Maybe<Scalars["String"]>;
  /** Frequency of observations */
  frequency?: Maybe<Frequency>;
  /**
   * Amount of time in the half-life, using the amount specified in the halfLifeAmount parameter. Defaults to
   * "Months", and halfLifeAmount defaults to 6, so there is a 6-month half-life by default.
   */
  halfLifeAmount?: Maybe<Scalars["Int"]>;
  /**
   * Units of time in the half-life, using the amount specified in the halfLifeAmount parameter. Defaults to
   * "Months", and halfLifeAmount defaults to 6, so there is a 6-month half-life by default.
   */
  halfLifeUnits?: Maybe<HalfLifeUnits>;
  /**
   * Amount of time in the lookback period, using units specified in the lookbackPeriodUnits parameter.
   * Defaults to 24, and lookbackPeriodUnits defaults to "Months", so the default lookback period is 24
   * months.
   */
  lookbackPeriodAmount?: Maybe<Scalars["Int"]>;
  /**
   * Units of time in the lookback period, using the amount specified in the lookbackPeriodAmount parameter.
   * Defaults to "Months", and lookbackPeriodAmount defaults to 24, so the default lookback period is 24
   * months.
   */
  lookbackPeriodUnits?: Maybe<LookbackPeriodUnits>;
  /** If true, ignores cached covariance terms. Defaults to false. */
  refresh?: Maybe<Scalars["Boolean"]>;
};
export type Asset3Input = {
  /** Allocation data */
  allocation?: Maybe<Allocation2Input>;
  analytics?: Maybe<AnalyticsInput>;
  /** Asset sub-types specific to an instrument type */
  assetSubtype?: Maybe<AssetSubtype>;
  /** Higher level asset and instrument types, for instance bonds, stocks, funds, etc. */
  assetType?: Maybe<AssetType>;
  /** Bond object, which include Corp/Muni/Sovereign etc. */
  bond?: Maybe<Bond2Input>;
  country?: Maybe<Scalars["String"]>;
  createdAt?: Maybe<Scalars["String"]>;
  createdBy?: Maybe<Scalars["String"]>;
  /** The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) currency code for the asset currency */
  currency?: Maybe<Scalars["String"]>;
  description?: Maybe<Scalars["String"]>;
  /** BondHouse generated readable id that should have 1 to 1 relationship with the generated ID */
  displayId?: Maybe<Scalars["String"]>;
  equity?: Maybe<EquityInput>;
  /** Scores for Environmental, Social, and Governance */
  esgScores?: Maybe<EsgScores2Input>;
  fund?: Maybe<Fund2Input>;
  /** BondHouse unique identifier for an asset. This is not a public identifier. */
  id: Scalars["String"];
  /**
   * asset/security identifier:
   * * cusip - 9 alpha-numeric characters that includes the check digit, first 6 alpha numeric characters refers to
   *   the issuer
   * * isin - 12 alpha-numeric characters, first 2 characters contains country code, last character is a check
   *   digit
   * * sedol - 7 alpha-numeric characters, single security can have multiple SEDOL, handle later
   * * primaryTicker - primary exchange ticker
   * * cins - 9 alpha-numeric characters managed by cusip
   * * bbGlobal - 12 alpha-numeric characters managed by Bloomberg
   * The first 2 characters are upper-case consonants (including "Y"),
   * the third character is the upper-case "G",
   * characters 4 -11 are any upper-case consonant (including "Y")
   * or integer between 0 and 9, and the last character is a check-digit.
   * An identifier is assigned to instruments of all asset classes,
   * is unique to an individual instrument and once issued will not change for an instrument.
   * * refinitivAssetId - 18 alpha-numeric characters asset id, example sourced from DSFI
   * * refinitivIssuePermId - unique Refinitiv system-generated PermID for an asset
   * * refinitivLipperId - id to specify a share class of a fund and also
   * * refinitivLipperPermId - lipper permanent id
   * * valoren - nine digits for official Swiss Identification number
   * * cik - SEC's central index key for corporations/individuals
   * * apex - APEX identifier
   */
  identifiers?: Maybe<IdentifiersInput>;
  legalEntity?: Maybe<LegalEntityInput>;
  /** Indicates whether there are current bids/offers that makes the asset transactable */
  liquid?: Maybe<Scalars["Boolean"]>;
  market?: Maybe<Scalars["String"]>;
  metadata?: Maybe<Scalars["JSON"]>;
  name?: Maybe<Scalars["String"]>;
  /**
   * BondHouse best price from available pricing sources, quote following market conventions:
   * * Clean price for most bonds
   * * Dirty price for preferred stock
   * * Close-mid for equities
   * * Market price for funds
   */
  price?: Maybe<Scalars["Float"]>;
  priceDate?: Maybe<Scalars["String"]>;
  priceQuotes?: Maybe<Array<Maybe<PriceQuotesListItemInput>>>;
  primaryExchange?: Maybe<Scalars["String"]>;
  primaryExchangeMic?: Maybe<Scalars["String"]>;
  /** Normalized rating */
  rating?: Maybe<Scalars["String"]>;
  /** BondHouse's proprietary scores */
  scores?: Maybe<Scores2Input>;
  /**
   * The common street ticker for a security. For bonds, ticker code used to identify the common stock when
   * available, else common acronym of company if known, else matched to immediate parent, else unique value
   * based on name for standalone organizations.
   */
  ticker?: Maybe<Scalars["String"]>;
  unit?: Maybe<Scalars["String"]>;
  /** Universe inclusion information */
  universes?: Maybe<UniversesInput>;
  updatedAt?: Maybe<Scalars["String"]>;
  updatedBy?: Maybe<Scalars["String"]>;
};
/** Bond object, which include Corp/Muni/Sovereign etc. */
export type Bond2Input = {
  accruedInterest?: Maybe<Scalars["Float"]>;
  /** Indicates if the bond is active */
  active?: Maybe<Scalars["Boolean"]>;
  /** Current outstanding amount expressed in the currency of denomination */
  amountOutstanding?: Maybe<Scalars["Float"]>;
  /** Current outstanding amount date */
  amountOutstandingDate?: Maybe<Scalars["String"]>;
  /**
   * A flag indicating that the security pays equal amounts on each payment date. Each such payment consists of
   * a decreasing interest amount and an increasing principal amount
   */
  annuity?: Maybe<Scalars["Boolean"]>;
  /** Description representing the asset status */
  assetStatus?: Maybe<Scalars["String"]>;
  /** Call type for callable bonds */
  callType?: Maybe<Scalars["String"]>;
  /** Indicates if the bond is callable */
  callable?: Maybe<Scalars["Boolean"]>;
  /** Type of allocation of municipal bond proceeds */
  capType?: Maybe<Scalars["String"]>;
  classifications?: Maybe<ClassificationsInput>;
  /** Bond price excluding accrued interest */
  cleanPrice?: Maybe<Scalars["Float"]>;
  /** Indicates if the bond has a clean-up call */
  cleanUpCallable?: Maybe<Scalars["Boolean"]>;
  /** Indicates if the bond is convertible */
  convertible?: Maybe<Scalars["Boolean"]>;
  /**
   * Code representing the country in which the security was issued.
   * This is usually, the country of residence of the issuer. For Global
   * bonds the Country of Issue is determined by the country of the
   * currency_cd, for Eurobonds it is always 'EU'.
   */
  countryOfIssue?: Maybe<Scalars["String"]>;
  /** Description representing the coupon type */
  couponClass?: Maybe<Scalars["String"]>;
  couponResetHistory?: Maybe<Array<Maybe<CouponResetHistoryListItemInput>>>;
  /**
   * list of coupone period, where each of the coupone period
   * can contain complex logic for coupon calculation
   */
  couponSchedule?: Maybe<Array<Maybe<CouponScheduleListItemInput>>>;
  /** Coupon type */
  couponType?: Maybe<Scalars["String"]>;
  /**
   * Indicates if the bond is a covered bond. Covered bonds are debt securities issued by a bank or mortgage
   * institution and collateralised against a pool of assets that, in case of failure of the issuer, can cover
   * claims at any point of time.
   */
  covered?: Maybe<Scalars["Boolean"]>;
  /** Creation information */
  creationUnit?: Maybe<Scalars["String"]>;
  /** Credit enhancements including guarantor information for principal and interest payments */
  creditEnhancement?: Maybe<CreditEnhancementInput>;
  /** current coupon of the bond */
  currentCoupon?: Maybe<Scalars["Float"]>;
  /** Date from which interest on the bond begins accruing. */
  datedDate?: Maybe<Scalars["String"]>;
  /**
   * Day count convention.
   *
   * The rules for each day count are listed below. More than one rule may take effect. They are applied in
   * order, and if a date is changed in one rule the changed value is used in the following rules. Where Date1
   * is mentioned, it can be decomposed as Date1 = (D1,M1,Y1), with the same principle applied to Date2, etc.
   *
   * * 30U/360 - If (Date2 is end of the month) and (Date1 is the last day of February) and (Date2 is the last
   *   day of February), then change D2 to 30. If (Date2 is end of the month) and (Date1 is the last day of
   *   February), then change D1 to 30. If D2 is 31 and D1 is 30 or 31, then change D2 to 30. If D1 is 31, then
   *   change D1 to 30. Day Count Fraction = (360*(Y2-Y1)+30*(M2-M1)+D2-D1) / 360
   * * 30/360_ISDA - If D1=31, then change D1 to 30 If D2=31 and D1=30, then change D2 to 30. Day Count
   *   Fraction = (360 * (Y2 - Y1) + 30 * (M2 - M1) + D2 - D1) / 360
   * * A/360 - Day Count Fraction = Days(Date1, Date2) / 360
   * * A/365C - Date3 is the next interest payment date. If the number of days of interest accrual is less than
   *   the actual number of days in the interest period: Day Count Fraction = (Days(Date1, Date2) * Pay
   *   frequency) / 365. If the number of days of interest accrual exceeds 365 / Pay frequency, or 182.5 days for
   *   a semi-annual pay security: Day Count Fraction = 1- (Days(Date2, Date3) * Pay frequency) / 365
   * * A/A_ICMA - Date3 is the previous interest payment date. Date4 is the next interest payment date. Day
   *   Count Fraction = Days(Date1, Date2) / (Days(Date3, Date4) * Pay frequency)
   * * NL/365 - If period between Date1 and Date2 contains 29 February: Day Count Fraction = (Days(Date1,
   *   Date2)-1) / 365 Else: Day Count Fraction = Days(Date1, Date2) / 365
   * * A/A_ISDA - Day Count Fraction = Days(Date1, Date2) / 365
   * * A/365 - Day Count Fraction = (Days not in leap year / 365) + (Days in leap year / 366)
   * * 30E/360_ICMA - If D1 is 31, then change D1 to 30. If D2 is 31, then change D2 to 30. Day Count Fraction
   *   = (360 * (Y2 - Y1) + 30 * (M2 - M1) + D2 - D1) / 360
   * * 30E/360_ISDA - If D1 is last day of the month, then change D1 to 30. If D2 is last day of the month,
   *   then change D2 to 30. Day Count Fraction = (360 * (Y2 - Y1) + 30 * (M2 - M1) + D2 - D1) / 360
   * * A/365L - If payment frequency is annual and 29 February is included in the interest period or if payment
   *   frequency is more frequent than annual and payment date falls in a leap year: Day Count Fraction =
   *   Days(Date1, Date2) / 366 Else: Day Count Fraction = Days(Date1, Date2) / 365
   * * A/A_AFB - If period between Date1 and Date2 contains 29 February: Day Count Fraction =
   *   Days(Date1, Date2) / 366 Else: Day Count Fraction = Days(Date1, Date2) / 365
   * * 30/A - Date3 is the previous interest payment date. Date4 is the next interest payment date. If (Date2
   *   is end of the month) and (Date1 is the last day of February) and (Date2 is the last day of February), then
   *   change D2 to 30. If (Date2 is end of the month) and (Date1 is the last day of February), then change D1
   *   to 30. If D2 is 31 and D1 is 30 or 31, then change D2 to 30. If D1 is 31, then change D1 to 30. Day Count
   *   Fraction = (360 * (Y2 - Y1) + 30 * (M2 - M1) + D2 - D1) / (Days(Date3, Date4) * Pay frequency)
   * * Changeable - Changeable day count convention. Arbitrary/unpredictable changes to the day count can
   *   occur.
   * * Unknown - Unknown day count convention
   * * 30/365G - If D1 is last day of the month, then change D1 to 30. If D2 is last day of the month, then
   *   change D2 to 30. Day Count Fraction = (360 * (Y2 - Y1) + 30 * (M2 - M1) + D2 - D1) / 365
   * * A/364 - Day Count Fraction = Days(Date1, Date2) / 364
   * * NL/360 - If period between Date1 and Date2 contains 29 February: Day Count Fraction = (Days(Date1,
   *   Date2) - 1) / 360 Else: Day Count Fraction = Days(Date1, Date2) / 360
   * * B/252 - Day Count Fraction = Business Days(Date1, Date2) / 252
   */
  dayCount?: Maybe<Scalars["String"]>;
  /** Debt service type */
  debtServiceType?: Maybe<Scalars["String"]>;
  /**
   * A flag indicating whether the security has the option to be legally or economically defeased in the future,
   * as specified in the prospectus. That is, the issuing company has either provided money for all coupon and
   * principal payments to the trustee (economic) or, the bond issuer sets up an irrevocable trust for the profit
   * of the bondholder and is no longer legally bound by the convenants of the issue.
   */
  defeasable?: Maybe<Scalars["Boolean"]>;
  /**
   * The minimum multiples in which a bond can be held in the secondary market above the Minimum
   * Denomination
   */
  denominationIncrement?: Maybe<Scalars["Float"]>;
  /** Bond price including accrued interest */
  dirtyPrice?: Maybe<Scalars["Float"]>;
  dualCurrency?: Maybe<Scalars["Boolean"]>;
  /** Textual description of calendar adjustment methodology */
  exDividendCalendarAdjustment?: Maybe<Scalars["String"]>;
  /**
   * Integer used in conjunction with the ex-dividend calendar code. For example, if the calendar is a
   * "_n_th calendar day of month" value and the ex-dividend date is on the 30th calendar day of the month, 30
   * would show in this field. If the ex-dividend calendar description is a "_n_ calendar day(s) prior" value,
   * then it is an offset from the pay date. For example, 15 means "15 calendar days prior to the pay date."
   */
  exDividendCalendarAdjustmentValue?: Maybe<Scalars["Int"]>;
  exchangeListed?: Maybe<Scalars["Boolean"]>;
  /**
   * Date on which the first coupon payment (either cash, capitalization, PIK or some combination of these) is
   * made. Date is not adjusted for nonbusiness days.
   */
  firstCouponDate?: Maybe<Scalars["String"]>;
  /** Indicates if the bond has a floating rate coupon */
  floating?: Maybe<Scalars["Boolean"]>;
  /**
   * Indicates whether a bond is a green bond. Green bonds are fixed income products where the proceeds are used
   * or earmarked for environmentally beneficial projects. This also includes ESG bonds where the proceeds are
   * used only for environmental projects. Thomson Reuters definition of this field is in line with that of
   * Climate Bond Initiative’s definition.
   */
  green?: Maybe<Scalars["Boolean"]>;
  /**
   * A flag flag indicating whether there is a third party guarantee or, in some rare instances, a self guarantee
   * in effect as to the timely payment of interest and principal applicable to the asset within the guaranteed
   * period terms.
   */
  guaranteed?: Maybe<Scalars["Boolean"]>;
  /** warrants were attached to the bond at issue */
  hasWarrantsAttached?: Maybe<Scalars["Boolean"]>;
  inflationProtected?: Maybe<Scalars["Boolean"]>;
  /**
   * A description of the security itself. For example, bond, note, bill, debenture, preferred stock, warrant, or
   * commercial paper.
   */
  instrumentType?: Maybe<Scalars["String"]>;
  issue?: Maybe<IssueInput>;
  /** The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) currency code for the currency of issue */
  issueCurrency?: Maybe<Scalars["String"]>;
  /**
   * The settlement date for the initial placement of the security, except when a market designates a different
   * issue date.
   */
  issueDate?: Maybe<Scalars["String"]>;
  issuer?: Maybe<Issuer2Input>;
  /**
   * Date on which the last coupon payment (either cash, capitalization, PIK or some combination of these) prior
   * to the expected maturity date or the maturity date, whichever is currently applicable, is made. Date is not
   * adjusted for non-business days.
   */
  lastCouponDate?: Maybe<Scalars["String"]>;
  /** The last date on which this asset was included as a liquid ETF constituent */
  lastLiquidEtfConstituentDate?: Maybe<Scalars["String"]>;
  /** Liquidity criteria */
  liquidityCriteria?: Maybe<LiquidityCriteriaInput>;
  marketData?: Maybe<MarketDataInput>;
  /**
   * Date on which the principal amount of the security becomes due
   * and payable, as stated in the terms of the security.
   */
  maturityDate?: Maybe<Scalars["String"]>;
  /** A flag indicating whether the security is a issued under a medium term note program. */
  mediumTermNote?: Maybe<Scalars["Boolean"]>;
  /**
   * The smallest amount in which a bond may be purchased in the secondary market,
   * expressed in face value also known as par value
   */
  minimumDenomination?: Maybe<Scalars["Float"]>;
  /** The nearest call period's end date */
  nearestCallPeriodEndDate?: Maybe<Scalars["String"]>;
  /**
   * The nearest ordinary call period's start date. The nearest call may start before the loading date, as long
   * as the end date occurs afterward.
   */
  nearestCallPeriodStartDate?: Maybe<Scalars["String"]>;
  /** The nearest call's price */
  nearestCallPrice?: Maybe<Scalars["Float"]>;
  /** The date of the next coupon rate change */
  nextResetDate?: Maybe<Scalars["String"]>;
  /** The maximum notice period for the ordinary call */
  ordinaryCallNoticePeriodMaximumAmount?: Maybe<Scalars["Int"]>;
  /** The minimum notice period for the ordinary call */
  ordinaryCallNoticePeriodMinimumAmount?: Maybe<Scalars["Int"]>;
  /** The notice period units for the ordinary call */
  ordinaryCallNoticePeriodUnits?: Maybe<Scalars["String"]>;
  /** The option type for the bond's ordinary call */
  ordinaryCallOptionType?: Maybe<Scalars["String"]>;
  /** Indicates if the bond has an ordinary call option */
  ordinaryCallable?: Maybe<Scalars["Boolean"]>;
  originalAmountIssued?: Maybe<Scalars["Float"]>;
  /** Underlying benchmark */
  originalBenchmark?: Maybe<Scalars["String"]>;
  /**
   * Price at which the public may purchase the offered security from the underwriters, expressed as a percentage
   * of par
   */
  originalIssuePrice?: Maybe<Scalars["Float"]>;
  /** Difference between the yield of the security issued vs pricing security in basis points */
  originalIssueSpread?: Maybe<Scalars["Float"]>;
  originalYieldToMaturity?: Maybe<Scalars["Float"]>;
  /**
   * Identifies the defined par value at the initial issuance of the security, also known as stated or face
   * value, expressed in units of the current currency of denomination and usually updated based on the following
   * criteria:
   *
   * * For convertibles, it is the conversion par value and when in the initial segment with conversion terms
   * * For preferreds, it is the par value
   * * For all other cases and securities, it is the denomination amount
   *
   * Note that the value in the field may be different than the value produced by one of these criteria. Also, if
   * an applicable Denomination Amount is not available to display as the par value, a value may still be updated
   * in the field based on source documentation.
   */
  parValue?: Maybe<Scalars["Float"]>;
  partlyPaid?: Maybe<Scalars["Boolean"]>;
  /**
   * A flag indicating if the security can pay interest/dividends in the form of additional securities or equity
   * instead of, or in addition to, cash. This flag is set to true where the issuer (or borrower) has the
   * obligation to pay interest (or a portion of the interest) in-kind, which is compulsory and is predefined in
   * the terms of the security.
   */
  payableInKind?: Maybe<Scalars["Boolean"]>;
  /** Indicates if the bond is paying coupons & principals and not in default */
  performing?: Maybe<Scalars["Boolean"]>;
  perpetual?: Maybe<Scalars["Boolean"]>;
  /**
   * Price quote convention:
   * * 128THS
   * * 16THS
   * * 256THS
   * * 32NDS
   * * 320THS
   * * 64THS
   * * 8THS
   * * DECIMAL
   * * PRICE
   * * SPREAD
   * * UPFRONT
   */
  priceQuoteConvention?: Maybe<Scalars["String"]>;
  /** A description of whether a security is quoted in currency per unit or points of 100% */
  priceQuoteMethod?: Maybe<Scalars["String"]>;
  /** Textual description of rounding method */
  priceQuoteRoundingMethod?: Maybe<Scalars["String"]>;
  /**
   * The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the currency in which the principal is paid
   * in the current principal period
   */
  principalCurrency?: Maybe<Scalars["String"]>;
  /**
   * If the issuer's offering documentation (e.g., prospectus or offering memorandum) includes a statement to the
   * effect that the security will be offered and sold in reliance upon Rule 144A of the U.S. Securities Act of
   * 1933. It allows privately placed securities to be traded among qualified institutional buyers.
   */
  private144a?: Maybe<Scalars["Boolean"]>;
  privatePlacement?: Maybe<Scalars["Boolean"]>;
  /** Indicates if the bond is puttable */
  puttable?: Maybe<Scalars["Boolean"]>;
  /** True for bonds quoted at their full (dirty) price and false for those quoted at their clean price */
  quotedDirty?: Maybe<Scalars["Boolean"]>;
  /** Issue ratings */
  ratings?: Maybe<Ratings5Input>;
  /** Textual description of calendar adjustment methodology */
  recordDateCalendarAdjustment?: Maybe<Scalars["String"]>;
  recordDateCalendarAdjustmentValue?: Maybe<Scalars["Int"]>;
  /**
   * The redemption value of the asset at maturity. Generally this is par value (100.00) but may be different
   * for certain securities.
   */
  redemptionValue?: Maybe<Scalars["Float"]>;
  /** Rich/Cheap information */
  richCheap?: Maybe<RichCheapInput>;
  /** Description of the level of seniority, secured/unsecured status, preferred, non-preferred, etc. */
  seniority?: Maybe<Scalars["String"]>;
  /**
   * The series number, for example, 1998-F. This column may also be
   * used for hybrid securities, for example, MIPPS. For the Danish
   * market, the series number and Capital Centre information will be
   * available.
   */
  series?: Maybe<Scalars["String"]>;
  /** Sinking/Amortization Indicator */
  sinkingOrAmortizing?: Maybe<Scalars["Boolean"]>;
  /**
   * Further detail on the classification of sovereign securities:
   * * Agency
   * * Central Bank
   * * Government/Treasury
   * * Municipal
   * * Provincial
   */
  sovereignClass?: Maybe<Scalars["String"]>;
  /** The state of issuance for a US-based municipal security */
  state?: Maybe<Scalars["String"]>;
  /** Indicates whether the security is tax exempt by the state where it was issued */
  stateTaxExempt?: Maybe<Scalars["Boolean"]>;
  /**
   * Indicates if the bond is straight. A straight bond is a bullet bond that pays a fixed interest rate through
   * its life and has no embedded options.
   */
  straight?: Maybe<Scalars["Boolean"]>;
  /**
   * A flag indicating whether the coupon payments may be "stripped" from the offered security. Stripping is the
   * process of separating a bond into its principal component and interest components. These components are then
   * sold separately.
   */
  strippable?: Maybe<Scalars["Boolean"]>;
  /** Indicates whether the interest of a tax-exempt security is subject to the US Alternative Minimum Tax (AMT) */
  subjectToAlternativeMinimumTax?: Maybe<Scalars["Boolean"]>;
  /**
   * The total amount issued. For Treasuries, this represents amt_iss_public plus an amount that is kept by the
   * Federal Reserve for their own investing or made available to foreign banks and investors. For strips, this
   * represents the portion held in a stripped form. Expressed in thousands.
   */
  totalAmountIssued?: Maybe<Scalars["Float"]>;
  /** Indicates whether a security is exempt from federal taxes in the United States */
  unitedStatesTaxExempt?: Maybe<Scalars["Boolean"]>;
  /** Description of the registrant's planned use of its proceeds from the offering */
  useOfProceeds?: Maybe<Scalars["String"]>;
  /**
   * The tax deducted at source on interest or dividends to be paid by the investor. This is most often given
   * for international government issues.
   */
  withholdingTax?: Maybe<Scalars["Float"]>;
};
export type Issuer2Input = {
  /** Whether the issuer still exists as a company */
  active?: Maybe<Scalars["Boolean"]>;
  /** Whether the issuer is currently in bankruptcy */
  bankrupt?: Maybe<Scalars["Boolean"]>;
  /** Country of domicile for the issuer's principal executive offices */
  country?: Maybe<Scalars["String"]>;
  /** A physical address */
  headquartersAddress?: Maybe<HeadquartersAddressInput>;
  /** Unique identifier for an issuer */
  id: Scalars["String"];
  /**
   * Unique identifier for the immediate parent of the issuer, defined as a company that owns or controls greater
   * than 50% of the voting stock
   */
  immediateParentId?: Maybe<Scalars["String"]>;
  /** Current legal name of the issuer */
  legalName?: Maybe<Scalars["String"]>;
  /** Long name of the issuer */
  longName?: Maybe<Scalars["String"]>;
  /** Issuer ratings */
  ratings?: Maybe<Ratings4Input>;
  /** A physical address */
  registeredAddress?: Maybe<HeadquartersAddressInput>;
  /** Industry of the issuer */
  sector?: Maybe<Scalars["String"]>;
  /** Short name of the issuer */
  shortName?: Maybe<Scalars["String"]>;
  /** Description of the sovereign entity */
  sovereignClass?: Maybe<Scalars["String"]>;
  /** Within sector, further breakdown of the industry of the issuer */
  subsector?: Maybe<Scalars["String"]>;
  /**
   * Ticker code used to identify the common stock when available, else common acronym of company if known, else
   * matched to immediate parent, else unique value based on name for standalone organizations.
   */
  ticker?: Maybe<Scalars["String"]>;
  /**
   * Unique identifier for the ultimate parent of the issuer, defined as a company that owns or controls greater
   * than 50% of the voting stock at the highest level of the issuer tree
   */
  ultimateParentId?: Maybe<Scalars["String"]>;
  /**
   * URL of the legal entity's corporate website or company homepage. For funds, this is the URL of the fund
   * family.
   */
  url?: Maybe<Scalars["String"]>;
};
/** Issuer ratings */
export type Ratings4Input = {
  /** Rating */
  snpLongTerm?: Maybe<SnpLongTermInput>;
  /** Rating */
  snpSeniorSecured?: Maybe<SnpLongTermInput>;
  /** Rating */
  snpSeniorUnsecured?: Maybe<SnpLongTermInput>;
  /** Rating */
  snpShortTerm?: Maybe<SnpLongTermInput>;
  /** Rating */
  snpSubordinated?: Maybe<SnpLongTermInput>;
};
/** Issue ratings */
export type Ratings5Input = {
  /** Rating */
  snpLongTerm?: Maybe<SnpLongTermInput>;
  /** Rating */
  snpShortTerm?: Maybe<SnpLongTermInput>;
};
export type Fund2Input = {
  /** Fund allocation data */
  allocation?: Maybe<Allocation5Input>;
  /** Information on whether a fund is supported by Apex. Only applies to mutual funds. */
  apexSupport?: Maybe<ApexSupportInput>;
  /** Description representing the asset status */
  assetStatus?: Maybe<Scalars["String"]>;
  benchmark?: Maybe<Scalars["String"]>;
  /** BondHouse classification */
  classification?: Maybe<Scalars["String"]>;
  /** Fund distributions */
  distributions?: Maybe<Distributions2Input>;
  fees?: Maybe<FeesInput>;
  focus?: Maybe<FocusInput>;
  /** fund type, should matches assetType on the parent level */
  fundType?: Maybe<Scalars["String"]>;
  inceptionDate?: Maybe<Scalars["String"]>;
  /** Indicates whether the share class is institutional only */
  institutional?: Maybe<Scalars["Boolean"]>;
  /** The fund management company */
  managementCompany?: Maybe<Scalars["String"]>;
  /**
   * The market mid price. Certain types of funds, including closed-end funds (CEFs) and exchange-traded funds
   * (ETFs) may trade at a premium or discount.
   */
  midPrice?: Maybe<Scalars["Float"]>;
  /**
   * The net asset value (NAV) per share, equivalent to the market value of the underlying securities divided by
   * the number of shares outstanding
   */
  netAssetValuePerShare?: Maybe<Scalars["Float"]>;
  /** Fund net assets */
  netAssets?: Maybe<Scalars["Float"]>;
  /** Date of the latest fund assets value */
  netAssetsDate?: Maybe<Scalars["String"]>;
  /** The date of the latest price and NAV/share figures */
  priceDate?: Maybe<Scalars["String"]>;
  regulatoryStructure?: Maybe<Scalars["String"]>;
  replicationStrategy?: Maybe<Scalars["String"]>;
  /** Lipper Leaders scores */
  scores?: Maybe<Scores3Input>;
  /** Specifies the minimum number of shares that can be purchased, as regulated by an exchange */
  tradeLotSize?: Maybe<Scalars["Float"]>;
  /** Fund yields */
  yields?: Maybe<YieldsInput>;
};
/** Fund allocation data */
export type Allocation5Input = {
  /** Asset allocation data */
  asset?: Maybe<Asset2Input>;
  /** Currency allocation data */
  currency?: Maybe<Scalars["JSON"]>;
  /** Debt type allocation */
  debtType?: Maybe<DebtType2Input>;
  /** Country allocation data */
  equityCountry?: Maybe<Scalars["JSON"]>;
  /** Region allocation data */
  equityRegion?: Maybe<RegionInput>;
  /** Country allocation data */
  fixedIncomeCountry?: Maybe<Scalars["JSON"]>;
  /** Region allocation data */
  fixedIncomeRegion?: Maybe<RegionInput>;
  /** GICS sub-industry allocation data */
  gicsSubIndustry?: Maybe<GicsSubIndustryInput>;
  /** Maturity allocation data */
  maturity?: Maybe<MaturityInput>;
  /** Rating allocation data */
  rating?: Maybe<Rating2Input>;
  /** Region allocation data */
  region?: Maybe<RegionInput>;
  /** TRBC Industry allocation data */
  trbcIndustry?: Maybe<TrbcIndustryInput>;
};
/** Fund distributions */
export type Distributions2Input = {
  capitalGain?: Maybe<CapitalGain3Input>;
  foreignTaxCredit?: Maybe<ForeignTaxCredit2Input>;
  income?: Maybe<Income2Input>;
  repaymentCategory?: Maybe<RepaymentCategory2Input>;
};
export type CapitalGain3Input = {
  capitalGain?: Maybe<CapitalGain2Input>;
  collectibles?: Maybe<CapitalGain2Input>;
  longTermCapitalGain?: Maybe<CapitalGain2Input>;
  mediumTermCapitalGain?: Maybe<CapitalGain2Input>;
  nonQualifiedShortTermCapitalGain?: Maybe<CapitalGain2Input>;
  qualifiedShortTermCapitalGain?: Maybe<CapitalGain2Input>;
  returnOfCapital?: Maybe<CapitalGain2Input>;
  shortTermCapitalGain?: Maybe<CapitalGain2Input>;
  superLongTermCapitalGain?: Maybe<CapitalGain2Input>;
};
export type ForeignTaxCredit2Input = {
  foreignTaxCredit?: Maybe<CapitalGain2Input>;
  nonQualifiedForeignTaxPaid?: Maybe<CapitalGain2Input>;
  qualifiedForeignTaxPaid?: Maybe<CapitalGain2Input>;
};
export type Income2Input = {
  aggregateAccrual?: Maybe<CapitalGain2Input>;
  exemptIncome?: Maybe<CapitalGain2Input>;
  incomeDividend?: Maybe<CapitalGain2Input>;
  interestIncome?: Maybe<CapitalGain2Input>;
  nonQualifiedIncomeDividend?: Maybe<CapitalGain2Input>;
  qualifiedIncomeDividend?: Maybe<CapitalGain2Input>;
};
export type RepaymentCategory2Input = {
  bonusIssue?: Maybe<CapitalGain2Input>;
  factor?: Maybe<CapitalGain2Input>;
  repayment?: Maybe<CapitalGain2Input>;
  rightsIssue?: Maybe<CapitalGain2Input>;
  split?: Maybe<CapitalGain2Input>;
};
/** Lipper Leaders scores */
export type Scores3Input = {
  /** Fund scores organized by the time period of measurement */
  consistentReturn?: Maybe<TotalReturnInput>;
  /** Fund scores organized by the time period of measurement */
  expense?: Maybe<TotalReturnInput>;
  /** Fund scores organized by the time period of measurement */
  preservation?: Maybe<TotalReturnInput>;
  /** Fund scores organized by the time period of measurement */
  taxEfficiency?: Maybe<TotalReturnInput>;
  /** Fund scores organized by the time period of measurement */
  totalReturn?: Maybe<TotalReturnInput>;
};
export enum Frequency {
  Daily = "DAILY"
}
export enum HalfLifeUnits {
  Days = "DAYS",
  Months = "MONTHS",
  Years = "YEARS"
}
export enum LookbackPeriodUnits {
  Days = "DAYS",
  Months = "MONTHS",
  Years = "YEARS"
}
export interface GetAssetCovariancesResponse {
  __typename?: "GetAssetCovariancesResponse";
  assetIds: Array<Maybe<Scalars["String"]>>;
  /**
   * The actual asset covariance matrix between assets where each row(i), column(j) represents the covariance
   * between asset i and asset j. The indices of the covariance matrix are aligned with that of the
   * assetIds property in the response.
   */
  matrix: Array<Maybe<Array<Maybe<Scalars["Float"]>>>>;
}
export type GetAssetCovariancesRequestInput = {
  assetIds: Array<Maybe<Scalars["String"]>>;
  currency: Scalars["String"];
  /** Analysis date that marks the last day of observations. Defaults to the previous business day. */
  date?: Maybe<Scalars["String"]>;
  /** Frequency of observations */
  frequency?: Maybe<Frequency>;
  /**
   * Amount of time in the half-life, using the amount specified in the halfLifeAmount parameter. Defaults to
   * "Months", and halfLifeAmount defaults to 6, so there is a 6-month half-life by default.
   */
  halfLifeAmount?: Maybe<Scalars["Int"]>;
  /**
   * Units of time in the half-life, using the amount specified in the halfLifeAmount parameter. Defaults to
   * "Months", and halfLifeAmount defaults to 6, so there is a 6-month half-life by default.
   */
  halfLifeUnits?: Maybe<HalfLifeUnits>;
  /**
   * Amount of time in the lookback period, using units specified in the lookbackPeriodUnits parameter.
   * Defaults to 24, and lookbackPeriodUnits defaults to "Months", so the default lookback period is 24
   * months.
   */
  lookbackPeriodAmount?: Maybe<Scalars["Int"]>;
  /**
   * Units of time in the lookback period, using the amount specified in the lookbackPeriodAmount parameter.
   * Defaults to "Months", and lookbackPeriodAmount defaults to 24, so the default lookback period is 24
   * months.
   */
  lookbackPeriodUnits?: Maybe<LookbackPeriodUnits>;
  /** If true, ignores cached covariance terms. Defaults to false. */
  refresh?: Maybe<Scalars["Boolean"]>;
};
/** The response when clearing the covariances cache */
export interface ClearAssetCovariancesCacheResponse {
  __typename?: "ClearAssetCovariancesCacheResponse";
  /** The count of cached covariances deleted */
  count?: Maybe<Scalars["Int"]>;
}
/** A request to clear the covariances cache */
export type ClearAssetCovariancesCacheRequestInput = {
  /** An optional list of asset IDs whose covariances should be cleared */
  assetIds?: Maybe<Array<Maybe<Scalars["String"]>>>;
};
/** A response containing the asset IDs in the universe */
export interface ListAssetIdsResponse {
  __typename?: "ListAssetIdsResponse";
  /** Asset IDs in the universe */
  assetIds: Array<Maybe<Scalars["String"]>>;
}
/** A request to list the asset IDs in the universe */
export type ListAssetIdsRequestInput = {
  /** A maximum number of results to return */
  size?: Maybe<Scalars["Int"]>;
};
export interface ScoreAssetResponse {
  __typename?: "ScoreAssetResponse";
  /** Scores */
  scores: Scores5;
}
/** Scores */
export interface Scores5 {
  __typename?: "Scores5";
  /**
   * BondHouse's proprietary measure for the attractiveness of an asset, which is a function of its expected
   * return and risk
   */
  attractiveness?: Maybe<Scalars["Float"]>;
  /**
   * BondHouse's proprietary credit score, based on a number of inputs to evaluate the credit-worthiness of a
   * bond
   */
  credit?: Maybe<Scalars["Float"]>;
  /**
   * (Funds only) BondHouse's proprietary efficiency score, measuring the effectiveness of fund management in
   * managing taxes, expenses, etc.
   */
  efficiency?: Maybe<Scalars["Float"]>;
  /** BondHouse's proprietary liquidity score, which measures the investor's ability to transact in an asset */
  liquidity?: Maybe<Scalars["Float"]>;
  /** BondHouse's proprietary risk measure based on our risk model */
  risk?: Maybe<Scalars["Float"]>;
}
/** Score an asset by passing the whole asset object */
export type ScoreAssetRequestInput = {
  asset: Asset4Input;
};
export type Asset4Input = {
  /** Allocation data */
  allocation?: Maybe<Allocation2Input>;
  analytics?: Maybe<AnalyticsInput>;
  /** Asset sub-types specific to an instrument type */
  assetSubtype?: Maybe<AssetSubtype>;
  /** Higher level asset and instrument types, for instance bonds, stocks, funds, etc. */
  assetType?: Maybe<AssetType>;
  /** Bond object, which include Corp/Muni/Sovereign etc. */
  bond?: Maybe<Bond3Input>;
  country?: Maybe<Scalars["String"]>;
  createdAt?: Maybe<Scalars["String"]>;
  createdBy?: Maybe<Scalars["String"]>;
  /** The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) currency code for the asset currency */
  currency?: Maybe<Scalars["String"]>;
  description?: Maybe<Scalars["String"]>;
  /** BondHouse generated readable id that should have 1 to 1 relationship with the generated ID */
  displayId?: Maybe<Scalars["String"]>;
  equity?: Maybe<EquityInput>;
  /** Scores for Environmental, Social, and Governance */
  esgScores?: Maybe<EsgScores2Input>;
  fund?: Maybe<Fund3Input>;
  /** BondHouse unique identifier for an asset. This is not a public identifier. */
  id: Scalars["String"];
  /**
   * asset/security identifier:
   * * cusip - 9 alpha-numeric characters that includes the check digit, first 6 alpha numeric characters refers to
   *   the issuer
   * * isin - 12 alpha-numeric characters, first 2 characters contains country code, last character is a check
   *   digit
   * * sedol - 7 alpha-numeric characters, single security can have multiple SEDOL, handle later
   * * primaryTicker - primary exchange ticker
   * * cins - 9 alpha-numeric characters managed by cusip
   * * bbGlobal - 12 alpha-numeric characters managed by Bloomberg
   * The first 2 characters are upper-case consonants (including "Y"),
   * the third character is the upper-case "G",
   * characters 4 -11 are any upper-case consonant (including "Y")
   * or integer between 0 and 9, and the last character is a check-digit.
   * An identifier is assigned to instruments of all asset classes,
   * is unique to an individual instrument and once issued will not change for an instrument.
   * * refinitivAssetId - 18 alpha-numeric characters asset id, example sourced from DSFI
   * * refinitivIssuePermId - unique Refinitiv system-generated PermID for an asset
   * * refinitivLipperId - id to specify a share class of a fund and also
   * * refinitivLipperPermId - lipper permanent id
   * * valoren - nine digits for official Swiss Identification number
   * * cik - SEC's central index key for corporations/individuals
   * * apex - APEX identifier
   */
  identifiers?: Maybe<IdentifiersInput>;
  legalEntity?: Maybe<LegalEntityInput>;
  /** Indicates whether there are current bids/offers that makes the asset transactable */
  liquid?: Maybe<Scalars["Boolean"]>;
  market?: Maybe<Scalars["String"]>;
  metadata?: Maybe<Scalars["JSON"]>;
  name?: Maybe<Scalars["String"]>;
  /**
   * BondHouse best price from available pricing sources, quote following market conventions:
   * * Clean price for most bonds
   * * Dirty price for preferred stock
   * * Close-mid for equities
   * * Market price for funds
   */
  price?: Maybe<Scalars["Float"]>;
  priceDate?: Maybe<Scalars["String"]>;
  priceQuotes?: Maybe<Array<Maybe<PriceQuotesListItemInput>>>;
  primaryExchange?: Maybe<Scalars["String"]>;
  primaryExchangeMic?: Maybe<Scalars["String"]>;
  /** Normalized rating */
  rating?: Maybe<Scalars["String"]>;
  /** BondHouse's proprietary scores */
  scores?: Maybe<Scores2Input>;
  /**
   * The common street ticker for a security. For bonds, ticker code used to identify the common stock when
   * available, else common acronym of company if known, else matched to immediate parent, else unique value
   * based on name for standalone organizations.
   */
  ticker?: Maybe<Scalars["String"]>;
  unit?: Maybe<Scalars["String"]>;
  /** Universe inclusion information */
  universes?: Maybe<UniversesInput>;
  updatedAt?: Maybe<Scalars["String"]>;
  updatedBy?: Maybe<Scalars["String"]>;
};
/** Bond object, which include Corp/Muni/Sovereign etc. */
export type Bond3Input = {
  accruedInterest?: Maybe<Scalars["Float"]>;
  /** Indicates if the bond is active */
  active?: Maybe<Scalars["Boolean"]>;
  /** Current outstanding amount expressed in the currency of denomination */
  amountOutstanding?: Maybe<Scalars["Float"]>;
  /** Current outstanding amount date */
  amountOutstandingDate?: Maybe<Scalars["String"]>;
  /**
   * A flag indicating that the security pays equal amounts on each payment date. Each such payment consists of
   * a decreasing interest amount and an increasing principal amount
   */
  annuity?: Maybe<Scalars["Boolean"]>;
  /** Description representing the asset status */
  assetStatus?: Maybe<Scalars["String"]>;
  /** Call type for callable bonds */
  callType?: Maybe<Scalars["String"]>;
  /** Indicates if the bond is callable */
  callable?: Maybe<Scalars["Boolean"]>;
  /** Type of allocation of municipal bond proceeds */
  capType?: Maybe<Scalars["String"]>;
  classifications?: Maybe<ClassificationsInput>;
  /** Bond price excluding accrued interest */
  cleanPrice?: Maybe<Scalars["Float"]>;
  /** Indicates if the bond has a clean-up call */
  cleanUpCallable?: Maybe<Scalars["Boolean"]>;
  /** Indicates if the bond is convertible */
  convertible?: Maybe<Scalars["Boolean"]>;
  /**
   * Code representing the country in which the security was issued.
   * This is usually, the country of residence of the issuer. For Global
   * bonds the Country of Issue is determined by the country of the
   * currency_cd, for Eurobonds it is always 'EU'.
   */
  countryOfIssue?: Maybe<Scalars["String"]>;
  /** Description representing the coupon type */
  couponClass?: Maybe<Scalars["String"]>;
  couponResetHistory?: Maybe<Array<Maybe<CouponResetHistoryListItemInput>>>;
  /**
   * list of coupone period, where each of the coupone period
   * can contain complex logic for coupon calculation
   */
  couponSchedule?: Maybe<Array<Maybe<CouponScheduleListItemInput>>>;
  /** Coupon type */
  couponType?: Maybe<Scalars["String"]>;
  /**
   * Indicates if the bond is a covered bond. Covered bonds are debt securities issued by a bank or mortgage
   * institution and collateralised against a pool of assets that, in case of failure of the issuer, can cover
   * claims at any point of time.
   */
  covered?: Maybe<Scalars["Boolean"]>;
  /** Creation information */
  creationUnit?: Maybe<Scalars["String"]>;
  /** Credit enhancements including guarantor information for principal and interest payments */
  creditEnhancement?: Maybe<CreditEnhancementInput>;
  /** current coupon of the bond */
  currentCoupon?: Maybe<Scalars["Float"]>;
  /** Date from which interest on the bond begins accruing. */
  datedDate?: Maybe<Scalars["String"]>;
  /**
   * Day count convention.
   *
   * The rules for each day count are listed below. More than one rule may take effect. They are applied in
   * order, and if a date is changed in one rule the changed value is used in the following rules. Where Date1
   * is mentioned, it can be decomposed as Date1 = (D1,M1,Y1), with the same principle applied to Date2, etc.
   *
   * * 30U/360 - If (Date2 is end of the month) and (Date1 is the last day of February) and (Date2 is the last
   *   day of February), then change D2 to 30. If (Date2 is end of the month) and (Date1 is the last day of
   *   February), then change D1 to 30. If D2 is 31 and D1 is 30 or 31, then change D2 to 30. If D1 is 31, then
   *   change D1 to 30. Day Count Fraction = (360*(Y2-Y1)+30*(M2-M1)+D2-D1) / 360
   * * 30/360_ISDA - If D1=31, then change D1 to 30 If D2=31 and D1=30, then change D2 to 30. Day Count
   *   Fraction = (360 * (Y2 - Y1) + 30 * (M2 - M1) + D2 - D1) / 360
   * * A/360 - Day Count Fraction = Days(Date1, Date2) / 360
   * * A/365C - Date3 is the next interest payment date. If the number of days of interest accrual is less than
   *   the actual number of days in the interest period: Day Count Fraction = (Days(Date1, Date2) * Pay
   *   frequency) / 365. If the number of days of interest accrual exceeds 365 / Pay frequency, or 182.5 days for
   *   a semi-annual pay security: Day Count Fraction = 1- (Days(Date2, Date3) * Pay frequency) / 365
   * * A/A_ICMA - Date3 is the previous interest payment date. Date4 is the next interest payment date. Day
   *   Count Fraction = Days(Date1, Date2) / (Days(Date3, Date4) * Pay frequency)
   * * NL/365 - If period between Date1 and Date2 contains 29 February: Day Count Fraction = (Days(Date1,
   *   Date2)-1) / 365 Else: Day Count Fraction = Days(Date1, Date2) / 365
   * * A/A_ISDA - Day Count Fraction = Days(Date1, Date2) / 365
   * * A/365 - Day Count Fraction = (Days not in leap year / 365) + (Days in leap year / 366)
   * * 30E/360_ICMA - If D1 is 31, then change D1 to 30. If D2 is 31, then change D2 to 30. Day Count Fraction
   *   = (360 * (Y2 - Y1) + 30 * (M2 - M1) + D2 - D1) / 360
   * * 30E/360_ISDA - If D1 is last day of the month, then change D1 to 30. If D2 is last day of the month,
   *   then change D2 to 30. Day Count Fraction = (360 * (Y2 - Y1) + 30 * (M2 - M1) + D2 - D1) / 360
   * * A/365L - If payment frequency is annual and 29 February is included in the interest period or if payment
   *   frequency is more frequent than annual and payment date falls in a leap year: Day Count Fraction =
   *   Days(Date1, Date2) / 366 Else: Day Count Fraction = Days(Date1, Date2) / 365
   * * A/A_AFB - If period between Date1 and Date2 contains 29 February: Day Count Fraction =
   *   Days(Date1, Date2) / 366 Else: Day Count Fraction = Days(Date1, Date2) / 365
   * * 30/A - Date3 is the previous interest payment date. Date4 is the next interest payment date. If (Date2
   *   is end of the month) and (Date1 is the last day of February) and (Date2 is the last day of February), then
   *   change D2 to 30. If (Date2 is end of the month) and (Date1 is the last day of February), then change D1
   *   to 30. If D2 is 31 and D1 is 30 or 31, then change D2 to 30. If D1 is 31, then change D1 to 30. Day Count
   *   Fraction = (360 * (Y2 - Y1) + 30 * (M2 - M1) + D2 - D1) / (Days(Date3, Date4) * Pay frequency)
   * * Changeable - Changeable day count convention. Arbitrary/unpredictable changes to the day count can
   *   occur.
   * * Unknown - Unknown day count convention
   * * 30/365G - If D1 is last day of the month, then change D1 to 30. If D2 is last day of the month, then
   *   change D2 to 30. Day Count Fraction = (360 * (Y2 - Y1) + 30 * (M2 - M1) + D2 - D1) / 365
   * * A/364 - Day Count Fraction = Days(Date1, Date2) / 364
   * * NL/360 - If period between Date1 and Date2 contains 29 February: Day Count Fraction = (Days(Date1,
   *   Date2) - 1) / 360 Else: Day Count Fraction = Days(Date1, Date2) / 360
   * * B/252 - Day Count Fraction = Business Days(Date1, Date2) / 252
   */
  dayCount?: Maybe<Scalars["String"]>;
  /** Debt service type */
  debtServiceType?: Maybe<Scalars["String"]>;
  /**
   * A flag indicating whether the security has the option to be legally or economically defeased in the future,
   * as specified in the prospectus. That is, the issuing company has either provided money for all coupon and
   * principal payments to the trustee (economic) or, the bond issuer sets up an irrevocable trust for the profit
   * of the bondholder and is no longer legally bound by the convenants of the issue.
   */
  defeasable?: Maybe<Scalars["Boolean"]>;
  /**
   * The minimum multiples in which a bond can be held in the secondary market above the Minimum
   * Denomination
   */
  denominationIncrement?: Maybe<Scalars["Float"]>;
  /** Bond price including accrued interest */
  dirtyPrice?: Maybe<Scalars["Float"]>;
  dualCurrency?: Maybe<Scalars["Boolean"]>;
  /** Textual description of calendar adjustment methodology */
  exDividendCalendarAdjustment?: Maybe<Scalars["String"]>;
  /**
   * Integer used in conjunction with the ex-dividend calendar code. For example, if the calendar is a
   * "_n_th calendar day of month" value and the ex-dividend date is on the 30th calendar day of the month, 30
   * would show in this field. If the ex-dividend calendar description is a "_n_ calendar day(s) prior" value,
   * then it is an offset from the pay date. For example, 15 means "15 calendar days prior to the pay date."
   */
  exDividendCalendarAdjustmentValue?: Maybe<Scalars["Int"]>;
  exchangeListed?: Maybe<Scalars["Boolean"]>;
  /**
   * Date on which the first coupon payment (either cash, capitalization, PIK or some combination of these) is
   * made. Date is not adjusted for nonbusiness days.
   */
  firstCouponDate?: Maybe<Scalars["String"]>;
  /** Indicates if the bond has a floating rate coupon */
  floating?: Maybe<Scalars["Boolean"]>;
  /**
   * Indicates whether a bond is a green bond. Green bonds are fixed income products where the proceeds are used
   * or earmarked for environmentally beneficial projects. This also includes ESG bonds where the proceeds are
   * used only for environmental projects. Thomson Reuters definition of this field is in line with that of
   * Climate Bond Initiative’s definition.
   */
  green?: Maybe<Scalars["Boolean"]>;
  /**
   * A flag flag indicating whether there is a third party guarantee or, in some rare instances, a self guarantee
   * in effect as to the timely payment of interest and principal applicable to the asset within the guaranteed
   * period terms.
   */
  guaranteed?: Maybe<Scalars["Boolean"]>;
  /** warrants were attached to the bond at issue */
  hasWarrantsAttached?: Maybe<Scalars["Boolean"]>;
  inflationProtected?: Maybe<Scalars["Boolean"]>;
  /**
   * A description of the security itself. For example, bond, note, bill, debenture, preferred stock, warrant, or
   * commercial paper.
   */
  instrumentType?: Maybe<Scalars["String"]>;
  issue?: Maybe<IssueInput>;
  /** The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) currency code for the currency of issue */
  issueCurrency?: Maybe<Scalars["String"]>;
  /**
   * The settlement date for the initial placement of the security, except when a market designates a different
   * issue date.
   */
  issueDate?: Maybe<Scalars["String"]>;
  issuer?: Maybe<Issuer3Input>;
  /**
   * Date on which the last coupon payment (either cash, capitalization, PIK or some combination of these) prior
   * to the expected maturity date or the maturity date, whichever is currently applicable, is made. Date is not
   * adjusted for non-business days.
   */
  lastCouponDate?: Maybe<Scalars["String"]>;
  /** The last date on which this asset was included as a liquid ETF constituent */
  lastLiquidEtfConstituentDate?: Maybe<Scalars["String"]>;
  /** Liquidity criteria */
  liquidityCriteria?: Maybe<LiquidityCriteriaInput>;
  marketData?: Maybe<MarketDataInput>;
  /**
   * Date on which the principal amount of the security becomes due
   * and payable, as stated in the terms of the security.
   */
  maturityDate?: Maybe<Scalars["String"]>;
  /** A flag indicating whether the security is a issued under a medium term note program. */
  mediumTermNote?: Maybe<Scalars["Boolean"]>;
  /**
   * The smallest amount in which a bond may be purchased in the secondary market,
   * expressed in face value also known as par value
   */
  minimumDenomination?: Maybe<Scalars["Float"]>;
  /** The nearest call period's end date */
  nearestCallPeriodEndDate?: Maybe<Scalars["String"]>;
  /**
   * The nearest ordinary call period's start date. The nearest call may start before the loading date, as long
   * as the end date occurs afterward.
   */
  nearestCallPeriodStartDate?: Maybe<Scalars["String"]>;
  /** The nearest call's price */
  nearestCallPrice?: Maybe<Scalars["Float"]>;
  /** The date of the next coupon rate change */
  nextResetDate?: Maybe<Scalars["String"]>;
  /** The maximum notice period for the ordinary call */
  ordinaryCallNoticePeriodMaximumAmount?: Maybe<Scalars["Int"]>;
  /** The minimum notice period for the ordinary call */
  ordinaryCallNoticePeriodMinimumAmount?: Maybe<Scalars["Int"]>;
  /** The notice period units for the ordinary call */
  ordinaryCallNoticePeriodUnits?: Maybe<Scalars["String"]>;
  /** The option type for the bond's ordinary call */
  ordinaryCallOptionType?: Maybe<Scalars["String"]>;
  /** Indicates if the bond has an ordinary call option */
  ordinaryCallable?: Maybe<Scalars["Boolean"]>;
  originalAmountIssued?: Maybe<Scalars["Float"]>;
  /** Underlying benchmark */
  originalBenchmark?: Maybe<Scalars["String"]>;
  /**
   * Price at which the public may purchase the offered security from the underwriters, expressed as a percentage
   * of par
   */
  originalIssuePrice?: Maybe<Scalars["Float"]>;
  /** Difference between the yield of the security issued vs pricing security in basis points */
  originalIssueSpread?: Maybe<Scalars["Float"]>;
  originalYieldToMaturity?: Maybe<Scalars["Float"]>;
  /**
   * Identifies the defined par value at the initial issuance of the security, also known as stated or face
   * value, expressed in units of the current currency of denomination and usually updated based on the following
   * criteria:
   *
   * * For convertibles, it is the conversion par value and when in the initial segment with conversion terms
   * * For preferreds, it is the par value
   * * For all other cases and securities, it is the denomination amount
   *
   * Note that the value in the field may be different than the value produced by one of these criteria. Also, if
   * an applicable Denomination Amount is not available to display as the par value, a value may still be updated
   * in the field based on source documentation.
   */
  parValue?: Maybe<Scalars["Float"]>;
  partlyPaid?: Maybe<Scalars["Boolean"]>;
  /**
   * A flag indicating if the security can pay interest/dividends in the form of additional securities or equity
   * instead of, or in addition to, cash. This flag is set to true where the issuer (or borrower) has the
   * obligation to pay interest (or a portion of the interest) in-kind, which is compulsory and is predefined in
   * the terms of the security.
   */
  payableInKind?: Maybe<Scalars["Boolean"]>;
  /** Indicates if the bond is paying coupons & principals and not in default */
  performing?: Maybe<Scalars["Boolean"]>;
  perpetual?: Maybe<Scalars["Boolean"]>;
  /**
   * Price quote convention:
   * * 128THS
   * * 16THS
   * * 256THS
   * * 32NDS
   * * 320THS
   * * 64THS
   * * 8THS
   * * DECIMAL
   * * PRICE
   * * SPREAD
   * * UPFRONT
   */
  priceQuoteConvention?: Maybe<Scalars["String"]>;
  /** A description of whether a security is quoted in currency per unit or points of 100% */
  priceQuoteMethod?: Maybe<Scalars["String"]>;
  /** Textual description of rounding method */
  priceQuoteRoundingMethod?: Maybe<Scalars["String"]>;
  /**
   * The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the currency in which the principal is paid
   * in the current principal period
   */
  principalCurrency?: Maybe<Scalars["String"]>;
  /**
   * If the issuer's offering documentation (e.g., prospectus or offering memorandum) includes a statement to the
   * effect that the security will be offered and sold in reliance upon Rule 144A of the U.S. Securities Act of
   * 1933. It allows privately placed securities to be traded among qualified institutional buyers.
   */
  private144a?: Maybe<Scalars["Boolean"]>;
  privatePlacement?: Maybe<Scalars["Boolean"]>;
  /** Indicates if the bond is puttable */
  puttable?: Maybe<Scalars["Boolean"]>;
  /** True for bonds quoted at their full (dirty) price and false for those quoted at their clean price */
  quotedDirty?: Maybe<Scalars["Boolean"]>;
  /** Issue ratings */
  ratings?: Maybe<Ratings7Input>;
  /** Textual description of calendar adjustment methodology */
  recordDateCalendarAdjustment?: Maybe<Scalars["String"]>;
  recordDateCalendarAdjustmentValue?: Maybe<Scalars["Int"]>;
  /**
   * The redemption value of the asset at maturity. Generally this is par value (100.00) but may be different
   * for certain securities.
   */
  redemptionValue?: Maybe<Scalars["Float"]>;
  /** Rich/Cheap information */
  richCheap?: Maybe<RichCheapInput>;
  /** Description of the level of seniority, secured/unsecured status, preferred, non-preferred, etc. */
  seniority?: Maybe<Scalars["String"]>;
  /**
   * The series number, for example, 1998-F. This column may also be
   * used for hybrid securities, for example, MIPPS. For the Danish
   * market, the series number and Capital Centre information will be
   * available.
   */
  series?: Maybe<Scalars["String"]>;
  /** Sinking/Amortization Indicator */
  sinkingOrAmortizing?: Maybe<Scalars["Boolean"]>;
  /**
   * Further detail on the classification of sovereign securities:
   * * Agency
   * * Central Bank
   * * Government/Treasury
   * * Municipal
   * * Provincial
   */
  sovereignClass?: Maybe<Scalars["String"]>;
  /** The state of issuance for a US-based municipal security */
  state?: Maybe<Scalars["String"]>;
  /** Indicates whether the security is tax exempt by the state where it was issued */
  stateTaxExempt?: Maybe<Scalars["Boolean"]>;
  /**
   * Indicates if the bond is straight. A straight bond is a bullet bond that pays a fixed interest rate through
   * its life and has no embedded options.
   */
  straight?: Maybe<Scalars["Boolean"]>;
  /**
   * A flag indicating whether the coupon payments may be "stripped" from the offered security. Stripping is the
   * process of separating a bond into its principal component and interest components. These components are then
   * sold separately.
   */
  strippable?: Maybe<Scalars["Boolean"]>;
  /** Indicates whether the interest of a tax-exempt security is subject to the US Alternative Minimum Tax (AMT) */
  subjectToAlternativeMinimumTax?: Maybe<Scalars["Boolean"]>;
  /**
   * The total amount issued. For Treasuries, this represents amt_iss_public plus an amount that is kept by the
   * Federal Reserve for their own investing or made available to foreign banks and investors. For strips, this
   * represents the portion held in a stripped form. Expressed in thousands.
   */
  totalAmountIssued?: Maybe<Scalars["Float"]>;
  /** Indicates whether a security is exempt from federal taxes in the United States */
  unitedStatesTaxExempt?: Maybe<Scalars["Boolean"]>;
  /** Description of the registrant's planned use of its proceeds from the offering */
  useOfProceeds?: Maybe<Scalars["String"]>;
  /**
   * The tax deducted at source on interest or dividends to be paid by the investor. This is most often given
   * for international government issues.
   */
  withholdingTax?: Maybe<Scalars["Float"]>;
};
export type Issuer3Input = {
  /** Whether the issuer still exists as a company */
  active?: Maybe<Scalars["Boolean"]>;
  /** Whether the issuer is currently in bankruptcy */
  bankrupt?: Maybe<Scalars["Boolean"]>;
  /** Country of domicile for the issuer's principal executive offices */
  country?: Maybe<Scalars["String"]>;
  /** A physical address */
  headquartersAddress?: Maybe<HeadquartersAddressInput>;
  /** Unique identifier for an issuer */
  id: Scalars["String"];
  /**
   * Unique identifier for the immediate parent of the issuer, defined as a company that owns or controls greater
   * than 50% of the voting stock
   */
  immediateParentId?: Maybe<Scalars["String"]>;
  /** Current legal name of the issuer */
  legalName?: Maybe<Scalars["String"]>;
  /** Long name of the issuer */
  longName?: Maybe<Scalars["String"]>;
  /** Issuer ratings */
  ratings?: Maybe<Ratings6Input>;
  /** A physical address */
  registeredAddress?: Maybe<HeadquartersAddressInput>;
  /** Industry of the issuer */
  sector?: Maybe<Scalars["String"]>;
  /** Short name of the issuer */
  shortName?: Maybe<Scalars["String"]>;
  /** Description of the sovereign entity */
  sovereignClass?: Maybe<Scalars["String"]>;
  /** Within sector, further breakdown of the industry of the issuer */
  subsector?: Maybe<Scalars["String"]>;
  /**
   * Ticker code used to identify the common stock when available, else common acronym of company if known, else
   * matched to immediate parent, else unique value based on name for standalone organizations.
   */
  ticker?: Maybe<Scalars["String"]>;
  /**
   * Unique identifier for the ultimate parent of the issuer, defined as a company that owns or controls greater
   * than 50% of the voting stock at the highest level of the issuer tree
   */
  ultimateParentId?: Maybe<Scalars["String"]>;
  /**
   * URL of the legal entity's corporate website or company homepage. For funds, this is the URL of the fund
   * family.
   */
  url?: Maybe<Scalars["String"]>;
};
/** Issuer ratings */
export type Ratings6Input = {
  /** Rating */
  snpLongTerm?: Maybe<SnpLongTermInput>;
  /** Rating */
  snpSeniorSecured?: Maybe<SnpLongTermInput>;
  /** Rating */
  snpSeniorUnsecured?: Maybe<SnpLongTermInput>;
  /** Rating */
  snpShortTerm?: Maybe<SnpLongTermInput>;
  /** Rating */
  snpSubordinated?: Maybe<SnpLongTermInput>;
};
/** Issue ratings */
export type Ratings7Input = {
  /** Rating */
  snpLongTerm?: Maybe<SnpLongTermInput>;
  /** Rating */
  snpShortTerm?: Maybe<SnpLongTermInput>;
};
export type Fund3Input = {
  /** Fund allocation data */
  allocation?: Maybe<Allocation6Input>;
  /** Information on whether a fund is supported by Apex. Only applies to mutual funds. */
  apexSupport?: Maybe<ApexSupportInput>;
  /** Description representing the asset status */
  assetStatus?: Maybe<Scalars["String"]>;
  benchmark?: Maybe<Scalars["String"]>;
  /** BondHouse classification */
  classification?: Maybe<Scalars["String"]>;
  /** Fund distributions */
  distributions?: Maybe<Distributions3Input>;
  fees?: Maybe<FeesInput>;
  focus?: Maybe<FocusInput>;
  /** fund type, should matches assetType on the parent level */
  fundType?: Maybe<Scalars["String"]>;
  inceptionDate?: Maybe<Scalars["String"]>;
  /** Indicates whether the share class is institutional only */
  institutional?: Maybe<Scalars["Boolean"]>;
  /** The fund management company */
  managementCompany?: Maybe<Scalars["String"]>;
  /**
   * The market mid price. Certain types of funds, including closed-end funds (CEFs) and exchange-traded funds
   * (ETFs) may trade at a premium or discount.
   */
  midPrice?: Maybe<Scalars["Float"]>;
  /**
   * The net asset value (NAV) per share, equivalent to the market value of the underlying securities divided by
   * the number of shares outstanding
   */
  netAssetValuePerShare?: Maybe<Scalars["Float"]>;
  /** Fund net assets */
  netAssets?: Maybe<Scalars["Float"]>;
  /** Date of the latest fund assets value */
  netAssetsDate?: Maybe<Scalars["String"]>;
  /** The date of the latest price and NAV/share figures */
  priceDate?: Maybe<Scalars["String"]>;
  regulatoryStructure?: Maybe<Scalars["String"]>;
  replicationStrategy?: Maybe<Scalars["String"]>;
  /** Lipper Leaders scores */
  scores?: Maybe<Scores4Input>;
  /** Specifies the minimum number of shares that can be purchased, as regulated by an exchange */
  tradeLotSize?: Maybe<Scalars["Float"]>;
  /** Fund yields */
  yields?: Maybe<YieldsInput>;
};
/** Fund allocation data */
export type Allocation6Input = {
  /** Asset allocation data */
  asset?: Maybe<Asset2Input>;
  /** Currency allocation data */
  currency?: Maybe<Scalars["JSON"]>;
  /** Debt type allocation */
  debtType?: Maybe<DebtType2Input>;
  /** Country allocation data */
  equityCountry?: Maybe<Scalars["JSON"]>;
  /** Region allocation data */
  equityRegion?: Maybe<RegionInput>;
  /** Country allocation data */
  fixedIncomeCountry?: Maybe<Scalars["JSON"]>;
  /** Region allocation data */
  fixedIncomeRegion?: Maybe<RegionInput>;
  /** GICS sub-industry allocation data */
  gicsSubIndustry?: Maybe<GicsSubIndustryInput>;
  /** Maturity allocation data */
  maturity?: Maybe<MaturityInput>;
  /** Rating allocation data */
  rating?: Maybe<Rating2Input>;
  /** Region allocation data */
  region?: Maybe<RegionInput>;
  /** TRBC Industry allocation data */
  trbcIndustry?: Maybe<TrbcIndustryInput>;
};
/** Fund distributions */
export type Distributions3Input = {
  capitalGain?: Maybe<CapitalGain4Input>;
  foreignTaxCredit?: Maybe<ForeignTaxCredit3Input>;
  income?: Maybe<Income3Input>;
  repaymentCategory?: Maybe<RepaymentCategory3Input>;
};
export type CapitalGain4Input = {
  capitalGain?: Maybe<CapitalGain2Input>;
  collectibles?: Maybe<CapitalGain2Input>;
  longTermCapitalGain?: Maybe<CapitalGain2Input>;
  mediumTermCapitalGain?: Maybe<CapitalGain2Input>;
  nonQualifiedShortTermCapitalGain?: Maybe<CapitalGain2Input>;
  qualifiedShortTermCapitalGain?: Maybe<CapitalGain2Input>;
  returnOfCapital?: Maybe<CapitalGain2Input>;
  shortTermCapitalGain?: Maybe<CapitalGain2Input>;
  superLongTermCapitalGain?: Maybe<CapitalGain2Input>;
};
export type ForeignTaxCredit3Input = {
  foreignTaxCredit?: Maybe<CapitalGain2Input>;
  nonQualifiedForeignTaxPaid?: Maybe<CapitalGain2Input>;
  qualifiedForeignTaxPaid?: Maybe<CapitalGain2Input>;
};
export type Income3Input = {
  aggregateAccrual?: Maybe<CapitalGain2Input>;
  exemptIncome?: Maybe<CapitalGain2Input>;
  incomeDividend?: Maybe<CapitalGain2Input>;
  interestIncome?: Maybe<CapitalGain2Input>;
  nonQualifiedIncomeDividend?: Maybe<CapitalGain2Input>;
  qualifiedIncomeDividend?: Maybe<CapitalGain2Input>;
};
export type RepaymentCategory3Input = {
  bonusIssue?: Maybe<CapitalGain2Input>;
  factor?: Maybe<CapitalGain2Input>;
  repayment?: Maybe<CapitalGain2Input>;
  rightsIssue?: Maybe<CapitalGain2Input>;
  split?: Maybe<CapitalGain2Input>;
};
/** Lipper Leaders scores */
export type Scores4Input = {
  /** Fund scores organized by the time period of measurement */
  consistentReturn?: Maybe<TotalReturnInput>;
  /** Fund scores organized by the time period of measurement */
  expense?: Maybe<TotalReturnInput>;
  /** Fund scores organized by the time period of measurement */
  preservation?: Maybe<TotalReturnInput>;
  /** Fund scores organized by the time period of measurement */
  taxEfficiency?: Maybe<TotalReturnInput>;
  /** Fund scores organized by the time period of measurement */
  totalReturn?: Maybe<TotalReturnInput>;
};
export interface SearchAssetResponse {
  __typename?: "SearchAssetResponse";
  /** The index of the last result contained in this response */
  end?: Maybe<Scalars["Float"]>;
  /** The number of results found */
  found?: Maybe<Scalars["Float"]>;
  /** Search results */
  results: Array<Maybe<AssetResult>>;
  /** The index of the first result contained in this response */
  start?: Maybe<Scalars["Float"]>;
}
/** An asset with scores and other search metrics */
export interface AssetResult {
  __typename?: "AssetResult";
  asset: Asset6;
  /** The score for the search result */
  score: Scalars["Float"];
}
export interface Asset6 {
  __typename?: "Asset6";
  /** Allocation data */
  allocation?: Maybe<Allocation2>;
  analytics?: Maybe<Analytics>;
  /** Asset sub-types specific to an instrument type */
  assetSubtype?: Maybe<AssetSubtype>;
  /** Higher level asset and instrument types, for instance bonds, stocks, funds, etc. */
  assetType?: Maybe<AssetType>;
  /** Bond object, which include Corp/Muni/Sovereign etc. */
  bond?: Maybe<Bond5>;
  country?: Maybe<Scalars["String"]>;
  createdAt?: Maybe<Scalars["String"]>;
  createdBy?: Maybe<Scalars["String"]>;
  /** The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) currency code for the asset currency */
  currency?: Maybe<Scalars["String"]>;
  description?: Maybe<Scalars["String"]>;
  /** BondHouse generated readable id that should have 1 to 1 relationship with the generated ID */
  displayId?: Maybe<Scalars["String"]>;
  equity?: Maybe<Equity>;
  /** Scores for Environmental, Social, and Governance */
  esgScores?: Maybe<EsgScores2>;
  fund?: Maybe<Fund5>;
  /** BondHouse unique identifier for an asset. This is not a public identifier. */
  id: Scalars["String"];
  /**
   * asset/security identifier:
   * * cusip - 9 alpha-numeric characters that includes the check digit, first 6 alpha numeric characters refers to
   *   the issuer
   * * isin - 12 alpha-numeric characters, first 2 characters contains country code, last character is a check
   *   digit
   * * sedol - 7 alpha-numeric characters, single security can have multiple SEDOL, handle later
   * * primaryTicker - primary exchange ticker
   * * cins - 9 alpha-numeric characters managed by cusip
   * * bbGlobal - 12 alpha-numeric characters managed by Bloomberg
   * The first 2 characters are upper-case consonants (including "Y"),
   * the third character is the upper-case "G",
   * characters 4 -11 are any upper-case consonant (including "Y")
   * or integer between 0 and 9, and the last character is a check-digit.
   * An identifier is assigned to instruments of all asset classes,
   * is unique to an individual instrument and once issued will not change for an instrument.
   * * refinitivAssetId - 18 alpha-numeric characters asset id, example sourced from DSFI
   * * refinitivIssuePermId - unique Refinitiv system-generated PermID for an asset
   * * refinitivLipperId - id to specify a share class of a fund and also
   * * refinitivLipperPermId - lipper permanent id
   * * valoren - nine digits for official Swiss Identification number
   * * cik - SEC's central index key for corporations/individuals
   * * apex - APEX identifier
   */
  identifiers?: Maybe<Identifiers>;
  legalEntity?: Maybe<LegalEntity>;
  /** Indicates whether there are current bids/offers that makes the asset transactable */
  liquid?: Maybe<Scalars["Boolean"]>;
  market?: Maybe<Scalars["String"]>;
  metadata?: Maybe<Scalars["JSON"]>;
  name?: Maybe<Scalars["String"]>;
  /**
   * BondHouse best price from available pricing sources, quote following market conventions:
   * * Clean price for most bonds
   * * Dirty price for preferred stock
   * * Close-mid for equities
   * * Market price for funds
   */
  price?: Maybe<Scalars["Float"]>;
  priceDate?: Maybe<Scalars["String"]>;
  priceQuotes?: Maybe<Array<Maybe<PriceQuotesListItem>>>;
  primaryExchange?: Maybe<Scalars["String"]>;
  primaryExchangeMic?: Maybe<Scalars["String"]>;
  /** Normalized rating */
  rating?: Maybe<Scalars["String"]>;
  /** BondHouse's proprietary scores */
  scores?: Maybe<Scores2>;
  /**
   * The common street ticker for a security. For bonds, ticker code used to identify the common stock when
   * available, else common acronym of company if known, else matched to immediate parent, else unique value
   * based on name for standalone organizations.
   */
  ticker?: Maybe<Scalars["String"]>;
  unit?: Maybe<Scalars["String"]>;
  /** Universe inclusion information */
  universes?: Maybe<Universes>;
  updatedAt?: Maybe<Scalars["String"]>;
  updatedBy?: Maybe<Scalars["String"]>;
}
/** Allocation data */
export interface Allocation2 {
  __typename?: "Allocation2";
  /** Country allocation data */
  country?: Maybe<Scalars["JSON"]>;
  /** Currency allocation data */
  currency?: Maybe<Scalars["JSON"]>;
  /** Debt type allocation */
  debtType?: Maybe<DebtType2>;
  /** Maturity allocation data */
  maturity?: Maybe<Maturity>;
  /** Rating allocation data */
  rating?: Maybe<Rating2>;
  /** Region allocation data */
  region?: Maybe<Region>;
  /** Sector allocation */
  sector?: Maybe<Sector>;
}
/** Debt type allocation */
export interface DebtType2 {
  __typename?: "DebtType2";
  /** Allocation to asset-backed securities not covered by other categories */
  assetBackedSecurities?: Maybe<Scalars["Float"]>;
  /** Allocation to bonds */
  bonds?: Maybe<Scalars["Float"]>;
  /** Allocation to debentures */
  debentures?: Maybe<Scalars["Float"]>;
  /** Allocation to mortgage-backed securities, including collateralized mortgage obligations (CMOs) */
  mortgageBackedSecurities?: Maybe<Scalars["Float"]>;
  /** Allocation to municipal bonds and similar products such as tax anticipation notes */
  municipalBonds?: Maybe<Scalars["Float"]>;
  /** Allocation to notes */
  notes?: Maybe<Scalars["Float"]>;
  /** Allocation to other or unknown debt products */
  other?: Maybe<Scalars["Float"]>;
  /** Allocation to preferred stock */
  preferredStock?: Maybe<Scalars["Float"]>;
  /** Allocation to supranational bonds */
  supranationalBonds?: Maybe<Scalars["Float"]>;
}
/** Rating allocation data */
export interface Rating2 {
  __typename?: "Rating2";
  a?: Maybe<Scalars["Float"]>;
  aa?: Maybe<Scalars["Float"]>;
  aaa?: Maybe<Scalars["Float"]>;
  b?: Maybe<Scalars["Float"]>;
  bb?: Maybe<Scalars["Float"]>;
  bbb?: Maybe<Scalars["Float"]>;
  c?: Maybe<Scalars["Float"]>;
  cc?: Maybe<Scalars["Float"]>;
  ccc?: Maybe<Scalars["Float"]>;
  d?: Maybe<Scalars["Float"]>;
  nr?: Maybe<Scalars["Float"]>;
}
/** Bond object, which include Corp/Muni/Sovereign etc. */
export interface Bond5 {
  __typename?: "Bond5";
  accruedInterest?: Maybe<Scalars["Float"]>;
  /** Indicates if the bond is active */
  active?: Maybe<Scalars["Boolean"]>;
  /** Current outstanding amount expressed in the currency of denomination */
  amountOutstanding?: Maybe<Scalars["Float"]>;
  /** Current outstanding amount date */
  amountOutstandingDate?: Maybe<Scalars["String"]>;
  /**
   * A flag indicating that the security pays equal amounts on each payment date. Each such payment consists of
   * a decreasing interest amount and an increasing principal amount
   */
  annuity?: Maybe<Scalars["Boolean"]>;
  /** Description representing the asset status */
  assetStatus?: Maybe<Scalars["String"]>;
  /** Call type for callable bonds */
  callType?: Maybe<Scalars["String"]>;
  /** Indicates if the bond is callable */
  callable?: Maybe<Scalars["Boolean"]>;
  /** Type of allocation of municipal bond proceeds */
  capType?: Maybe<Scalars["String"]>;
  classifications?: Maybe<Classifications>;
  /** Bond price excluding accrued interest */
  cleanPrice?: Maybe<Scalars["Float"]>;
  /** Indicates if the bond has a clean-up call */
  cleanUpCallable?: Maybe<Scalars["Boolean"]>;
  /** Indicates if the bond is convertible */
  convertible?: Maybe<Scalars["Boolean"]>;
  /**
   * Code representing the country in which the security was issued.
   * This is usually, the country of residence of the issuer. For Global
   * bonds the Country of Issue is determined by the country of the
   * currency_cd, for Eurobonds it is always 'EU'.
   */
  countryOfIssue?: Maybe<Scalars["String"]>;
  /** Description representing the coupon type */
  couponClass?: Maybe<Scalars["String"]>;
  couponResetHistory?: Maybe<Array<Maybe<CouponResetHistoryListItem>>>;
  /**
   * list of coupone period, where each of the coupone period
   * can contain complex logic for coupon calculation
   */
  couponSchedule?: Maybe<Array<Maybe<CouponScheduleListItem>>>;
  /** Coupon type */
  couponType?: Maybe<Scalars["String"]>;
  /**
   * Indicates if the bond is a covered bond. Covered bonds are debt securities issued by a bank or mortgage
   * institution and collateralised against a pool of assets that, in case of failure of the issuer, can cover
   * claims at any point of time.
   */
  covered?: Maybe<Scalars["Boolean"]>;
  /** Creation information */
  creationUnit?: Maybe<Scalars["String"]>;
  /** Credit enhancements including guarantor information for principal and interest payments */
  creditEnhancement?: Maybe<CreditEnhancement>;
  /** current coupon of the bond */
  currentCoupon?: Maybe<Scalars["Float"]>;
  /** Date from which interest on the bond begins accruing. */
  datedDate?: Maybe<Scalars["String"]>;
  /**
   * Day count convention.
   *
   * The rules for each day count are listed below. More than one rule may take effect. They are applied in
   * order, and if a date is changed in one rule the changed value is used in the following rules. Where Date1
   * is mentioned, it can be decomposed as Date1 = (D1,M1,Y1), with the same principle applied to Date2, etc.
   *
   * * 30U/360 - If (Date2 is end of the month) and (Date1 is the last day of February) and (Date2 is the last
   *   day of February), then change D2 to 30. If (Date2 is end of the month) and (Date1 is the last day of
   *   February), then change D1 to 30. If D2 is 31 and D1 is 30 or 31, then change D2 to 30. If D1 is 31, then
   *   change D1 to 30. Day Count Fraction = (360*(Y2-Y1)+30*(M2-M1)+D2-D1) / 360
   * * 30/360_ISDA - If D1=31, then change D1 to 30 If D2=31 and D1=30, then change D2 to 30. Day Count
   *   Fraction = (360 * (Y2 - Y1) + 30 * (M2 - M1) + D2 - D1) / 360
   * * A/360 - Day Count Fraction = Days(Date1, Date2) / 360
   * * A/365C - Date3 is the next interest payment date. If the number of days of interest accrual is less than
   *   the actual number of days in the interest period: Day Count Fraction = (Days(Date1, Date2) * Pay
   *   frequency) / 365. If the number of days of interest accrual exceeds 365 / Pay frequency, or 182.5 days for
   *   a semi-annual pay security: Day Count Fraction = 1- (Days(Date2, Date3) * Pay frequency) / 365
   * * A/A_ICMA - Date3 is the previous interest payment date. Date4 is the next interest payment date. Day
   *   Count Fraction = Days(Date1, Date2) / (Days(Date3, Date4) * Pay frequency)
   * * NL/365 - If period between Date1 and Date2 contains 29 February: Day Count Fraction = (Days(Date1,
   *   Date2)-1) / 365 Else: Day Count Fraction = Days(Date1, Date2) / 365
   * * A/A_ISDA - Day Count Fraction = Days(Date1, Date2) / 365
   * * A/365 - Day Count Fraction = (Days not in leap year / 365) + (Days in leap year / 366)
   * * 30E/360_ICMA - If D1 is 31, then change D1 to 30. If D2 is 31, then change D2 to 30. Day Count Fraction
   *   = (360 * (Y2 - Y1) + 30 * (M2 - M1) + D2 - D1) / 360
   * * 30E/360_ISDA - If D1 is last day of the month, then change D1 to 30. If D2 is last day of the month,
   *   then change D2 to 30. Day Count Fraction = (360 * (Y2 - Y1) + 30 * (M2 - M1) + D2 - D1) / 360
   * * A/365L - If payment frequency is annual and 29 February is included in the interest period or if payment
   *   frequency is more frequent than annual and payment date falls in a leap year: Day Count Fraction =
   *   Days(Date1, Date2) / 366 Else: Day Count Fraction = Days(Date1, Date2) / 365
   * * A/A_AFB - If period between Date1 and Date2 contains 29 February: Day Count Fraction =
   *   Days(Date1, Date2) / 366 Else: Day Count Fraction = Days(Date1, Date2) / 365
   * * 30/A - Date3 is the previous interest payment date. Date4 is the next interest payment date. If (Date2
   *   is end of the month) and (Date1 is the last day of February) and (Date2 is the last day of February), then
   *   change D2 to 30. If (Date2 is end of the month) and (Date1 is the last day of February), then change D1
   *   to 30. If D2 is 31 and D1 is 30 or 31, then change D2 to 30. If D1 is 31, then change D1 to 30. Day Count
   *   Fraction = (360 * (Y2 - Y1) + 30 * (M2 - M1) + D2 - D1) / (Days(Date3, Date4) * Pay frequency)
   * * Changeable - Changeable day count convention. Arbitrary/unpredictable changes to the day count can
   *   occur.
   * * Unknown - Unknown day count convention
   * * 30/365G - If D1 is last day of the month, then change D1 to 30. If D2 is last day of the month, then
   *   change D2 to 30. Day Count Fraction = (360 * (Y2 - Y1) + 30 * (M2 - M1) + D2 - D1) / 365
   * * A/364 - Day Count Fraction = Days(Date1, Date2) / 364
   * * NL/360 - If period between Date1 and Date2 contains 29 February: Day Count Fraction = (Days(Date1,
   *   Date2) - 1) / 360 Else: Day Count Fraction = Days(Date1, Date2) / 360
   * * B/252 - Day Count Fraction = Business Days(Date1, Date2) / 252
   */
  dayCount?: Maybe<Scalars["String"]>;
  /** Debt service type */
  debtServiceType?: Maybe<Scalars["String"]>;
  /**
   * A flag indicating whether the security has the option to be legally or economically defeased in the future,
   * as specified in the prospectus. That is, the issuing company has either provided money for all coupon and
   * principal payments to the trustee (economic) or, the bond issuer sets up an irrevocable trust for the profit
   * of the bondholder and is no longer legally bound by the convenants of the issue.
   */
  defeasable?: Maybe<Scalars["Boolean"]>;
  /**
   * The minimum multiples in which a bond can be held in the secondary market above the Minimum
   * Denomination
   */
  denominationIncrement?: Maybe<Scalars["Float"]>;
  /** Bond price including accrued interest */
  dirtyPrice?: Maybe<Scalars["Float"]>;
  dualCurrency?: Maybe<Scalars["Boolean"]>;
  /** Textual description of calendar adjustment methodology */
  exDividendCalendarAdjustment?: Maybe<Scalars["String"]>;
  /**
   * Integer used in conjunction with the ex-dividend calendar code. For example, if the calendar is a
   * "_n_th calendar day of month" value and the ex-dividend date is on the 30th calendar day of the month, 30
   * would show in this field. If the ex-dividend calendar description is a "_n_ calendar day(s) prior" value,
   * then it is an offset from the pay date. For example, 15 means "15 calendar days prior to the pay date."
   */
  exDividendCalendarAdjustmentValue?: Maybe<Scalars["Int"]>;
  exchangeListed?: Maybe<Scalars["Boolean"]>;
  /**
   * Date on which the first coupon payment (either cash, capitalization, PIK or some combination of these) is
   * made. Date is not adjusted for nonbusiness days.
   */
  firstCouponDate?: Maybe<Scalars["String"]>;
  /** Indicates if the bond has a floating rate coupon */
  floating?: Maybe<Scalars["Boolean"]>;
  /**
   * Indicates whether a bond is a green bond. Green bonds are fixed income products where the proceeds are used
   * or earmarked for environmentally beneficial projects. This also includes ESG bonds where the proceeds are
   * used only for environmental projects. Thomson Reuters definition of this field is in line with that of
   * Climate Bond Initiative’s definition.
   */
  green?: Maybe<Scalars["Boolean"]>;
  /**
   * A flag flag indicating whether there is a third party guarantee or, in some rare instances, a self guarantee
   * in effect as to the timely payment of interest and principal applicable to the asset within the guaranteed
   * period terms.
   */
  guaranteed?: Maybe<Scalars["Boolean"]>;
  /** warrants were attached to the bond at issue */
  hasWarrantsAttached?: Maybe<Scalars["Boolean"]>;
  inflationProtected?: Maybe<Scalars["Boolean"]>;
  /**
   * A description of the security itself. For example, bond, note, bill, debenture, preferred stock, warrant, or
   * commercial paper.
   */
  instrumentType?: Maybe<Scalars["String"]>;
  issue?: Maybe<Issue>;
  /** The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) currency code for the currency of issue */
  issueCurrency?: Maybe<Scalars["String"]>;
  /**
   * The settlement date for the initial placement of the security, except when a market designates a different
   * issue date.
   */
  issueDate?: Maybe<Scalars["String"]>;
  issuer?: Maybe<Issuer5>;
  /**
   * Date on which the last coupon payment (either cash, capitalization, PIK or some combination of these) prior
   * to the expected maturity date or the maturity date, whichever is currently applicable, is made. Date is not
   * adjusted for non-business days.
   */
  lastCouponDate?: Maybe<Scalars["String"]>;
  /** The last date on which this asset was included as a liquid ETF constituent */
  lastLiquidEtfConstituentDate?: Maybe<Scalars["String"]>;
  /** Liquidity criteria */
  liquidityCriteria?: Maybe<LiquidityCriteria>;
  marketData?: Maybe<MarketData>;
  /**
   * Date on which the principal amount of the security becomes due
   * and payable, as stated in the terms of the security.
   */
  maturityDate?: Maybe<Scalars["String"]>;
  /** A flag indicating whether the security is a issued under a medium term note program. */
  mediumTermNote?: Maybe<Scalars["Boolean"]>;
  /**
   * The smallest amount in which a bond may be purchased in the secondary market,
   * expressed in face value also known as par value
   */
  minimumDenomination?: Maybe<Scalars["Float"]>;
  /** The nearest call period's end date */
  nearestCallPeriodEndDate?: Maybe<Scalars["String"]>;
  /**
   * The nearest ordinary call period's start date. The nearest call may start before the loading date, as long
   * as the end date occurs afterward.
   */
  nearestCallPeriodStartDate?: Maybe<Scalars["String"]>;
  /** The nearest call's price */
  nearestCallPrice?: Maybe<Scalars["Float"]>;
  /** The date of the next coupon rate change */
  nextResetDate?: Maybe<Scalars["String"]>;
  /** The maximum notice period for the ordinary call */
  ordinaryCallNoticePeriodMaximumAmount?: Maybe<Scalars["Int"]>;
  /** The minimum notice period for the ordinary call */
  ordinaryCallNoticePeriodMinimumAmount?: Maybe<Scalars["Int"]>;
  /** The notice period units for the ordinary call */
  ordinaryCallNoticePeriodUnits?: Maybe<Scalars["String"]>;
  /** The option type for the bond's ordinary call */
  ordinaryCallOptionType?: Maybe<Scalars["String"]>;
  /** Indicates if the bond has an ordinary call option */
  ordinaryCallable?: Maybe<Scalars["Boolean"]>;
  originalAmountIssued?: Maybe<Scalars["Float"]>;
  /** Underlying benchmark */
  originalBenchmark?: Maybe<Scalars["String"]>;
  /**
   * Price at which the public may purchase the offered security from the underwriters, expressed as a percentage
   * of par
   */
  originalIssuePrice?: Maybe<Scalars["Float"]>;
  /** Difference between the yield of the security issued vs pricing security in basis points */
  originalIssueSpread?: Maybe<Scalars["Float"]>;
  originalYieldToMaturity?: Maybe<Scalars["Float"]>;
  /**
   * Identifies the defined par value at the initial issuance of the security, also known as stated or face
   * value, expressed in units of the current currency of denomination and usually updated based on the following
   * criteria:
   *
   * * For convertibles, it is the conversion par value and when in the initial segment with conversion terms
   * * For preferreds, it is the par value
   * * For all other cases and securities, it is the denomination amount
   *
   * Note that the value in the field may be different than the value produced by one of these criteria. Also, if
   * an applicable Denomination Amount is not available to display as the par value, a value may still be updated
   * in the field based on source documentation.
   */
  parValue?: Maybe<Scalars["Float"]>;
  partlyPaid?: Maybe<Scalars["Boolean"]>;
  /**
   * A flag indicating if the security can pay interest/dividends in the form of additional securities or equity
   * instead of, or in addition to, cash. This flag is set to true where the issuer (or borrower) has the
   * obligation to pay interest (or a portion of the interest) in-kind, which is compulsory and is predefined in
   * the terms of the security.
   */
  payableInKind?: Maybe<Scalars["Boolean"]>;
  /** Indicates if the bond is paying coupons & principals and not in default */
  performing?: Maybe<Scalars["Boolean"]>;
  perpetual?: Maybe<Scalars["Boolean"]>;
  /**
   * Price quote convention:
   * * 128THS
   * * 16THS
   * * 256THS
   * * 32NDS
   * * 320THS
   * * 64THS
   * * 8THS
   * * DECIMAL
   * * PRICE
   * * SPREAD
   * * UPFRONT
   */
  priceQuoteConvention?: Maybe<Scalars["String"]>;
  /** A description of whether a security is quoted in currency per unit or points of 100% */
  priceQuoteMethod?: Maybe<Scalars["String"]>;
  /** Textual description of rounding method */
  priceQuoteRoundingMethod?: Maybe<Scalars["String"]>;
  /**
   * The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the currency in which the principal is paid
   * in the current principal period
   */
  principalCurrency?: Maybe<Scalars["String"]>;
  /**
   * If the issuer's offering documentation (e.g., prospectus or offering memorandum) includes a statement to the
   * effect that the security will be offered and sold in reliance upon Rule 144A of the U.S. Securities Act of
   * 1933. It allows privately placed securities to be traded among qualified institutional buyers.
   */
  private144a?: Maybe<Scalars["Boolean"]>;
  privatePlacement?: Maybe<Scalars["Boolean"]>;
  /** Indicates if the bond is puttable */
  puttable?: Maybe<Scalars["Boolean"]>;
  /** True for bonds quoted at their full (dirty) price and false for those quoted at their clean price */
  quotedDirty?: Maybe<Scalars["Boolean"]>;
  /** Issue ratings */
  ratings?: Maybe<Ratings9>;
  /** Textual description of calendar adjustment methodology */
  recordDateCalendarAdjustment?: Maybe<Scalars["String"]>;
  recordDateCalendarAdjustmentValue?: Maybe<Scalars["Int"]>;
  /**
   * The redemption value of the asset at maturity. Generally this is par value (100.00) but may be different
   * for certain securities.
   */
  redemptionValue?: Maybe<Scalars["Float"]>;
  /** Rich/Cheap information */
  richCheap?: Maybe<RichCheap>;
  /** Description of the level of seniority, secured/unsecured status, preferred, non-preferred, etc. */
  seniority?: Maybe<Scalars["String"]>;
  /**
   * The series number, for example, 1998-F. This column may also be
   * used for hybrid securities, for example, MIPPS. For the Danish
   * market, the series number and Capital Centre information will be
   * available.
   */
  series?: Maybe<Scalars["String"]>;
  /** Sinking/Amortization Indicator */
  sinkingOrAmortizing?: Maybe<Scalars["Boolean"]>;
  /**
   * Further detail on the classification of sovereign securities:
   * * Agency
   * * Central Bank
   * * Government/Treasury
   * * Municipal
   * * Provincial
   */
  sovereignClass?: Maybe<Scalars["String"]>;
  /** The state of issuance for a US-based municipal security */
  state?: Maybe<Scalars["String"]>;
  /** Indicates whether the security is tax exempt by the state where it was issued */
  stateTaxExempt?: Maybe<Scalars["Boolean"]>;
  /**
   * Indicates if the bond is straight. A straight bond is a bullet bond that pays a fixed interest rate through
   * its life and has no embedded options.
   */
  straight?: Maybe<Scalars["Boolean"]>;
  /**
   * A flag indicating whether the coupon payments may be "stripped" from the offered security. Stripping is the
   * process of separating a bond into its principal component and interest components. These components are then
   * sold separately.
   */
  strippable?: Maybe<Scalars["Boolean"]>;
  /** Indicates whether the interest of a tax-exempt security is subject to the US Alternative Minimum Tax (AMT) */
  subjectToAlternativeMinimumTax?: Maybe<Scalars["Boolean"]>;
  /**
   * The total amount issued. For Treasuries, this represents amt_iss_public plus an amount that is kept by the
   * Federal Reserve for their own investing or made available to foreign banks and investors. For strips, this
   * represents the portion held in a stripped form. Expressed in thousands.
   */
  totalAmountIssued?: Maybe<Scalars["Float"]>;
  /** Indicates whether a security is exempt from federal taxes in the United States */
  unitedStatesTaxExempt?: Maybe<Scalars["Boolean"]>;
  /** Description of the registrant's planned use of its proceeds from the offering */
  useOfProceeds?: Maybe<Scalars["String"]>;
  /**
   * The tax deducted at source on interest or dividends to be paid by the investor. This is most often given
   * for international government issues.
   */
  withholdingTax?: Maybe<Scalars["Float"]>;
}
export interface CouponResetHistoryListItem {
  __typename?: "CouponResetHistoryListItem";
  effectiveDate: Scalars["String"];
  rate?: Maybe<Scalars["Float"]>;
  rateNonAnnual?: Maybe<Scalars["Float"]>;
}
export interface CouponScheduleListItem {
  __typename?: "CouponScheduleListItem";
  /**
   * The maximum coupon rate to which the security can be reset associated with the particular leg number.
   * Note: This field is only applicable when couponClass = FLT, RNG, or TBP.
   */
  cap?: Maybe<Scalars["Float"]>;
  /**
   * Description representing the coupon type:
   * * DSC - Discount/Zero Coupon
   * * FIX - Fixed Coupon
   * * FLT - Floating Coupon
   * * RNG - Range Coupon
   * * STR - Stripped Coupon
   * * TBP - To Be Priced Coupon
   * * UNK - Unknown
   * * VAR - Variable Coupon
   */
  couponClass?: Maybe<Scalars["String"]>;
  /**
   * Details of the formula used to calculate the new rate of
   * interest.
   * * Formula Structure -->
   * multiplier|index|lookback|spread
   * * Multiplier Typically --> one.
   * * Index --> See the RIGs database or base_index_cds for description. Indices with pricing are in
   * RIGs. Others can be found in the base_index_cds table in the GCodes
   * Database Viewer.
   * * Lookback --> Identifies rate determination date (for example, 2 business days prior to reset date).
   * * Spread --> 0.10 = 10 basis points.
   * ***Example 1.00*#US3MLIB<2d+0.10
   * Note: This field is only applicable when couponClass =
   * FLT, RNG, or TBP.***
   */
  couponFormula?: Maybe<Scalars["JSON"]>;
  /** Human-friendly description of rounding method */
  couponRateRoundingMethod?: Maybe<Scalars["String"]>;
  /** Day count convention */
  dayCount?: Maybe<Scalars["String"]>;
  effectiveDate: Scalars["String"];
  floor?: Maybe<Scalars["Float"]>;
  indexDescription?: Maybe<Scalars["String"]>;
  /** Human-friendly name for holiday calendar */
  indexHolidayCalendar?: Maybe<Scalars["String"]>;
  numberCutOffDays?: Maybe<Scalars["Int"]>;
  /** Business day rule, often known as the business day adjustment */
  paymentBusinessDayRule?: Maybe<Scalars["String"]>;
  /** Human-friendly description of calendar adjustment methodology */
  paymentCalendarAdjustment?: Maybe<Scalars["String"]>;
  paymentCalendarAdjustmentValue?: Maybe<Scalars["Int"]>;
  /** The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) currency code for the payment currency */
  paymentCurrency?: Maybe<Scalars["String"]>;
  /** Human-friendly description of frequency */
  paymentFrequency?: Maybe<Scalars["String"]>;
  /** Human-friendly name for holiday calendar */
  paymentHolidayCalendar?: Maybe<Scalars["String"]>;
  /** Business day rule, often known as the business day adjustment */
  resetBusinessDayRule?: Maybe<Scalars["String"]>;
  /** Human-friendly description of calendar adjustment methodology */
  resetCalendarAdjustment?: Maybe<Scalars["String"]>;
  resetCalendarAdjustmentValue?: Maybe<Scalars["Int"]>;
  /** Human-friendly description of frequency */
  resetFrequency?: Maybe<Scalars["String"]>;
  /** Human-friendly name for holiday calendar */
  resetHolidayCalendar?: Maybe<Scalars["String"]>;
}
export interface Issuer5 {
  __typename?: "Issuer5";
  /** Whether the issuer still exists as a company */
  active?: Maybe<Scalars["Boolean"]>;
  /** Whether the issuer is currently in bankruptcy */
  bankrupt?: Maybe<Scalars["Boolean"]>;
  /** Country of domicile for the issuer's principal executive offices */
  country?: Maybe<Scalars["String"]>;
  /** A physical address */
  headquartersAddress?: Maybe<HeadquartersAddress>;
  /** Unique identifier for an issuer */
  id: Scalars["String"];
  /**
   * Unique identifier for the immediate parent of the issuer, defined as a company that owns or controls greater
   * than 50% of the voting stock
   */
  immediateParentId?: Maybe<Scalars["String"]>;
  /** Current legal name of the issuer */
  legalName?: Maybe<Scalars["String"]>;
  /** Long name of the issuer */
  longName?: Maybe<Scalars["String"]>;
  /** Issuer ratings */
  ratings?: Maybe<Ratings8>;
  /** A physical address */
  registeredAddress?: Maybe<HeadquartersAddress>;
  /** Industry of the issuer */
  sector?: Maybe<Scalars["String"]>;
  /** Short name of the issuer */
  shortName?: Maybe<Scalars["String"]>;
  /** Description of the sovereign entity */
  sovereignClass?: Maybe<Scalars["String"]>;
  /** Within sector, further breakdown of the industry of the issuer */
  subsector?: Maybe<Scalars["String"]>;
  /**
   * Ticker code used to identify the common stock when available, else common acronym of company if known, else
   * matched to immediate parent, else unique value based on name for standalone organizations.
   */
  ticker?: Maybe<Scalars["String"]>;
  /**
   * Unique identifier for the ultimate parent of the issuer, defined as a company that owns or controls greater
   * than 50% of the voting stock at the highest level of the issuer tree
   */
  ultimateParentId?: Maybe<Scalars["String"]>;
  /**
   * URL of the legal entity's corporate website or company homepage. For funds, this is the URL of the fund
   * family.
   */
  url?: Maybe<Scalars["String"]>;
}
/** A physical address */
export interface HeadquartersAddress {
  __typename?: "HeadquartersAddress";
  /** City/town as published in valid source documents */
  cityOrTown?: Maybe<Scalars["String"]>;
  /** Code indicating the ISO country */
  country?: Maybe<Scalars["String"]>;
  /** Region within the country as defined by the postal authority/agency */
  stateOrCountyOrRegion?: Maybe<Scalars["String"]>;
  /** Building name, floor, suite or level */
  street1?: Maybe<Scalars["String"]>;
  /** Street number and name or post office box */
  street2?: Maybe<Scalars["String"]>;
  /** Additional address information required by the postal authority/agency, such as zone or urbanization */
  street3?: Maybe<Scalars["String"]>;
  /** Designated postal code/zip code as assigned by the postal authority/agency */
  zipCode?: Maybe<Scalars["String"]>;
}
/** Issuer ratings */
export interface Ratings8 {
  __typename?: "Ratings8";
  /** Rating */
  snpLongTerm?: Maybe<SnpLongTerm>;
  /** Rating */
  snpSeniorSecured?: Maybe<SnpLongTerm>;
  /** Rating */
  snpSeniorUnsecured?: Maybe<SnpLongTerm>;
  /** Rating */
  snpShortTerm?: Maybe<SnpLongTerm>;
  /** Rating */
  snpSubordinated?: Maybe<SnpLongTerm>;
}
/** Rating */
export interface SnpLongTerm {
  __typename?: "SnpLongTerm";
  /** Effective date */
  effectiveDate: Scalars["String"];
  /** S&P equivalent rank */
  rank: Scalars["Float"];
  /** Rating */
  rating: Scalars["String"];
}
/** Liquidity criteria */
export interface LiquidityCriteria {
  __typename?: "LiquidityCriteria";
  /** Has quote from four days ago */
  hasAdequateQuotes?: Maybe<Scalars["Boolean"]>;
  /** Date liquidity criteria was last evaluated */
  liquidityCriteriaDate: Scalars["String"];
}
export interface MarketData {
  __typename?: "MarketData";
  ejv?: Maybe<Ejv>;
}
export interface Ejv {
  __typename?: "Ejv";
  /** Accrued interest */
  accruedInterest?: Maybe<Scalars["Float"]>;
  /** The ask price, yield, or discount of the security */
  askPrice?: Maybe<Scalars["Float"]>;
  /** The ask yield of the security */
  askYield?: Maybe<Scalars["Float"]>;
  /** The difference between the bond's native bid yield to maturity and the interest rate swap */
  assetSwapSpread?: Maybe<Scalars["Float"]>;
  /** The difference between the bond's yield and the yield of its benchmark */
  benchmarkSpread?: Maybe<Scalars["Float"]>;
  /** The bid price, yield, or discount of the security */
  bidPrice?: Maybe<Scalars["Float"]>;
  /** The bid yield of the security */
  bidYield?: Maybe<Scalars["Float"]>;
  /**
   * The corporate bond equivalent cash flow yield using the cash-flow assumptions described as follows: the
   * average life of the security, calculated with the cash-flow assumption that corporate and government
   * securities trade to maturity
   */
  cbeYieldToMaturity?: Maybe<Scalars["Float"]>;
  /**
   * The corporate bond equivalent cash-flow yield using the cash-flow assumptions described as follows: the
   * average life, computed using cash-flow assumptions that represent expected outcome.
   */
  cbeYieldToWorst?: Maybe<Scalars["Float"]>;
  /** The exchange contributed market closing price for the security */
  closePrice?: Maybe<Scalars["Float"]>;
  /** The effective date of the price */
  date: Scalars["String"];
  /** The exchange contributed highest market price of the day for the security */
  highPrice?: Maybe<Scalars["Float"]>;
  /** The exchange contributed lowest market price of the day for the security */
  lowPrice?: Maybe<Scalars["Float"]>;
  /** The exchange contributed market open price for the security */
  openPrice?: Maybe<Scalars["Float"]>;
  /** Price following market and vendor conventions */
  price?: Maybe<Scalars["Float"]>;
  /** Pricing vendor or contributor */
  source?: Maybe<Scalars["String"]>;
  /** The difference between the bond’s yield and the LIBOR curve, expressed in basis points */
  swapSpread?: Maybe<Scalars["Float"]>;
  /** The exchange contributed trade volume for the day for the security */
  volume?: Maybe<Scalars["Float"]>;
  /** Yield is calculated using the native yield to maturity convention */
  yieldToMaturity?: Maybe<Scalars["Float"]>;
  /**
   * Yield is calculated based on the native yield to worst formula, after taking all of the bond redemption
   * features into account
   */
  yieldToWorst?: Maybe<Scalars["Float"]>;
  /**
   * The constant spread in basis points that will make the price equal to the present value of the cash flows
   * when added to each relevant point of the yield curve
   */
  zSpread?: Maybe<Scalars["Float"]>;
}
/** Issue ratings */
export interface Ratings9 {
  __typename?: "Ratings9";
  /** Rating */
  snpLongTerm?: Maybe<SnpLongTerm>;
  /** Rating */
  snpShortTerm?: Maybe<SnpLongTerm>;
}
export interface Fund5 {
  __typename?: "Fund5";
  /** Fund allocation data */
  allocation?: Maybe<Allocation8>;
  /** Information on whether a fund is supported by Apex. Only applies to mutual funds. */
  apexSupport?: Maybe<ApexSupport>;
  /** Description representing the asset status */
  assetStatus?: Maybe<Scalars["String"]>;
  benchmark?: Maybe<Scalars["String"]>;
  /** BondHouse classification */
  classification?: Maybe<Scalars["String"]>;
  /** Fund distributions */
  distributions?: Maybe<Distributions4>;
  fees?: Maybe<Fees>;
  focus?: Maybe<Focus>;
  /** fund type, should matches assetType on the parent level */
  fundType?: Maybe<Scalars["String"]>;
  inceptionDate?: Maybe<Scalars["String"]>;
  /** Indicates whether the share class is institutional only */
  institutional?: Maybe<Scalars["Boolean"]>;
  /** The fund management company */
  managementCompany?: Maybe<Scalars["String"]>;
  /**
   * The market mid price. Certain types of funds, including closed-end funds (CEFs) and exchange-traded funds
   * (ETFs) may trade at a premium or discount.
   */
  midPrice?: Maybe<Scalars["Float"]>;
  /**
   * The net asset value (NAV) per share, equivalent to the market value of the underlying securities divided by
   * the number of shares outstanding
   */
  netAssetValuePerShare?: Maybe<Scalars["Float"]>;
  /** Fund net assets */
  netAssets?: Maybe<Scalars["Float"]>;
  /** Date of the latest fund assets value */
  netAssetsDate?: Maybe<Scalars["String"]>;
  /** The date of the latest price and NAV/share figures */
  priceDate?: Maybe<Scalars["String"]>;
  regulatoryStructure?: Maybe<Scalars["String"]>;
  replicationStrategy?: Maybe<Scalars["String"]>;
  /** Lipper Leaders scores */
  scores?: Maybe<Scores7>;
  /** Specifies the minimum number of shares that can be purchased, as regulated by an exchange */
  tradeLotSize?: Maybe<Scalars["Float"]>;
  /** Fund yields */
  yields?: Maybe<Yields>;
}
/** Fund allocation data */
export interface Allocation8 {
  __typename?: "Allocation8";
  /** Asset allocation data */
  asset?: Maybe<Asset2>;
  /** Currency allocation data */
  currency?: Maybe<Scalars["JSON"]>;
  /** Debt type allocation */
  debtType?: Maybe<DebtType2>;
  /** Country allocation data */
  equityCountry?: Maybe<Scalars["JSON"]>;
  /** Region allocation data */
  equityRegion?: Maybe<Region>;
  /** Country allocation data */
  fixedIncomeCountry?: Maybe<Scalars["JSON"]>;
  /** Region allocation data */
  fixedIncomeRegion?: Maybe<Region>;
  /** GICS sub-industry allocation data */
  gicsSubIndustry?: Maybe<GicsSubIndustry>;
  /** Maturity allocation data */
  maturity?: Maybe<Maturity>;
  /** Rating allocation data */
  rating?: Maybe<Rating2>;
  /** Region allocation data */
  region?: Maybe<Region>;
  /** TRBC Industry allocation data */
  trbcIndustry?: Maybe<TrbcIndustry>;
}
/** Asset allocation data */
export interface Asset2 {
  __typename?: "Asset2";
  /** Allocation to the cash sector */
  cash?: Maybe<Scalars["Float"]>;
  /** Allocation to the equity sector */
  equity?: Maybe<Scalars["Float"]>;
  /** Allocation to the fixed income sector */
  fixedIncome?: Maybe<Scalars["Float"]>;
  /** Allocation to other or unknown sectors */
  other?: Maybe<Scalars["Float"]>;
}
/** GICS sub-industry allocation data */
export interface GicsSubIndustry {
  __typename?: "GicsSubIndustry";
  /** Allocation to the communication services sub-industry */
  communicationServices?: Maybe<Scalars["Float"]>;
  /** Allocation to the consumer discretionary sub-industry */
  consumerDiscretionary?: Maybe<Scalars["Float"]>;
  /** Allocation to the consumer staples sub-industry */
  consumerStaples?: Maybe<Scalars["Float"]>;
  /** Allocation to the energy sub-industry */
  energy?: Maybe<Scalars["Float"]>;
  /** Allocation to the financials sub-industry */
  financials?: Maybe<Scalars["Float"]>;
  /** Allocation to the health care sub-industry */
  healthCare?: Maybe<Scalars["Float"]>;
  /** Allocation to the industrials sub-industry */
  industrials?: Maybe<Scalars["Float"]>;
  /** Allocation to the information technology sub-industry */
  informationTechnology?: Maybe<Scalars["Float"]>;
  /** Allocation to the materials sub-industry */
  materials?: Maybe<Scalars["Float"]>;
  /** Allocation to other or unknown sub-industries */
  other?: Maybe<Scalars["Float"]>;
  /** Allocation to the real estate sub-industry */
  realEstate?: Maybe<Scalars["Float"]>;
  /** Allocation to the utilities sub-industry */
  utilities?: Maybe<Scalars["Float"]>;
}
/** TRBC Industry allocation data */
export interface TrbcIndustry {
  __typename?: "TrbcIndustry";
  /** Allocation to the basic materials sector */
  basicMaterials?: Maybe<Scalars["Float"]>;
  /** Allocation to the consumer cyclicals sector */
  consumerCyclicals?: Maybe<Scalars["Float"]>;
  /** Allocation to the consumer non-cyclicals sector */
  consumerNonCyclicals?: Maybe<Scalars["Float"]>;
  /** Allocation to the energy sector */
  energy?: Maybe<Scalars["Float"]>;
  /** Allocation to the financials sector */
  financials?: Maybe<Scalars["Float"]>;
  /** Allocation to the healthcare sector */
  healthcare?: Maybe<Scalars["Float"]>;
  /** Allocation to the industrials sector */
  industrials?: Maybe<Scalars["Float"]>;
  /** Allocation to the other sector */
  other?: Maybe<Scalars["Float"]>;
  /** Allocation to the technology sector */
  technology?: Maybe<Scalars["Float"]>;
  /** Allocation to the telecommunications services sector */
  telecommunicationsServices?: Maybe<Scalars["Float"]>;
  /** Allocation to the utilities sector */
  utilities?: Maybe<Scalars["Float"]>;
}
/** Fund distributions */
export interface Distributions4 {
  __typename?: "Distributions4";
  capitalGain?: Maybe<CapitalGain5>;
  foreignTaxCredit?: Maybe<ForeignTaxCredit4>;
  income?: Maybe<Income4>;
  repaymentCategory?: Maybe<RepaymentCategory4>;
}
export interface CapitalGain5 {
  __typename?: "CapitalGain5";
  capitalGain?: Maybe<CapitalGain2>;
  collectibles?: Maybe<CapitalGain2>;
  longTermCapitalGain?: Maybe<CapitalGain2>;
  mediumTermCapitalGain?: Maybe<CapitalGain2>;
  nonQualifiedShortTermCapitalGain?: Maybe<CapitalGain2>;
  qualifiedShortTermCapitalGain?: Maybe<CapitalGain2>;
  returnOfCapital?: Maybe<CapitalGain2>;
  shortTermCapitalGain?: Maybe<CapitalGain2>;
  superLongTermCapitalGain?: Maybe<CapitalGain2>;
}
export interface CapitalGain2 {
  __typename?: "CapitalGain2";
  /** Accounting date */
  accountingDate?: Maybe<Scalars["String"]>;
  /** Ex date */
  exDate?: Maybe<Scalars["String"]>;
  /** Distribution amount */
  exValue?: Maybe<Scalars["Float"]>;
  /** Payment date */
  paymentDate?: Maybe<Scalars["String"]>;
  /** Record date */
  recordDate?: Maybe<Scalars["String"]>;
  /** Reinvestment date */
  reinvestmentDate?: Maybe<Scalars["String"]>;
  /** Reinvestment type */
  reinvestmentType?: Maybe<Scalars["String"]>;
  /** Reinvestment value */
  reinvestmentValue?: Maybe<Scalars["Float"]>;
  /** Taxable interest income */
  taxableInterestIncome?: Maybe<Scalars["Float"]>;
}
export interface ForeignTaxCredit4 {
  __typename?: "ForeignTaxCredit4";
  foreignTaxCredit?: Maybe<CapitalGain2>;
  nonQualifiedForeignTaxPaid?: Maybe<CapitalGain2>;
  qualifiedForeignTaxPaid?: Maybe<CapitalGain2>;
}
export interface Income4 {
  __typename?: "Income4";
  aggregateAccrual?: Maybe<CapitalGain2>;
  exemptIncome?: Maybe<CapitalGain2>;
  incomeDividend?: Maybe<CapitalGain2>;
  interestIncome?: Maybe<CapitalGain2>;
  nonQualifiedIncomeDividend?: Maybe<CapitalGain2>;
  qualifiedIncomeDividend?: Maybe<CapitalGain2>;
}
export interface RepaymentCategory4 {
  __typename?: "RepaymentCategory4";
  bonusIssue?: Maybe<CapitalGain2>;
  factor?: Maybe<CapitalGain2>;
  repayment?: Maybe<CapitalGain2>;
  rightsIssue?: Maybe<CapitalGain2>;
  split?: Maybe<CapitalGain2>;
}
/** Lipper Leaders scores */
export interface Scores7 {
  __typename?: "Scores7";
  /** Fund scores organized by the time period of measurement */
  consistentReturn?: Maybe<TotalReturn>;
  /** Fund scores organized by the time period of measurement */
  expense?: Maybe<TotalReturn>;
  /** Fund scores organized by the time period of measurement */
  preservation?: Maybe<TotalReturn>;
  /** Fund scores organized by the time period of measurement */
  taxEfficiency?: Maybe<TotalReturn>;
  /** Fund scores organized by the time period of measurement */
  totalReturn?: Maybe<TotalReturn>;
}
/** Fund scores organized by the time period of measurement */
export interface TotalReturn {
  __typename?: "TotalReturn";
  /** The 5-year score */
  fiveYear?: Maybe<Scalars["Int"]>;
  /** The overall score */
  overall?: Maybe<Scalars["Int"]>;
  /** The 10-year score */
  tenYear?: Maybe<Scalars["Int"]>;
  /** The 3-year score */
  threeYear?: Maybe<Scalars["Int"]>;
}
/** Fund yields */
export interface Yields {
  __typename?: "Yields";
  /** Daily SEC yield */
  dailySecYield?: Maybe<Scalars["Float"]>;
  /** Daily SEC yield date */
  dailySecYieldDate?: Maybe<Scalars["String"]>;
  /** Distribution yield */
  distributionYield?: Maybe<Scalars["Float"]>;
  /** Dividend yield */
  dividendYield?: Maybe<Scalars["Float"]>;
  /** Lipper distribution yield */
  lipperDistributionYield?: Maybe<Scalars["Float"]>;
  /** Lipper projected yield */
  projectedYield?: Maybe<Scalars["Float"]>;
  /** SEC yield */
  secYield?: Maybe<Scalars["Float"]>;
  /** Simple yield at the beginning of the measured period */
  simpleYieldBegin?: Maybe<Scalars["Float"]>;
  /** Simple yield at the end of the measured period */
  simpleYieldEnd?: Maybe<Scalars["Float"]>;
  /** 30-day yield */
  thirtyDayYield?: Maybe<Scalars["Float"]>;
  /** Trailing twelve-month yield */
  trailingTwelveMonthYield?: Maybe<Scalars["Float"]>;
}
export interface PriceQuotesListItem {
  __typename?: "PriceQuotesListItem";
  /** Accrued interest */
  accruedInterest?: Maybe<Scalars["Float"]>;
  /** The ask price, yield, or discount of the security */
  askPrice?: Maybe<Scalars["Float"]>;
  /** The ask yield of the security */
  askYield?: Maybe<Scalars["Float"]>;
  /** The difference between the bond's native bid yield to maturity and the interest rate swap */
  assetSwapSpread?: Maybe<Scalars["Float"]>;
  /** The difference between the bond's yield and the yield of its benchmark */
  benchmarkSpread?: Maybe<Scalars["Float"]>;
  /** The bid price, yield, or discount of the security */
  bidPrice?: Maybe<Scalars["Float"]>;
  /** The bid yield of the security */
  bidYield?: Maybe<Scalars["Float"]>;
  /**
   * The corporate bond equivalent cash flow yield using the cash-flow assumptions described as follows: the
   * average life of the security, calculated with the cash-flow assumption that corporate and government
   * securities trade to maturity
   */
  cbeYieldToMaturity?: Maybe<Scalars["Float"]>;
  /**
   * The corporate bond equivalent cash-flow yield using the cash-flow assumptions described as follows: the
   * average life, computed using cash-flow assumptions that represent expected outcome.
   */
  cbeYieldToWorst?: Maybe<Scalars["Float"]>;
  /** The exchange contributed market closing price for the security */
  closePrice?: Maybe<Scalars["Float"]>;
  /** The effective date of the price */
  date: Scalars["String"];
  /** The exchange contributed highest market price of the day for the security */
  highPrice?: Maybe<Scalars["Float"]>;
  /** The exchange contributed lowest market price of the day for the security */
  lowPrice?: Maybe<Scalars["Float"]>;
  /** The exchange contributed market open price for the security */
  openPrice?: Maybe<Scalars["Float"]>;
  /** Price following market and vendor conventions */
  price?: Maybe<Scalars["Float"]>;
  /** Pricing vendor or contributor */
  source: Scalars["String"];
  /** The difference between the bond’s yield and the LIBOR curve, expressed in basis points */
  swapSpread?: Maybe<Scalars["Float"]>;
  /** The exchange contributed trade volume for the day for the security */
  volume?: Maybe<Scalars["Float"]>;
  /** Yield is calculated using the native yield to maturity convention */
  yieldToMaturity?: Maybe<Scalars["Float"]>;
  /**
   * Yield is calculated based on the native yield to worst formula, after taking all of the bond redemption
   * features into account
   */
  yieldToWorst?: Maybe<Scalars["Float"]>;
  /**
   * The constant spread in basis points that will make the price equal to the present value of the cash flows
   * when added to each relevant point of the yield curve
   */
  zSpread?: Maybe<Scalars["Float"]>;
}
/** BondHouse's proprietary scores */
export interface Scores2 {
  __typename?: "Scores2";
  /**
   * BondHouse's proprietary measure for the attractiveness of an asset, which is a function of its expected
   * return and risk
   */
  attractiveness?: Maybe<Scalars["Float"]>;
  /**
   * BondHouse's proprietary credit score, based on a number of inputs to evaluate the credit-worthiness of a
   * bond
   */
  credit?: Maybe<Scalars["Float"]>;
  /**
   * (Funds only) BondHouse's proprietary efficiency score, measuring the effectiveness of fund management in
   * managing taxes, expenses, etc.
   */
  efficiency?: Maybe<Scalars["Float"]>;
  /** BondHouse's proprietary liquidity score, which measures the investor's ability to transact in an asset */
  liquidity?: Maybe<Scalars["Float"]>;
  /** BondHouse's proprietary risk measure based on our risk model */
  risk?: Maybe<Scalars["Float"]>;
  /** The date and time that this score was calculated */
  timestamp?: Maybe<Scalars["String"]>;
}
export type SearchAssetRequestInput = {
  /**
   * The fields on the asset to return instead of the entire asset object. To search on fields
   * that are nested use the "dot" notation (i.e. fund.strategy)
   */
  fields?: Maybe<Array<Maybe<Scalars["String"]>>>;
  /** Filters used to constrain search results. All filters will be ANDed. */
  filters?: Maybe<Scalars["JSON"]>;
  /** The record to start from */
  from?: Maybe<Scalars["Int"]>;
  /** The search query */
  query?: Maybe<Scalars["String"]>;
  /** The maximum number of records to return */
  size?: Maybe<Scalars["Int"]>;
  /** Sort */
  sort?: Maybe<Array<Maybe<Sort2Input>>>;
};
/** A field and direction to provide the search results in */
export type Sort2Input = {
  /** The field on the Asset to sort by */
  field: Scalars["String"];
  /** Sort order */
  order: Order3;
};
export enum Order3 {
  Ascending = "ASCENDING",
  Descending = "DESCENDING"
}
export interface CreateOrReplaceAssetTimeSeriesResponse {
  __typename?: "CreateOrReplaceAssetTimeSeriesResponse";
  message: Scalars["String"];
}
export type CreateOrReplaceAssetTimeSeriesRequestInput = {
  assetTimeSeries: Array<Maybe<AssetTimeSeriesDataInput>>;
};
export interface UpdateAssetTimeSeriesByExternalIdResponse {
  __typename?: "UpdateAssetTimeSeriesByExternalIdResponse";
  updated: Scalars["Boolean"];
}
export type UpdateAssetTimeSeriesByExternalIdRequestInput = {
  assetTimeSeries: Array<Maybe<AssetTimeSeriesDataInput>>;
  /** The identifier per the external ID source */
  externalId: Scalars["String"];
  /** The name of the external ID source */
  sourceName: Scalars["String"];
};
export interface UpdateAssetByExternalIdResponse {
  __typename?: "UpdateAssetByExternalIdResponse";
  created: Scalars["Boolean"];
  updated: Scalars["Boolean"];
}
export type UpdateAssetByExternalIdRequestInput = {
  asset: Asset5Input;
  /** The identifier per the external ID source */
  externalId: Scalars["String"];
  /** The name of the external ID source */
  sourceName: Scalars["String"];
};
export interface CalculateBetasResponse {
  __typename?: "CalculateBetasResponse";
  bonds?: Maybe<CorrelationAndBeta>;
  gold?: Maybe<CorrelationAndBeta>;
  highYield?: Maybe<CorrelationAndBeta>;
  stocks?: Maybe<CorrelationAndBeta>;
}
export interface CorrelationAndBeta {
  __typename?: "CorrelationAndBeta";
  beta: Scalars["Float"];
  correlation: Scalars["Float"];
}
export type CalculateBetasRequestInput = {
  /** Defaults to the previous business day */
  date?: Maybe<Scalars["String"]>;
  portfolio: PortfolioInput;
};
export interface SearchCompositeDataResponse {
  __typename?: "SearchCompositeDataResponse";
  compositeData: Array<Maybe<CompositeData2>>;
}
export interface CompositeData2 {
  __typename?: "CompositeData2";
  benchmarkCusip?: Maybe<Scalars["String"]>;
  benchmarkIsin?: Maybe<Scalars["String"]>;
  currency?: Maybe<Scalars["String"]>;
  cusip?: Maybe<Scalars["String"]>;
  discountMargin?: Maybe<Scalars["String"]>;
  entryDirection?: Maybe<Scalars["String"]>;
  entryId: Scalars["String"];
  entrySource: Scalars["String"];
  entryTransType: Scalars["String"];
  entryType: Scalars["String"];
  id: Scalars["String"];
  isin?: Maybe<Scalars["String"]>;
  lastAswSpread?: Maybe<Scalars["String"]>;
  lastGSpread?: Maybe<Scalars["String"]>;
  lastISpread?: Maybe<Scalars["String"]>;
  lastOasSpread?: Maybe<Scalars["String"]>;
  lastPrice: Scalars["String"];
  lastSpread?: Maybe<Scalars["String"]>;
  lastTimestamp: Scalars["String"];
  lastYield?: Maybe<Scalars["String"]>;
  lastZSpread?: Maybe<Scalars["String"]>;
  liquidityScore?: Maybe<Scalars["String"]>;
  marketSegment?: Maybe<Scalars["String"]>;
  mmeYield?: Maybe<Scalars["String"]>;
  nextCallDate?: Maybe<Scalars["String"]>;
  numberOfEntries: Scalars["String"];
  updatedAt: Scalars["String"];
  yieldToNextCall?: Maybe<Scalars["String"]>;
}
export type SearchCompositeDataRequestInput = {
  cusips?: Maybe<Array<Maybe<Scalars["String"]>>>;
  ids?: Maybe<Array<Maybe<Scalars["String"]>>>;
  isins?: Maybe<Array<Maybe<Scalars["String"]>>>;
};
export interface GetByCusipsResponse {
  __typename?: "GetByCusipsResponse";
  cusipIceMappings: Array<Maybe<CusipIceMapping>>;
}
export interface CusipIceMapping {
  __typename?: "CusipIceMapping";
  cusip: Scalars["String"];
  iceData: Array<Maybe<IncrementalData>>;
}
export type GetByCusipsRequestInput = {
  cusips: Array<Maybe<Scalars["String"]>>;
};
export interface PostExecutionLogResponse {
  __typename?: "PostExecutionLogResponse";
  executionLog: ExecutionLog;
}
export type PostExecutionLogRequestInput = {
  application: Scalars["String"];
  endpoint: Scalars["String"];
  failure?: Maybe<Scalars["String"]>;
  orderId?: Maybe<Scalars["String"]>;
  portfolioId?: Maybe<Scalars["String"]>;
  responseCode: Scalars["Int"];
  state?: Maybe<Scalars["String"]>;
  tradeId?: Maybe<Scalars["String"]>;
};
export interface GetAssetsByExternalIdResponse {
  __typename?: "GetAssetsByExternalIdResponse";
  assets: Array<Maybe<Asset5>>;
}
export type GetAssetsByExternalIdRequestInput = {
  /** Allow missing external ID mappings without failure */
  allowMissing?: Maybe<Scalars["Boolean"]>;
  /** A list of unique external IDs to look up for the provided source name */
  externalIds: Array<Maybe<Scalars["String"]>>;
};
export interface GetExternalIdMappingsResponse {
  __typename?: "GetExternalIdMappingsResponse";
  externalIdMappings: Array<Maybe<ExternalIdMappingsListItem>>;
}
export interface ExternalIdMappingsListItem {
  __typename?: "ExternalIdMappingsListItem";
  externalIdMapping?: Maybe<ExternalIdMapping>;
}
export type GetExternalIdMappingsRequestInput = {
  /** Allow missing external ID mappings without failure */
  allowMissing?: Maybe<Scalars["Boolean"]>;
  externalIds: Array<Maybe<Scalars["String"]>>;
};
export interface CreateOrReplaceExternalPortfolioResponse {
  __typename?: "CreateOrReplaceExternalPortfolioResponse";
  created: Scalars["Boolean"];
  updated: Scalars["Boolean"];
}
export type CreateOrReplaceExternalPortfolioRequestInput = {
  portfolio: Portfolio3Input;
};
export type Portfolio3Input = {
  accountNumber?: Maybe<Scalars["String"]>;
  app?: Maybe<AppType2>;
  createdAt: Scalars["String"];
  currency: Scalars["String"];
  description?: Maybe<Scalars["String"]>;
  id: Scalars["String"];
  metadata?: Maybe<Scalars["JSON"]>;
  name: Scalars["String"];
  positions: Array<Maybe<Position2Input>>;
  status: PortfolioStatus;
  updatedAt?: Maybe<Scalars["String"]>;
};
export type Position2Input = {
  /** The BondHouse unique identifier for the asset */
  assetId: Scalars["String"];
  /** The total cost basis of the position (not basis per share) */
  costBasis?: Maybe<Scalars["Float"]>;
  createdAt?: Maybe<Scalars["String"]>;
  /** A unique identifier for the position */
  id: Scalars["String"];
  metadata?: Maybe<Scalars["JSON"]>;
  /** The unique identifier for the portfolio */
  portfolioId: Scalars["String"];
  /** The position quantity in standard market units (face for bonds, shares for equities, etc.) */
  quantity: Scalars["Float"];
  settled?: Maybe<Scalars["Float"]>;
  /** The trade date */
  tradeDate?: Maybe<Scalars["String"]>;
  unsettled?: Maybe<Scalars["Float"]>;
  updatedAt?: Maybe<Scalars["String"]>;
};
export interface UploadFileResponse {
  __typename?: "UploadFileResponse";
  fileInfo: FileInfo;
}
export type UploadFileRequestInput = {
  affiliatedResource: AffiliatedResource;
  affiliatedResourceId: Scalars["String"];
  documentName: DocumentName;
  /** Base64 */
  file: Scalars["String"];
  fileExtension: FileExtension;
};
export interface UploadIdentityDocumentResponse {
  __typename?: "UploadIdentityDocumentResponse";
  identityDocument: IdentityDocument;
}
export interface IdentityDocument {
  __typename?: "IdentityDocument";
  documentType?: Maybe<DocumentType>;
  snapId: Scalars["String"];
  uploadDateTime?: Maybe<Scalars["String"]>;
  uploadUserName?: Maybe<Scalars["String"]>;
}
export interface DocumentType {
  __typename?: "DocumentType";
  description?: Maybe<Scalars["String"]>;
  name?: Maybe<Scalars["String"]>;
}
export type UploadIdentityDocumentRequestInput = {
  file: Scalars["String"];
  fileType: FileType;
  metadata: DocumentMetadata2Input;
};
export enum FileType {
  Pdf = "PDF",
  Png = "PNG",
  Jpg = "JPG"
}
export type DocumentMetadata2Input = {
  account: Scalars["String"];
  correspondent?: Maybe<Scalars["String"]>;
  documentType: DocumentTypeEnum;
  tag: Tag;
};
export enum DocumentTypeEnum {
  DriversLicense = "DRIVERS_LICENSE",
  StateIdCard = "STATE_ID_CARD",
  Passport = "PASSPORT",
  MilitaryId = "MILITARY_ID",
  SsnCard = "SSN_CARD",
  SsaLetter = "SSA_LETTER",
  IrsItinLetter = "IRS_ITIN_LETTER",
  OtherGovernmentId = "OTHER_GOVERNMENT_ID",
  CddDocument = "CDD_DOCUMENT",
  AllPassingCipResults = "ALL_PASSING_CIP_RESULTS"
}
export enum Tag {
  IdDocument = "ID_DOCUMENT",
  SignatureImage = "SIGNATURE_IMAGE",
  AffiliatedApproval = "AFFILIATED_APPROVAL",
  Other = "OTHER"
}
export interface CreateApiCallRecordResponse {
  __typename?: "CreateApiCallRecordResponse";
  apiCallRecord: ApiCallRecord;
}
export type CreateApiCallRecordRequestInput = {
  action: Action;
  responseStatus: Scalars["String"];
  url: Scalars["String"];
};
export interface CreateOrUpdateInventoryMappingResponse {
  __typename?: "CreateOrUpdateInventoryMappingResponse";
  inventoryMapping: InventoryMapping;
}
export type CreateOrUpdateInventoryMappingRequestInput = {
  app: AppType;
  /** leaving this empty would remove the institution's default and the Yieldx default would be used */
  inventoryId?: Maybe<Scalars["String"]>;
};
export enum AppType {
  AssetExplorer = "ASSET_EXPLORER",
  Bestfit = "BESTFIT",
  Inpaas = "INPAAS"
}
export interface CreateInvestorMappingResponse {
  __typename?: "CreateInvestorMappingResponse";
  investorMapping: InvestorMapping;
}
export type CreateInvestorMappingRequestInput = {
  investorId: Scalars["String"];
};
export interface CreatePortfolioMappingResponse {
  __typename?: "CreatePortfolioMappingResponse";
  portfolioMapping: PortfolioMapping;
}
export type CreatePortfolioMappingRequestInput = {
  portfolioId: Scalars["String"];
};
export interface CreateProposalMappingResponse {
  __typename?: "CreateProposalMappingResponse";
  proposalMapping: ProposalMapping;
}
export type CreateProposalMappingRequestInput = {
  proposalId: Scalars["String"];
};
export interface CreateRoleMappingResponse {
  __typename?: "CreateRoleMappingResponse";
  role: RoleMapping;
}
export type CreateRoleMappingRequestInput = {
  roleId: Scalars["String"];
  userType: Scalars["String"];
};
export interface CreateUserMappingResponse {
  __typename?: "CreateUserMappingResponse";
  userMapping: UserMapping;
}
export type CreateUserMappingRequestInput = {
  email: Scalars["String"];
  userId?: Maybe<Scalars["String"]>;
  userType: Scalars["String"];
};
/** The response to a request to generate a BestFit whitelist */
export interface GenerateBestFitWhitelistResponse {
  __typename?: "GenerateBestFitWhitelistResponse";
  /** A list of BondHouse unique asset IDs */
  assetIds: Array<Maybe<Scalars["String"]>>;
}
/** A request to generate a whitelist for BestFit */
export type GenerateBestFitWhitelistRequestInput = {
  /** Target number of bonds in your portfolio. Defaults to 25. */
  count?: Maybe<Scalars["Int"]>;
  /** Credit quality buckets. Defaults to "Highest quality" and "Investment grade". */
  creditQualityBuckets?: Maybe<Array<Maybe<BestFitCreditQuality>>>;
  /**
   * Target duration in years. If neither duration nor maturity is provided, a target maturity of 5 years is
   * assumed.
   */
  duration?: Maybe<Scalars["Float"]>;
  /** Exclude bonds with ESG scores below the specified percentile, e.g. 25. Defaults to no exclusions. */
  excludedEsgScorePercentile?: Maybe<Scalars["Float"]>;
  /** Sectors to exclude, such as ["Manufacturing", "Other Financial"]. Defaults to no exclusions. */
  excludedSectors?: Maybe<Array<Maybe<Scalars["String"]>>>;
  /** Subsectors to exclude, such as ["Oil and Gas", "Tobacco"]. Defaults to no exclusions. */
  excludedSubsectors?: Maybe<Array<Maybe<Scalars["String"]>>>;
  /**
   * Target maturity in years. If neither duration nor maturity is provided, a target maturity of 5 years is
   * assumed.
   */
  maturity?: Maybe<Scalars["Float"]>;
  /** A target yield. Not used currently. */
  yield?: Maybe<Scalars["Float"]>;
};
export enum BestFitCreditQuality {
  HighestQuality = "HIGHEST_QUALITY",
  InvestmentGrade = "INVESTMENT_GRADE",
  HighYield = "HIGH_YIELD",
  Speculative = "SPECULATIVE"
}
/** The response to a request to generate a BestFit whitelist */
export interface GenerateMuniBestFitWhitelistResponse {
  __typename?: "GenerateMuniBestFitWhitelistResponse";
  /** A list of BondHouse unique asset IDs */
  assetIds: Array<Maybe<Scalars["String"]>>;
}
/** A request to generate a whitelist for Muni BestFit */
export type GenerateMuniBestFitWhitelistRequestInput = {
  /** Target number of bonds in your portfolio. Defaults to 10. */
  count?: Maybe<Scalars["Int"]>;
  /**
   * Target duration in years. If neither duration nor maturity is provided, a target maturity of 5 years is
   * assumed.
   */
  duration?: Maybe<Scalars["Float"]>;
  /** Exclude callable bonds. Defaults to false */
  excludeCallableBonds?: Maybe<Scalars["Boolean"]>;
  /** Credit quality buckets to exclude. Defaults to no exclusions. */
  excludeCreditQualityBuckets?: Maybe<Array<Maybe<BestFitCreditQuality>>>;
  /** Debt service types to exclude. Defaults to no exclusions. */
  excludeDebtServiceTypes?: Maybe<Array<Maybe<MuniDebtServiceType>>>;
  /** Use of proceeds types to exclude. Defaults to no exclusions. */
  excludeUseOfProceedsTypes?: Maybe<Array<Maybe<MuniUseOfProceeds>>>;
  /**
   * Target maturity in years. If neither duration nor maturity is provided, a target maturity of 5 years is
   * assumed.
   */
  maturity?: Maybe<Scalars["Float"]>;
  /** List of states to include. Defaults to ALL for all states */
  states?: Maybe<Array<Maybe<MuniState>>>;
  /** A target yield. Not used currently. */
  yield?: Maybe<Scalars["Float"]>;
};
export enum MuniDebtServiceType {
  GeneralObligation = "GENERAL_OBLIGATION",
  Revenue = "REVENUE"
}
export enum MuniUseOfProceeds {
  Education = "EDUCATION",
  GeneralPurpose = "GENERAL_PURPOSE",
  Transportation = "TRANSPORTATION",
  Water = "WATER",
  Other = "OTHER"
}
export enum MuniState {
  Al = "AL",
  Ak = "AK",
  Az = "AZ",
  Ar = "AR",
  Ca = "CA",
  Co = "CO",
  Ct = "CT",
  De = "DE",
  Fl = "FL",
  Ga = "GA",
  Hi = "HI",
  Id = "ID",
  Il = "IL",
  In = "IN",
  Ia = "IA",
  Ks = "KS",
  Ky = "KY",
  La = "LA",
  Me = "ME",
  Md = "MD",
  Ma = "MA",
  Mi = "MI",
  Mn = "MN",
  Ms = "MS",
  Mo = "MO",
  Mt = "MT",
  Ne = "NE",
  Nv = "NV",
  Nh = "NH",
  Nj = "NJ",
  Nm = "NM",
  Ny = "NY",
  Nc = "NC",
  Nd = "ND",
  Oh = "OH",
  Ok = "OK",
  Or = "OR",
  Pa = "PA",
  Ri = "RI",
  Sc = "SC",
  Sd = "SD",
  Tn = "TN",
  Tx = "TX",
  Ut = "UT",
  Vt = "VT",
  Va = "VA",
  Wa = "WA",
  Wv = "WV",
  Wi = "WI",
  Wy = "WY",
  As = "AS",
  Dc = "DC",
  Fm = "FM",
  Gu = "GU",
  Mh = "MH",
  Mp = "MP",
  Pw = "PW",
  Pr = "PR",
  Vi = "VI",
  All = "ALL"
}
export interface CreateInstitutionResponse {
  __typename?: "CreateInstitutionResponse";
  institution: Institution;
}
export type CreateInstitutionRequestInput = {
  metadata?: Maybe<Scalars["JSON"]>;
  name: Scalars["String"];
  primaryContact: PrimaryContactInput;
};
export interface SearchApexAccountsResponse {
  __typename?: "SearchApexAccountsResponse";
  apexAccounts: Array<Maybe<ApexAccount2>>;
}
export type SearchApexAccountsRequestInput = {
  accountIds?: Maybe<Array<Maybe<Scalars["String"]>>>;
  apexAccountNumbers?: Maybe<Array<Maybe<Scalars["String"]>>>;
  apexAccountRequestIds?: Maybe<Array<Maybe<Scalars["String"]>>>;
  createdAt?: Maybe<DateRangeInput>;
  investorIds?: Maybe<Array<Maybe<Scalars["String"]>>>;
  statuses?: Maybe<Array<Maybe<AccountStatus2>>>;
  updatedAt?: Maybe<DateRangeInput>;
};
export interface SearchApexAchRelationshipsResponse {
  __typename?: "SearchApexAchRelationshipsResponse";
  apexAchRelationships: Array<Maybe<ApexAchRelationship>>;
}
export type SearchApexAchRelationshipsRequestInput = {
  apexAccountIds?: Maybe<Array<Maybe<Scalars["String"]>>>;
  apexRelationshipIds?: Maybe<Array<Maybe<Scalars["String"]>>>;
  createdAt?: Maybe<DateRangeInput>;
  linkedBankAccountIds?: Maybe<Array<Maybe<Scalars["String"]>>>;
  statuses?: Maybe<Array<Maybe<ApexAchRelationshipStatus>>>;
  updatedAt?: Maybe<DateRangeInput>;
};
/** Sync search response */
export interface InternalSyncSearchResponse {
  __typename?: "InternalSyncSearchResponse";
  timestamp?: Maybe<Scalars["String"]>;
}
/** Sync search request */
export type InternalSyncSearchRequestInput = {
  assetIds?: Maybe<Array<Maybe<Scalars["String"]>>>;
};
export interface SearchApexTransfersResponse {
  __typename?: "SearchApexTransfersResponse";
  apexTransfers: Array<Maybe<ApexTransfer>>;
}
export type SearchApexTransfersRequestInput = {
  accountIds?: Maybe<Array<Maybe<Scalars["String"]>>>;
  achRelationshipIds?: Maybe<Array<Maybe<Scalars["String"]>>>;
  apexTransferIds?: Maybe<Array<Maybe<Scalars["String"]>>>;
  createdAt?: Maybe<DateRangeInput>;
  direction?: Maybe<TransferDirection>;
  statuses?: Maybe<Array<Maybe<TransferStatus2>>>;
  transferIds?: Maybe<Array<Maybe<Scalars["String"]>>>;
  updatedAt?: Maybe<DateRangeInput>;
};
export interface CreateLinkedBankAccountResponse {
  __typename?: "CreateLinkedBankAccountResponse";
  linkedBankAccount: LinkedBankAccount;
}
export type CreateLinkedBankAccountRequestInput = {
  accountId: Scalars["String"];
  accountType: AccountType2;
  /** bankName */
  institution: Scalars["String"];
  linkSessionId: Scalars["String"];
  mask: Scalars["String"];
  /** accountName */
  name: Scalars["String"];
  publicToken: Scalars["String"];
};
export interface CreateLinkedBankAccountDirectlyResponse {
  __typename?: "CreateLinkedBankAccountDirectlyResponse";
  linkedBankAccount: LinkedBankAccount;
}
export type CreateLinkedBankAccountDirectlyRequestInput = {
  accountNumber: Scalars["String"];
  accountType: AccountType2;
  bankName: Scalars["String"];
  routing: Scalars["String"];
  wire?: Maybe<Scalars["String"]>;
};
export interface SettleFundTransferResponse {
  __typename?: "SettleFundTransferResponse";
  ledgerEntry?: Maybe<LedgerEntry>;
}
export type CreateFundTransferRequestInput = {
  comment?: Maybe<Scalars["String"]>;
  currency: Scalars["String"];
  quantity: Scalars["Float"];
};
export interface CreatePortfolioResponse {
  __typename?: "CreatePortfolioResponse";
  portfolio: Portfolio3;
}
export type CreatePortfolioRequestInput = {
  app?: Maybe<AppType2>;
  currency: Scalars["String"];
  description?: Maybe<Scalars["String"]>;
  metadata?: Maybe<Scalars["JSON"]>;
  name: Scalars["String"];
};
export interface CreateInvestorCashPortfolioResponse {
  __typename?: "CreateInvestorCashPortfolioResponse";
  externalAccounts: Array<Maybe<ExternalAccountsListItem>>;
  portfolio: Portfolio3;
}
export interface ExternalAccountsListItem {
  __typename?: "ExternalAccountsListItem";
  externalEntityId: Scalars["String"];
  externalEntityType: ExternalEntityType;
}
export interface CreateTransferResponse {
  __typename?: "CreateTransferResponse";
  transfer: Transfer3;
}
export type CreateTransferRequestInput = {
  amount: Scalars["Float"];
  currency: Scalars["String"];
  direction: TransferDirection;
  externalEntity: ExternalEntityInput;
  linkedBankAccountId: Scalars["String"];
  metadata?: Maybe<Scalars["JSON"]>;
  portfolioId: Scalars["String"];
  transferMethod?: Maybe<TransferMethod>;
};
export type ExternalEntityInput = {
  externalEntityId: Scalars["String"];
  externalEntityType: ExternalEntityType;
};
export interface CreateInvestorResponse {
  __typename?: "CreateInvestorResponse";
  investor: Investor;
}
export type CreateInvestorRequestInput = {
  investorInfo: CreateInvestorInfoInput;
  /** cannot be updated */
  investorType: InvestorType;
  metadata?: Maybe<Scalars["JSON"]>;
};
export type CreateInvestorInfoInput = {
  applicantSignature: ApplicantSignature2Input;
  /** Only required for organizations */
  beneficialOwnersAndOfficers?: Maybe<BeneficialOwnersAndOfficersInput>;
  birthCountry?: Maybe<Scalars["String"]>;
  /** Agreement for corporations. Required for organizations with entityType of C_CORPORATION or S_CORPORATION */
  cashAccountAgreement?: Maybe<CashAccountAgreementInput>;
  catAccountHolderType?: Maybe<CatAccountHolderType2>;
  citizenshipCountry: Scalars["String"];
  contactInformation: ContactInformationInput;
  dateOfBirth: Scalars["String"];
  disclosures: Disclosures2Input;
  /** Only required for individuals */
  employment?: Maybe<Employment2Input>;
  entityDueDiligence?: Maybe<EntityDueDiligenceInput>;
  /** Only required for organizations */
  exemptLegalCustomer?: Maybe<ExemptLegalCustomerInput>;
  familyName: Scalars["String"];
  givenName: Scalars["String"];
  /** Only required for individuals */
  investmentProfile?: Maybe<InvestmentProfile2Input>;
  isPermanentResident?: Maybe<Scalars["Boolean"]>;
  /** cannot be updated, defaults to accept */
  issuerDirectCommunication?: Maybe<IssuerDirectCommunication>;
  /**
   * Agreement for LLCs. Required for organizations with entityType of LIMITED_LIABILITY_COMPANY_C_CORPORATION,
   * LIMITED_LIABILITY_COMPANY_S_CORPORATION, or LIMITED_LIABILITY_COMPANY_PARTNERSHIP
   */
  llcAccountAgreement?: Maybe<LlcAccountAgreementInput>;
  /** Only required for organizations */
  organization?: Maybe<OrganizationInput>;
  /** required if organization */
  organizationName?: Maybe<Scalars["String"]>;
  /** required if organization */
  organizationTaxId?: Maybe<Scalars["String"]>;
  /** format xxx-xx-xxxx */
  socialSecurityNumber: Scalars["String"];
  suitabilityProfile: SuitabilityProfileInput;
  title?: Maybe<Scalars["String"]>;
  trustedContactInfo: TrustedContactInfoInput;
  /** Only required for organizations */
  wnineTaxForm?: Maybe<WNineTaxFormInput>;
};
export type ApplicantSignature2Input = {
  eSigned: Scalars["Boolean"];
};
export interface SearchTransfersResponse {
  __typename?: "SearchTransfersResponse";
  transfers?: Maybe<Array<Maybe<Transfer>>>;
}
export type SearchTransfersRequestInput = {
  direction?: Maybe<TransferDirection>;
  externalEntityId?: Maybe<Scalars["String"]>;
  externalEntityType?: Maybe<ExternalEntityType>;
  investorIds?: Maybe<Array<Maybe<Scalars["String"]>>>;
  linkedBankAccountIds?: Maybe<Array<Maybe<Scalars["String"]>>>;
  portfolioIds?: Maybe<Array<Maybe<Scalars["String"]>>>;
  status?: Maybe<TransferStatus3>;
};
export interface GetAccessTokenResponse {
  __typename?: "GetAccessTokenResponse";
  accessToken: Scalars["String"];
}
export type GetAccessTokenRequestInput = {
  clientId: Scalars["String"];
  clientSecret: Scalars["String"];
};
/** Response containing the optimized portfolio and the orders needed to implement it */
export interface OptimizePortfolioResponse {
  __typename?: "OptimizePortfolioResponse";
  orders: Array<Maybe<Orders6ListItem>>;
  portfolio: Portfolio;
}
export interface Orders6ListItem {
  __typename?: "Orders6ListItem";
  assetId: Scalars["String"];
  /** Comment for the order */
  comment?: Maybe<Scalars["String"]>;
  direction: Direction2;
  fullFillRequired?: Maybe<Scalars["Boolean"]>;
  goodTillCancel?: Maybe<Scalars["Boolean"]>;
  metadata?: Maybe<Scalars["JSON"]>;
  /**
   * Unique identifier for an order. An attempt to create an order with an orderId that already exists will not
   * produce a duplicate trade. Temporarily not required.
   */
  orderId?: Maybe<Scalars["String"]>;
  positionId?: Maybe<Scalars["String"]>;
  /** On a BUY this is the upper limit. On a SELL the lower limit. */
  priceLimit?: Maybe<Scalars["Float"]>;
  quantity: Scalars["Float"];
  spotPrice?: Maybe<Scalars["Float"]>;
}
/** Request to optimize a portfolio */
export type OptimizePortfolioRequestInput = {
  /** Constraints that the optimizer must obey */
  constraints?: Maybe<Constraints2Input>;
  /** Analysis date to use for prices, risk analysis, etc. */
  date?: Maybe<Scalars["String"]>;
  /** Objectives whose value the optimizer will attempt to maximize or minimize according to their weights */
  objectives?: Maybe<ObjectivesInput>;
  portfolio: PortfolioInput;
  /** If true, ignore cached optimization results. Defaults to false. */
  refresh?: Maybe<Scalars["Boolean"]>;
  /**
   * An approximate time limit in seconds. Note that the optimizer is designed to produce deterministic results,
   * therefore the actual implementation may not equal the exact time limit provided in the request.
   */
  timeLimit?: Maybe<Scalars["Float"]>;
  /**
   * Whitelist of securities to consider for purchase. Even if a security is already in position, it must also be
   * in the whitelist to be buyable.
   */
  whitelist?: Maybe<Array<Maybe<WhitelistItemInput>>>;
};
/** Constraints that the optimizer must obey */
export type Constraints2Input = {
  /** List of analytics constraints */
  analytics?: Maybe<Array<Maybe<AnalyticConstraintInput>>>;
  /** Constrain the percent expense ratio */
  expenseRatio?: Maybe<ExpenseRatioConstraintInput>;
  /** List of instrument concentration constraints */
  instrumentConcentration?: Maybe<
    Array<Maybe<InstrumentConcentrationConstraintInput>>
  >;
  /** Constrain the concentration in issuers */
  issuerConcentration?: Maybe<IssuerConcentrationConstraintInput>;
  /** List of locked positions. Positions that are not specified here may be sold. */
  lockedPositions?: Maybe<Array<Maybe<LockedPositionConstraintInput>>>;
  /** Require all positions to be at least a certain size, expressed as a portion of the portfolio, where 100% is 1 */
  minimumPositionSize?: Maybe<MinimumPositionSizeConstraintInput>;
  /** List of minimum trade size constraints */
  minimumTradeSize?: Maybe<Array<Maybe<MinimumTradeSizeConstraintInput>>>;
  /** List of ratings constraints */
  ratings?: Maybe<Array<Maybe<RatingsConstraintInput>>>;
  /** Constrain portfolio risk */
  risk?: Maybe<RiskConstraintInput>;
  /**
   * Constrain the number of trades that may be made in a portfolio. Note that a large number here in a large
   * portfolio can have very negative affects on runtime, therefore the optimization may fail or return a sub-optimal
   * solution after a certain time limit.
   */
  tradeCount?: Maybe<TradeCountConstraintInput>;
  /** Constrain portfolio turnover, calculated as the average of buys and sells */
  turnover?: Maybe<TurnoverConstraintInput>;
};
/** Constrain the weighted average value of an analytic within a range */
export type AnalyticConstraintInput = {
  /** A supported analytic */
  analytic: Analytic2;
  /**
   * Filters used to select which assets a constraint applies to. If null, a constraint will apply to all assets and
   * positions unless indicated otherwise. All filters will be ANDed; assets and positions must match all provided
   * filters.
   */
  filters?: Maybe<FiltersInput>;
  maximumWeightedAverage?: Maybe<Scalars["Float"]>;
  minimumWeightedAverage?: Maybe<Scalars["Float"]>;
};
export enum Analytic2 {
  Currentyield = "CURRENTYIELD",
  Duration = "DURATION",
  Effectiveduration = "EFFECTIVEDURATION",
  Defaultadjustedyield = "DEFAULTADJUSTEDYIELD",
  Dividendyield = "DIVIDENDYIELD",
  Optionadjustedspread = "OPTIONADJUSTEDSPREAD",
  Recoveryrate = "RECOVERYRATE",
  Yearstomaturity = "YEARSTOMATURITY",
  Yield = "YIELD",
  Yieldtomaturity = "YIELDTOMATURITY",
  Yieldtoworst = "YIELDTOWORST"
}
/**
 * Filters used to select which assets a constraint applies to. If null, a constraint will apply to all assets and
 * positions unless indicated otherwise. All filters will be ANDed; assets and positions must match all provided
 * filters.
 */
export type FiltersInput = {
  /** Filters on the existence of asset data */
  existence?: Maybe<Array<Maybe<ExistenceFilterInput>>>;
  /** Filters on the range of the numeric value of asset data */
  range?: Maybe<Array<Maybe<RangeFilterInput>>>;
  /** Filters on the text value of asset data */
  text?: Maybe<Array<Maybe<TextFilterInput>>>;
  /** Filters on the numeric value of asset data */
  value?: Maybe<Array<Maybe<ValueFilterInput>>>;
};
/** Existence filter */
export type ExistenceFilterInput = {
  /** Key on an Asset object */
  key: Key3;
  /** The comparison to apply between the value on the Asset's key and the filter's value */
  operator: Operator4;
};
export enum Key3 {
  Id = "ID",
  Name = "NAME",
  Assettype = "ASSETTYPE",
  AnalyticsYield = "ANALYTICS_YIELD"
}
export enum Operator4 {
  Exists = "EXISTS",
  DoesNotExist = "DOES_NOT_EXIST"
}
/** Range filter */
export type RangeFilterInput = {
  /** Key on an Asset object */
  key: Key2;
  /** Lower bound */
  lowerBound: Scalars["Float"];
  /**
   * The comparison to apply between the value on the Asset's key and the filter's lowerBound and
   * upperBound
   */
  operator: Operator3;
  /** Upper bound */
  upperBound: Scalars["Float"];
};
export enum Key2 {
  AnalyticsYield = "ANALYTICS_YIELD"
}
export enum Operator3 {
  IsIn = "IS_IN",
  IsNotIn = "IS_NOT_IN"
}
/** Text filter */
export type TextFilterInput = {
  /** Key on an Asset object */
  key: Key;
  /** The comparison to apply between the value on the Asset's key and the filter's value */
  operator: Operator;
  /** Value for comparison */
  value: Scalars["String"];
};
export enum Key {
  Id = "ID",
  Name = "NAME",
  Assettype = "ASSETTYPE"
}
export enum Operator {
  Equals = "EQUALS",
  DoesNotEqual = "DOES_NOT_EQUAL",
  Contains = "CONTAINS",
  DoesNotContain = "DOES_NOT_CONTAIN"
}
/** Value filter */
export type ValueFilterInput = {
  /** Key on an Asset object */
  key: Key2;
  /** The comparison to apply between the value on the Asset's key and the filter's value */
  operator: Operator2;
  /** Value for comparison */
  value: Scalars["Float"];
};
export enum Operator2 {
  Equals = "EQUALS",
  DoesNotEqual = "DOES_NOT_EQUAL",
  IsGreaterThan = "IS_GREATER_THAN",
  IsGreaterThanOrEqualTo = "IS_GREATER_THAN_OR_EQUAL_TO",
  IsLessThan = "IS_LESS_THAN",
  IsLessThanOrEqualTo = "IS_LESS_THAN_OR_EQUAL_TO"
}
/** Constrain the percent expense ratio */
export type ExpenseRatioConstraintInput = {
  /**
   * Filters used to select which assets a constraint applies to. If null, a constraint will apply to all assets and
   * positions unless indicated otherwise. All filters will be ANDed; assets and positions must match all provided
   * filters.
   */
  filters?: Maybe<FiltersInput>;
  /**
   * Maximum weighted average expense ratio across the portfolio. Note that because expense ratios are usually
   * quoted in percentage terms, this value must be specified in percents. For instance, an expense ratio limit
   * of 1.5% should be provided as 1.5.
   */
  maximumWeightedAveragePercent: Scalars["Float"];
};
/** Constrain the concentration in single instruments */
export type InstrumentConcentrationConstraintInput = {
  /**
   * Filters used to select which assets a constraint applies to. If null, a constraint will apply to all assets and
   * positions unless indicated otherwise. All filters will be ANDed; assets and positions must match all provided
   * filters.
   */
  filters?: Maybe<FiltersInput>;
  /** Maximum weight of the instrument in the portfolio */
  maximumWeight?: Maybe<Scalars["Float"]>;
  /** Minimum weight of the instrument in the portfolio */
  minimumWeight?: Maybe<Scalars["Float"]>;
};
/** Constrain the concentration in issuers */
export type IssuerConcentrationConstraintInput = {
  /**
   * Filters used to select which assets a constraint applies to. If null, a constraint will apply to all assets and
   * positions unless indicated otherwise. All filters will be ANDed; assets and positions must match all provided
   * filters.
   */
  filters?: Maybe<FiltersInput>;
  /** Maximum weight of the issuer in the portfolio */
  maximumWeight?: Maybe<Scalars["Float"]>;
  /** Minimum weight of the issuer in the portfolio */
  minimumWeight?: Maybe<Scalars["Float"]>;
};
/**
 * Prevent the position with the provided position ID from being sold. Any position that is not explicitly locked
 * may be sold.
 */
export type LockedPositionConstraintInput = {
  /**
   * Filters used to select which assets a constraint applies to. If null, a constraint will apply to all assets and
   * positions unless indicated otherwise. All filters will be ANDed; assets and positions must match all provided
   * filters.
   */
  filters?: Maybe<FiltersInput>;
  /** Position ID */
  positionId: Scalars["String"];
};
/** Require all positions to be at least a certain size, expressed as a portion of the portfolio, where 100% is 1 */
export type MinimumPositionSizeConstraintInput = {
  /**
   * Filters used to select which assets a constraint applies to. If null, a constraint will apply to all assets and
   * positions unless indicated otherwise. All filters will be ANDed; assets and positions must match all provided
   * filters.
   */
  filters?: Maybe<FiltersInput>;
  /**
   * A description of an allocation. If more than one property is provided, then the one producing the highest market
   * value will be used for lower bounds, and the one producing the lowest market value will be used for upper
   * bounds.
   */
  minimum?: Maybe<Allocation3Input>;
  /** Minimum weight of all positions in the portfolio */
  minimumWeight: Scalars["Float"];
};
/**
 * A description of an allocation. If more than one property is provided, then the one producing the highest market
 * value will be used for lower bounds, and the one producing the lowest market value will be used for upper
 * bounds.
 */
export type Allocation3Input = {
  /** Units of face value for bonds */
  face?: Maybe<Scalars["Float"]>;
  /** Lots */
  lots?: Maybe<Scalars["Int"]>;
  /** Market value in the base currency of the portfolio */
  marketValue?: Maybe<Scalars["Float"]>;
  /** Percent of the total portfolio market value, where 0 means 0% and 100 means 100% */
  percent?: Maybe<Scalars["Float"]>;
  /** Number of shares for equities, funds, etc. */
  shares?: Maybe<Scalars["Float"]>;
  /** Weight of the total portfolio market value, where 0 means 0% and 1 means 100% */
  weight?: Maybe<Scalars["Float"]>;
};
/** Require all trades to be at least a certain size, expressed as a portion of the portfolio, where 100% is 1 */
export type MinimumTradeSizeConstraintInput = {
  /**
   * Filters used to select which assets a constraint applies to. If null, a constraint will apply to all assets and
   * positions unless indicated otherwise. All filters will be ANDed; assets and positions must match all provided
   * filters.
   */
  filters?: Maybe<FiltersInput>;
  /** Minimum weight of all trades raised */
  minimumWeight: Scalars["Float"];
};
/** Constraint portfolio to avoid bonds with a rating lower than the specified minimum */
export type RatingsConstraintInput = {
  /**
   * Filters used to select which assets a constraint applies to. If null, a constraint will apply to all assets and
   * positions unless indicated otherwise. All filters will be ANDed; assets and positions must match all provided
   * filters.
   */
  filters?: Maybe<FiltersInput>;
  maximumWeight?: Maybe<Scalars["Float"]>;
  minimumRating: Scalars["String"];
  minimumWeight?: Maybe<Scalars["Float"]>;
};
/** Constrain portfolio risk */
export type RiskConstraintInput = {
  /** Analysis date that marks the last day of observations. Defaults to the previous business day. */
  date?: Maybe<Scalars["String"]>;
  /**
   * Filters used to select which assets a constraint applies to. If null, a constraint will apply to all assets and
   * positions unless indicated otherwise. All filters will be ANDed; assets and positions must match all provided
   * filters.
   */
  filters?: Maybe<FiltersInput>;
  /** Frequency of observations */
  frequency?: Maybe<Frequency>;
  /**
   * Amount of time in the half-life, using the amount specified in the halfLifeAmount parameter. Defaults to
   * "Months", and halfLifeAmount defaults to 6, so there is a 6-month half-life by default.
   */
  halfLifeAmount?: Maybe<Scalars["Int"]>;
  /**
   * Units of time in the half-life, using the amount specified in the halfLifeAmount parameter. Defaults to
   * "Months", and halfLifeAmount defaults to 6, so there is a 6-month half-life by default.
   */
  halfLifeUnits?: Maybe<HalfLifeUnits>;
  /**
   * Amount of time in the lookback period, using units specified in the lookbackPeriodUnits parameter.
   * Defaults to 24, and lookbackPeriodUnits defaults to "Months", so the default lookback period is 24
   * months.
   */
  lookbackPeriodAmount?: Maybe<Scalars["Int"]>;
  /**
   * Units of time in the lookback period, using the amount specified in the lookbackPeriodAmount parameter.
   * Defaults to "Months", and lookbackPeriodAmount defaults to 24, so the default lookback period is 24
   * months.
   */
  lookbackPeriodUnits?: Maybe<LookbackPeriodUnits>;
  /** Maximum risk in annualized percentage terms */
  maximumRisk: Scalars["Float"];
  /** If true, ignores cached covariance terms. Defaults to false. */
  refresh?: Maybe<Scalars["Boolean"]>;
};
/**
 * Constrain the number of trades that may be made in a portfolio. Note that a large number here in a large
 * portfolio can have very negative affects on runtime, therefore the optimization may fail or return a sub-optimal
 * solution after a certain time limit.
 */
export type TradeCountConstraintInput = {
  /**
   * Filters used to select which assets a constraint applies to. If null, a constraint will apply to all assets and
   * positions unless indicated otherwise. All filters will be ANDed; assets and positions must match all provided
   * filters.
   */
  filters?: Maybe<FiltersInput>;
  /** The maximum number of trades. Defaults to allowing an unlimited number of trades. */
  maximumCount?: Maybe<Scalars["Int"]>;
  /** The minimum number of trades */
  minimumCount?: Maybe<Scalars["Int"]>;
};
/** Constrain portfolio turnover, calculated as the average of buys and sells */
export type TurnoverConstraintInput = {
  /**
   * Filters used to select which assets a constraint applies to. If null, a constraint will apply to all assets and
   * positions unless indicated otherwise. All filters will be ANDed; assets and positions must match all provided
   * filters.
   */
  filters?: Maybe<FiltersInput>;
  /** The maximum turnover, where 1.0 is 100% */
  maximumTurnover: Scalars["Float"];
};
/** Objectives whose value the optimizer will attempt to maximize or minimize according to their weights */
export type ObjectivesInput = {
  /** Maximize a portfolio's after tax yield */
  maximizeAfterTaxYield?: Maybe<MaximizeAfterTaxYieldObjectiveInput>;
  maximizeAnalytic?: Maybe<Array<Maybe<MaximizeAnalyticObjectiveInput>>>;
  /**
   * Maximize a portfolio's tax loss by selling positions at a capital loss and avoiding the sale of positions with
   * capital gains
   */
  maximizeTaxLoss?: Maybe<MaximizeTaxLossObjectiveInput>;
  /** Maximize a portfolio's before tax yield */
  maximizeYield?: Maybe<MaximizeYieldObjectiveInput>;
  minimizeAnalytic?: Maybe<Array<Maybe<MinimizeAnalyticObjectiveInput>>>;
  /**
   * Minimize a portfolio's cash. If you intend to create a cash buffer, this is best used in conjunction with a
   * constraint setting a minimum cash buffer.
   */
  minimizeCash?: Maybe<MinimizeCashObjectiveInput>;
  /** Minimize a portfolio's expense ratio */
  minimizeExpenseRatio?: Maybe<MinimizeExpenseRatioObjectiveInput>;
  /** Minimize a portfolio's issuer concentration, as measured by the sum of squared issuer concentrations */
  minimizeIssuerConcentration?: Maybe<
    MinimizeIssuerConcentrationObjectiveInput
  >;
  /** Minimize linear transaction costs incurred from buying and selling positions */
  minimizeLinearTransactionCosts?: Maybe<
    MinimizeLinearTransactionCostsObjectiveInput
  >;
  /** Minimize a portfolio's risk */
  minimizeRisk?: Maybe<MinimizeRiskObjectiveInput>;
  /** Minimize a portfolio's turnover, calculated as the average of buys and sells */
  minimizeTurnover?: Maybe<MinimizeTurnoverObjectiveInput>;
};
/** Maximize a portfolio's after tax yield */
export type MaximizeAfterTaxYieldObjectiveInput = {
  /** Marginal tax bracket in percents. 35% is 35.0. */
  taxBracket: Scalars["Float"];
  weight?: Maybe<Scalars["Float"]>;
};
/** Maximize a portfolio's weighted average value for an analytic */
export type MaximizeAnalyticObjectiveInput = {
  /** A supported analytic */
  analytic: Analytic2;
  weight?: Maybe<Scalars["Float"]>;
};
/**
 * Maximize a portfolio's tax loss by selling positions at a capital loss and avoiding the sale of positions with
 * capital gains
 */
export type MaximizeTaxLossObjectiveInput = {
  weight?: Maybe<Scalars["Float"]>;
};
/** Maximize a portfolio's before tax yield */
export type MaximizeYieldObjectiveInput = {
  weight?: Maybe<Scalars["Float"]>;
};
/** Minimize a portfolio's weighted average value for an analytic */
export type MinimizeAnalyticObjectiveInput = {
  /** A supported analytic */
  analytic: Analytic2;
  weight?: Maybe<Scalars["Float"]>;
};
/**
 * Minimize a portfolio's cash. If you intend to create a cash buffer, this is best used in conjunction with a
 * constraint setting a minimum cash buffer.
 */
export type MinimizeCashObjectiveInput = {
  weight?: Maybe<Scalars["Float"]>;
};
/** Minimize a portfolio's expense ratio */
export type MinimizeExpenseRatioObjectiveInput = {
  weight?: Maybe<Scalars["Float"]>;
};
/** Minimize a portfolio's issuer concentration, as measured by the sum of squared issuer concentrations */
export type MinimizeIssuerConcentrationObjectiveInput = {
  weight?: Maybe<Scalars["Float"]>;
};
/** Minimize linear transaction costs incurred from buying and selling positions */
export type MinimizeLinearTransactionCostsObjectiveInput = {
  weight?: Maybe<Scalars["Float"]>;
};
/** Minimize a portfolio's risk */
export type MinimizeRiskObjectiveInput = {
  /** Analysis date that marks the last day of observations. Defaults to the previous business day. */
  date?: Maybe<Scalars["String"]>;
  /** Frequency of observations */
  frequency?: Maybe<Frequency>;
  /**
   * Amount of time in the half-life, using the amount specified in the halfLifeAmount parameter. Defaults to
   * "Years", and halfLifeAmount defaults to 0, so there is no half-life by default.
   */
  halfLifeAmount?: Maybe<Scalars["Int"]>;
  /**
   * Units of time in the half-life, using the amount specified in the halfLifeAmount parameter. Defaults to
   * "Months", and halfLifeAmount defaults to 6, so there is a 6-month half-life by default.
   */
  halfLifeUnits?: Maybe<HalfLifeUnits>;
  /**
   * Amount of time in the lookback period, using units specified in the lookbackPeriodUnits parameter.
   * Defaults to 6, and lookbackPeriodUnits defaults to "Months", so the default lookback period is 6
   * months.
   */
  lookbackPeriodAmount?: Maybe<Scalars["Int"]>;
  /**
   * Units of time in the lookback period, using the amount specified in the lookbackPeriodAmount parameter.
   * Defaults to "Months", and lookbackPeriodAmount defaults to 24, so the default lookback period is 24
   * months.
   */
  lookbackPeriodUnits?: Maybe<LookbackPeriodUnits>;
  /** If true, ignores cached covariance terms. Defaults to false. */
  refresh?: Maybe<Scalars["Boolean"]>;
  weight?: Maybe<Scalars["Float"]>;
};
/** Minimize a portfolio's turnover, calculated as the average of buys and sells */
export type MinimizeTurnoverObjectiveInput = {
  weight?: Maybe<Scalars["Float"]>;
};
/** An item in a whitelist */
export type WhitelistItemInput = {
  /** BondHouse unique identifier for an asset. This is not a public identifier. */
  assetId: Scalars["String"];
};
export interface CreateTrafixOrderResponse {
  __typename?: "CreateTrafixOrderResponse";
  trafixOrder: TrafixOrder;
}
export type CreateTrafixOrderRequestInput = {
  assetId: Scalars["String"];
  direction: Direction2;
  fullFillRequired: Scalars["Boolean"];
  goodTillCancel: Scalars["Boolean"];
  /** This is the OMS orderId */
  orderId: Scalars["String"];
  portfolioId: Scalars["String"];
  priceLimit: Scalars["Float"];
  quantity: Scalars["Float"];
  ticker: Scalars["String"];
};
export interface SearchOrdersResponse {
  __typename?: "SearchOrdersResponse";
  orders?: Maybe<Array<Maybe<Order2>>>;
}
export type SearchOrdersRequestInput = {
  assetIds?: Maybe<Array<Maybe<Scalars["String"]>>>;
  assignedTo?: Maybe<Array<Maybe<Scalars["String"]>>>;
  comment?: Maybe<Scalars["String"]>;
  createdAt?: Maybe<DateRangeInput>;
  metadataSelectors?: Maybe<Array<Maybe<MetadataSelectorInput>>>;
  portfolioIds?: Maybe<Array<Maybe<Scalars["String"]>>>;
  quantity?: Maybe<NumberRangeInput>;
  statuses?: Maybe<Array<Maybe<Scalars["String"]>>>;
  updatedAt?: Maybe<DateRangeInput>;
};
export type MetadataSelectorInput = {
  key?: Maybe<Scalars["String"]>;
  value?: Maybe<Scalars["String"]>;
};
export type NumberRangeInput = {
  end?: Maybe<Scalars["Float"]>;
  start?: Maybe<Scalars["Float"]>;
};
export interface ClosePortfolioResponse {
  __typename?: "ClosePortfolioResponse";
  closed: Scalars["Boolean"];
  timestamp: Scalars["String"];
}
export type ClosePortfolioRequestInput = {
  /** Reason for closing the portfolio */
  reason?: Maybe<Scalars["String"]>;
};
export interface CreatePortfolioDeliveryInstructionResponse {
  __typename?: "CreatePortfolioDeliveryInstructionResponse";
  portfolioDeliveryInstruction: PortfolioDeliveryInstruction;
}
export type CreatePortfolioDeliveryInstructionRequestInput = {
  cashOnly?: Maybe<Scalars["Boolean"]>;
  instructions: Array<Maybe<ExternalEntityInput>>;
  investorId: Scalars["String"];
};
export type SettleFundTransferRequestInput = {
  reason?: Maybe<Scalars["String"]>;
};
export interface CreateFundTransferResponse {
  __typename?: "CreateFundTransferResponse";
  accepted: Scalars["Boolean"];
  ledgerEntry: LedgerEntry;
}
export interface CreateOrReplacePortfolioMappingResponse {
  __typename?: "CreateOrReplacePortfolioMappingResponse";
  created: Scalars["Boolean"];
  updated: Scalars["Boolean"];
}
export type CreateOrReplacePortfolioMappingRequestInput = {
  portfolioType: PortfolioType;
  proposalId: Scalars["String"];
};
export interface CreateOrderResponse {
  __typename?: "CreateOrderResponse";
  order: Order2;
}
export type CreateOrderRequestInput = {
  assetId: Scalars["String"];
  /** Comment for the order */
  comment?: Maybe<Scalars["String"]>;
  direction: Direction2;
  fullFillRequired?: Maybe<Scalars["Boolean"]>;
  goodTillCancel?: Maybe<Scalars["Boolean"]>;
  metadata?: Maybe<Scalars["JSON"]>;
  /**
   * Unique identifier for an order. An attempt to create an order with an orderId that already exists will not
   * produce a duplicate trade. Temporarily not required.
   */
  orderId?: Maybe<Scalars["String"]>;
  positionId?: Maybe<Scalars["String"]>;
  /** On a BUY this is the upper limit. On a SELL the lower limit. */
  priceLimit?: Maybe<Scalars["Float"]>;
  quantity: Scalars["Float"];
  spotPrice?: Maybe<Scalars["Float"]>;
};
export interface RebalanceOrdersResponse {
  __typename?: "RebalanceOrdersResponse";
  errors?: Maybe<Array<Maybe<Scalars["String"]>>>;
  placedOrders: Array<Maybe<Order2>>;
  stagedOrders: Array<Maybe<Order2>>;
}
export type RebalanceOrdersRequestInput = {
  orders: Array<Maybe<CreateOrderRequestInput>>;
};
export type PutPreferencesRequestInput = {
  /** BestFit preferences */
  preferences: PreferencesInput;
};
/** BestFit preferences */
export type PreferencesInput = {
  /** Target credit quality for a BestFit portfolio */
  assetClass?: Maybe<AssetClass>;
  /** Target number of bonds in your portfolio */
  count?: Maybe<Scalars["Int"]>;
  /** Credit quality buckets */
  creditQualityBuckets?: Maybe<Array<Maybe<CreditQuality>>>;
  /** Target duration in years */
  duration?: Maybe<Scalars["Float"]>;
  /** Subsectors to exclude, such as ["Oil and Gas", "Tobacco"] */
  excludedSubsectors?: Maybe<Array<Maybe<Scalars["String"]>>>;
  /** Target maturity in years */
  maturity?: Maybe<Scalars["Float"]>;
  /** Target yield. Not used currently. */
  yield?: Maybe<Scalars["Float"]>;
};
export interface SettleTradeResponse {
  __typename?: "SettleTradeResponse";
  ledgerEntries?: Maybe<Array<Maybe<LedgerEntry>>>;
}
export type SettleTradeRequestInput = {
  comment?: Maybe<Scalars["String"]>;
  quantity?: Maybe<Scalars["Float"]>;
};
export interface CreateTradeResponse {
  __typename?: "CreateTradeResponse";
  ledgerEntries: Array<Maybe<LedgerEntry>>;
}
/** CreateTradeRequest represents the occurrence of a trade */
export type CreateTradeRequestInput = {
  assetId: Scalars["String"];
  comment?: Maybe<Scalars["String"]>;
  counterPartyId: Scalars["String"];
  currency: Scalars["String"];
  fee?: Maybe<Scalars["Float"]>;
  metadata?: Maybe<Scalars["JSON"]>;
  /**
   * This is the net amount of cash that must be paid to the counter party or the amount of cash we expect to
   * receive from the counter party as part of the trade agreement.
   *
   * This amount will not show up in the trade itself when queried by id, but rather creates a new row in the
   * trades table against the cash positionId.
   *
   * If this amount is not provided and the trade price is not provided, then no additional row is created in the
   * trades table to represent cash movement.
   */
  netMoney: Scalars["Float"];
  orderId?: Maybe<Scalars["String"]>;
  positionId?: Maybe<Scalars["String"]>;
  quantity: Scalars["Float"];
  status?: Maybe<Status3>;
  tradePrice: Scalars["Float"];
};
export interface CalculatePortfolioRiskResponse {
  __typename?: "CalculatePortfolioRiskResponse";
  risk: Scalars["Float"];
  var?: Maybe<Array<Maybe<VarResult>>>;
}
export interface VarResult {
  __typename?: "VarResult";
  /** Percent confidence level for Value at Risk */
  confidence: Scalars["Float"];
  /** Time period amount */
  timePeriodAmount: Scalars["Int"];
  timePeriodUnits: TimePeriodUnits;
  units: Units;
  /** Value at Risk */
  value: Scalars["Float"];
}
export enum TimePeriodUnits {
  Day = "DAY",
  Month = "MONTH",
  Year = "YEAR"
}
export enum Units {
  Dollars = "DOLLARS",
  Percent = "PERCENT"
}
export type CalculatePortfolioRiskRequestInput = {
  /** Analysis date that marks the last day of observations. Defaults to the previous business day. */
  date?: Maybe<Scalars["String"]>;
  /** Frequency of observations */
  frequency?: Maybe<Frequency>;
  /**
   * Amount of time in the half-life, using the amount specified in the halfLifeAmount parameter. Defaults to
   * "Months", and halfLifeAmount defaults to 6, so there is a 6-month half-life by default.
   */
  halfLifeAmount?: Maybe<Scalars["Int"]>;
  /**
   * Units of time in the half-life, using the amount specified in the halfLifeAmount parameter. Defaults to
   * "Months", and halfLifeAmount defaults to 6, so there is a 6-month half-life by default.
   */
  halfLifeUnits?: Maybe<HalfLifeUnits>;
  /**
   * Amount of time in the lookback period, using units specified in the lookbackPeriodUnits parameter.
   * Defaults to 24, and lookbackPeriodUnits defaults to "Months", so the default lookback period is 24
   * months.
   */
  lookbackPeriodAmount?: Maybe<Scalars["Int"]>;
  /**
   * Units of time in the lookback period, using the amount specified in the lookbackPeriodAmount parameter.
   * Defaults to "Months", and lookbackPeriodAmount defaults to 24, so the default lookback period is 24
   * months.
   */
  lookbackPeriodUnits?: Maybe<LookbackPeriodUnits>;
  portfolio: PortfolioInput;
  /** If true, ignores cached covariance terms. Defaults to false. */
  refresh?: Maybe<Scalars["Boolean"]>;
  /** Percent confidence level to use for Value at Risk. Defaults to 95 percent. */
  varConfidence?: Maybe<Scalars["Float"]>;
  /** Methodology to use for Value at Risk model. Defaults to Historical. */
  varType?: Maybe<VarType>;
  /** Units for Value at Risk. Defaults to Dollars. */
  varUnits?: Maybe<VarUnits>;
};
export enum VarType {
  Historical = "HISTORICAL",
  Analytical = "ANALYTICAL"
}
export enum VarUnits {
  Dollars = "DOLLARS",
  Percent = "PERCENT"
}
export interface GetPortfolioCovariancesResponse {
  __typename?: "GetPortfolioCovariancesResponse";
  /**
   * The actual asset covariance matrix between portfolios where each row(i), column(j) represents the covariance
   * between portfolio i and portfolio j. The indices of the covariance matrix are aligned with that of the
   * portfolioIds property in the response.
   */
  matrix: Array<Maybe<Array<Maybe<Scalars["Float"]>>>>;
  portfolioIds: Array<Maybe<Scalars["String"]>>;
}
export type GetPortfolioCovariancesRequestInput = {
  /** Analysis date that marks the last day of observations. Defaults to the previous business day. */
  date?: Maybe<Scalars["String"]>;
  /** Frequency of observations */
  frequency?: Maybe<Frequency>;
  /**
   * Amount of time in the half-life, using the amount specified in the halfLifeAmount parameter. Defaults to
   * "Months", and halfLifeAmount defaults to 6, so there is a 6-month half-life by default.
   */
  halfLifeAmount?: Maybe<Scalars["Int"]>;
  /**
   * Units of time in the half-life, using the amount specified in the halfLifeAmount parameter. Defaults to
   * "Months", and halfLifeAmount defaults to 6, so there is a 6-month half-life by default.
   */
  halfLifeUnits?: Maybe<HalfLifeUnits>;
  /**
   * Amount of time in the lookback period, using units specified in the lookbackPeriodUnits parameter.
   * Defaults to 24, and lookbackPeriodUnits defaults to "Months", so the default lookback period is 24
   * months.
   */
  lookbackPeriodAmount?: Maybe<Scalars["Int"]>;
  /**
   * Units of time in the lookback period, using the amount specified in the lookbackPeriodAmount parameter.
   * Defaults to "Months", and lookbackPeriodAmount defaults to 24, so the default lookback period is 24
   * months.
   */
  lookbackPeriodUnits?: Maybe<LookbackPeriodUnits>;
  portfolios: Array<Maybe<PortfolioInput>>;
};
export interface SearchPortfolioDeliveryInstructionsResponse {
  __typename?: "SearchPortfolioDeliveryInstructionsResponse";
  deliveryInstructions?: Maybe<Array<Maybe<PortfolioDeliveryInstruction>>>;
}
export type SearchPorfolioDeliveryInstructionsRequestInput = {
  cashOnly?: Maybe<Scalars["Boolean"]>;
  createdAt?: Maybe<Scalars["String"]>;
  instructions?: Maybe<ExternalEntityInput>;
  investorId?: Maybe<Scalars["String"]>;
  metadata?: Maybe<Scalars["JSON"]>;
  updatedAt?: Maybe<Scalars["String"]>;
};
export interface GetPortfolioStressScenariosResponse {
  __typename?: "GetPortfolioStressScenariosResponse";
  equitiesDownTenPercent?: Maybe<StressScenarioReturn>;
  housingCrisis?: Maybe<StressScenarioReturn>;
  ratesUpOnePercent?: Maybe<StressScenarioReturn>;
  taperTantrum?: Maybe<StressScenarioReturn>;
}
export interface StressScenarioReturn {
  __typename?: "StressScenarioReturn";
  /** Returns in percent */
  returns?: Maybe<Scalars["Float"]>;
}
export type GetPortfolioStressScenariosRequestInput = {
  portfolio: PortfolioInput;
};
/** Project cash flows for an asset by passing the whole asset object */
export type ProjectCashFlowsRequestInput = {
  asset: AssetInput;
};
export interface AcceptProposalResponse {
  __typename?: "AcceptProposalResponse";
  /** Investment goal for a portfolio - either income, yield, or risk is required */
  goal: Goal;
  /** A portfolio */
  portfolio: Portfolio2;
}
export type AcceptProposalRequestInput = {
  /** This is required if accepting a new proposal. */
  new?: Maybe<AcceptNewProposalInput>;
  /** This is required if accepting a rebalancing proposal. */
  rebalance?: Maybe<AcceptRebalanceProposalInput>;
};
/** This is required if accepting a new proposal. */
export type AcceptNewProposalInput = {
  portfolioName: Scalars["String"];
};
/** This is required if accepting a rebalancing proposal. */
export type AcceptRebalanceProposalInput = {
  /** The id of the portfolio you wish to rebalance */
  portfolioId: Scalars["String"];
};
export interface NewProposalResponse {
  __typename?: "NewProposalResponse";
  proposal: Proposal;
}
export type NewProposalRequestInput = {
  /** Portfolio constraints */
  constraints?: Maybe<ConstraintsInput>;
  /** Investment goal for a portfolio - either income, yield, or risk is required */
  goal: GoalInput;
  /** The initial amount of money to invest into the portfolio */
  investmentAmount: Scalars["Float"];
  /** Tax bracket information. Reserved for future use. */
  taxBrackets?: Maybe<TaxBracketsInput>;
  /** Array of assetId. If provided, this will be used in place of the default whitelist. */
  whitelist?: Maybe<Array<Maybe<Scalars["String"]>>>;
};
/** Portfolio constraints */
export type ConstraintsInput = {
  /** Maximum weight of each position, expressed as a portion of the portfolio, where 100% is 1 */
  maximumWeight?: Maybe<Scalars["Float"]>;
  /** Minimum weight of each position, expressed as a portion of the portfolio, where 100% is 1 */
  minimumWeight?: Maybe<Scalars["Float"]>;
};
/** Investment goal for a portfolio - either income, yield, or risk is required */
export type GoalInput = {
  /** The target amount of income in dollar terms that the portfolio is trying to earn */
  income?: Maybe<Scalars["Float"]>;
  /** The annualized risk or volatility in percentage terms for the portfolio */
  risk?: Maybe<Scalars["Float"]>;
  /** The annualized target yield in percentage terms that the portfolio is trying to earn */
  yield?: Maybe<Scalars["Float"]>;
};
/** Tax bracket information. Reserved for future use. */
export type TaxBracketsInput = {
  /** Federal tax rate in percent e.g. 35% */
  federalTaxRate?: Maybe<Scalars["Float"]>;
  /** State tax rate in percent e.g. 5% */
  stateTaxRate?: Maybe<Scalars["Float"]>;
};
export interface RebalanceProposalResponse {
  __typename?: "RebalanceProposalResponse";
  proposal: Proposal;
}
export type RebalanceProposalRequestInput = {
  /** Portfolio constraints */
  constraints?: Maybe<ConstraintsInput>;
  /** Investment goal for a portfolio - either income, yield, or risk is required */
  goal?: Maybe<GoalInput>;
  /** Tax bracket information. Reserved for future use. */
  taxBrackets?: Maybe<TaxBracketsInput>;
  /** The amount of money you wish to deposit/withdraw from the portfolio */
  updateInvestmentAmount?: Maybe<UpdateInvestmentAmountInput>;
  /** Array of assetId. If provided, this will be used in place of the default whitelist. */
  whitelist?: Maybe<Array<Maybe<Scalars["String"]>>>;
};
/** The amount of money you wish to deposit/withdraw from the portfolio */
export type UpdateInvestmentAmountInput = {
  action: Action3;
  amount: Scalars["Float"];
};
export enum Action3 {
  Add = "ADD",
  Reduce = "REDUCE"
}
export interface CreateSubscriptionResponse {
  __typename?: "CreateSubscriptionResponse";
  subscription: Subscription2;
}
export type CreateSubscriptionRequestInput = {
  /** The type of events to subscribe to */
  eventType: Scalars["String"];
  /** Name of the topic (usually the service name emitting the events) */
  publisherName: Scalars["String"];
  /** The subscriber's service name, usually the name of the service consuming the events */
  subscriberName: Scalars["String"];
};
export interface CreateTopicResponse {
  __typename?: "CreateTopicResponse";
  topic: Topic;
}
export type CreateTopicRequestInput = {
  eventType: Scalars["String"];
  publisherName: Scalars["String"];
};
export interface CreateOrUpdateRoleBindingResponse {
  __typename?: "CreateOrUpdateRoleBindingResponse";
  message: Scalars["String"];
  timestamp: Scalars["String"];
}
export type CreateOrUpdateRoleBindingRequestInput = {
  roleBinding: RoleBindingInput;
};
export type RoleBindingInput = {
  id: Scalars["String"];
  principalId: Scalars["String"];
  principalType?: Maybe<Scalars["String"]>;
  roleId: Scalars["String"];
};
export interface RemoveRolePoliciesResponse {
  __typename?: "RemoveRolePoliciesResponse";
  role: Role;
}
export type RemoveRolePoliciesRequestInput = {
  policies: Array<Maybe<PolicyInput>>;
};
export type PolicyInput = {
  actions: Array<Maybe<Scalars["String"]>>;
  resource: Scalars["String"];
};
export interface CreateOrUpdateRoleResponse {
  __typename?: "CreateOrUpdateRoleResponse";
  message: Scalars["String"];
  timestamp: Scalars["String"];
}
export type CreateOrUpdateRoleRequestInput = {
  role: RoleInput;
};
export type RoleInput = {
  /** Unique id for the role */
  id: Scalars["String"];
  /** Policies associated with the role */
  policies: Array<Maybe<PolicyInput>>;
};
export interface CreateSearchStackResponse {
  __typename?: "CreateSearchStackResponse";
  searchStack: SearchStack;
}
export interface UploadSketchDocumentResponse {
  __typename?: "UploadSketchDocumentResponse";
  document: SketchDocument;
}
export interface SketchDocument {
  __typename?: "SketchDocument";
  documentType?: Maybe<DocumentType>;
  snapId: Scalars["String"];
  uploadDateTime?: Maybe<Scalars["String"]>;
  uploadUserName?: Maybe<Scalars["String"]>;
}
export type UploadSketchDocumentRequestInput = {
  file: Scalars["String"];
  fileType: FileType;
  metadata: DocumentMetadataInput;
};
export type DocumentMetadataInput = {
  account: Scalars["String"];
  correspondent?: Maybe<Scalars["String"]>;
  documentType: DocumentTypeEnum;
  tag: Tag;
};
/** The respones to a request to generate asset suggestions */
export interface GenerateAssetSuggestionsResponse {
  __typename?: "GenerateAssetSuggestionsResponse";
  /** A list of BondHouse unique asset IDs */
  assetIds: Array<Maybe<Scalars["String"]>>;
}
/** A request to generate asset suggestions for a portfolio */
export type GenerateAssetSuggestionsRequestInput = {
  /**
   * Number of suggestions desired. Defaults to the number of suggestions required to represent all asset
   * classes and sectors in the portfolio. Subject to the maximum number of unique assets across the portfolio
   * and suggestions 50
   */
  count?: Maybe<Scalars["Int"]>;
  portfolio: PortfolioInput;
};
export interface CreateOrReplaceTemporaryPortfolioResponse {
  __typename?: "CreateOrReplaceTemporaryPortfolioResponse";
  created: Scalars["Boolean"];
  updated: Scalars["Boolean"];
}
export type CreateOrReplaceTemporaryPortfolioRequestInput = {
  portfolio: Portfolio3Input;
};
export interface VerifyEmailResponse {
  __typename?: "VerifyEmailResponse";
  verified: Scalars["Boolean"];
}
export interface CreateEmailVerificationTicketResponse {
  __typename?: "CreateEmailVerificationTicketResponse";
  success: Scalars["Boolean"];
}
export interface LoginResponse {
  __typename?: "LoginResponse";
  success: Scalars["Boolean"];
}
export type LoginRequestInput = {
  email: Scalars["String"];
  /**
   * When a first attempt to call the Login operation fails with error mfaRequired the error
   * response contains an mfaToken
   *
   * Upon collecting the one time password from the end user, this mfaToken must be passed back to IAM
   * on a second attempt calling the Login operation. This mfaToken allows IAM to validate
   * and associate the OTP to the specific login attempt
   */
  mfaToken?: Maybe<Scalars["String"]>;
  otp?: Maybe<Scalars["String"]>;
  password: Scalars["String"];
  /**
   * If set to true, the access token is sent via redirect to localhost - where the bh program is listening
   * and can then store the access token on the users' filesystem
   */
  sdk?: Maybe<Scalars["Boolean"]>;
};
export interface ResetPasswordResponse {
  __typename?: "ResetPasswordResponse";
  success: Scalars["Boolean"];
}
export type ResetPasswordRequestInput = {
  /** The new password */
  password: Scalars["String"];
};
/**
 * The generate ticketId is sent to the user's email, and that is the only place where it is visible
 * to the end user
 */
export interface CreatePasswordResetTicketResponse {
  __typename?: "CreatePasswordResetTicketResponse";
  success: Scalars["Boolean"];
}
export interface PostExecutionsResponse {
  __typename?: "PostExecutionsResponse";
  tradePostings: Array<Maybe<TradePosting>>;
}
export type PostExecutionsRequestInput = {
  executions: Array<Maybe<ExecutionInput>>;
};
export type ExecutionInput = {
  /** This is the Apex AccountNumber */
  accountNumber: Scalars["String"];
  direction: TradeDirection;
  /** This is the OMS orderId */
  orderId: Scalars["String"];
  price: Scalars["Float"];
  quantity: Scalars["Float"];
  ticker: Scalars["String"];
  /** a UUID that is required in the request for idempotency */
  tradePostingId: Scalars["String"];
  tradedAt: Scalars["String"];
};
export interface SearchTradeResponse {
  __typename?: "SearchTradeResponse";
  trades?: Maybe<Array<Maybe<LedgerEntry>>>;
}
export type SearchTradeRequestInput = {
  assetIds?: Maybe<Array<Maybe<Scalars["String"]>>>;
  counterPartyIds?: Maybe<Array<Maybe<Scalars["String"]>>>;
  createdAt?: Maybe<DateRangeInput>;
  ledgerIds?: Maybe<Array<Maybe<Scalars["String"]>>>;
  orderIds?: Maybe<Array<Maybe<Scalars["String"]>>>;
  portfolioIds?: Maybe<Array<Maybe<Scalars["String"]>>>;
  positionsIds?: Maybe<Array<Maybe<Scalars["String"]>>>;
  statuses?: Maybe<Array<Maybe<Scalars["String"]>>>;
  tradeIds?: Maybe<Array<Maybe<Scalars["String"]>>>;
  updatedAt?: Maybe<DateRangeInput>;
};
export interface CreateOrReplaceCartItemResponse {
  __typename?: "CreateOrReplaceCartItemResponse";
  ok: Scalars["Boolean"];
}
export type CreateOrReplaceCartItemRequestInput = {
  /** A single asset in the cart */
  cartItem: CartItemInput;
};
/** A single asset in the cart */
export type CartItemInput = {
  assetId: Scalars["String"];
  quantity: Scalars["Float"];
};
export interface ResetPasswordDirectlyResponse {
  __typename?: "ResetPasswordDirectlyResponse";
  success: Scalars["Boolean"];
}
export type ResetPasswordDirectlyRequestInput = {
  currentPassword: Scalars["String"];
  newPassword: Scalars["String"];
};
export interface CreateOrReplaceWatchListItemResponse {
  __typename?: "CreateOrReplaceWatchListItemResponse";
  ok: Scalars["Boolean"];
}
export interface CreateUserResponse {
  __typename?: "CreateUserResponse";
  user: User;
}
export type CreateUserRequestInput = {
  email: Scalars["String"];
  first: Scalars["String"];
  institutionId?: Maybe<Scalars["String"]>;
  last: Scalars["String"];
  metadata?: Maybe<Scalars["JSON"]>;
  /** Upon calling this API a user is created in Auth0 and the password is managed there */
  password?: Maybe<Scalars["String"]>;
  terms: Scalars["Boolean"];
  userId: Scalars["String"];
  userType: UserType;
};
export interface BlockExpiredTrialUsersResponse {
  __typename?: "BlockExpiredTrialUsersResponse";
  users: Array<Maybe<User>>;
}
export type BlockExpiredTrialUsersRequestInput = {
  block: Scalars["Boolean"];
};
export interface InviteUserResponse {
  __typename?: "InviteUserResponse";
  invitedUser: InvitedUser;
}
export type InviteUserRequestInput = {
  email: Scalars["String"];
  firstName: Scalars["String"];
  institutionId?: Maybe<Scalars["String"]>;
  invitedBy: Scalars["String"];
  lastName: Scalars["String"];
  userType: UserType;
};
export interface InvestorAccountClose {
  __typename?: "InvestorAccountClose";
  apexAccount: ApexAccount2;
}
export interface InvestorAccountReopen {
  __typename?: "InvestorAccountReopen";
  apexAccount: ApexAccount2;
}
export interface CloseApexAccountResponse {
  __typename?: "CloseApexAccountResponse";
  apexAccount: ApexAccount;
}
export interface ReopenApexAccountResponse {
  __typename?: "ReopenApexAccountResponse";
  apexAccount: ApexAccount;
}
export interface UpdateIdentityInvestigationResponse {
  __typename?: "UpdateIdentityInvestigationResponse";
  identityState: IdentityState;
}
export interface IdentityState {
  __typename?: "IdentityState";
  archived: Scalars["Boolean"];
  history: History2;
  id: Scalars["String"];
  status: Scalars["String"];
}
export interface History2 {
  __typename?: "History2";
  comment?: Maybe<Scalars["String"]>;
  stateChange?: Maybe<Scalars["String"]>;
  timestamp?: Maybe<Scalars["String"]>;
  user?: Maybe<Scalars["String"]>;
}
export enum Action4 {
  Appealed = "APPEALED",
  Accepted = "ACCEPTED",
  Rejected = "REJECTED"
}
export type UpdateIdentityInvestigationRequestInput = {
  cip: Cip2Input;
  text: Scalars["String"];
};
export type Cip2Input = {
  documentation?: Maybe<Array<Maybe<DocumentTypeEnum>>>;
  snapIDs?: Maybe<Array<Maybe<Scalars["String"]>>>;
  vendors?: Maybe<Array<Maybe<Scalars["String"]>>>;
};
export interface UpdateSketchResponse {
  __typename?: "UpdateSketchResponse";
  sketchState: SketchState;
}
export interface SketchState {
  __typename?: "SketchState";
  archived: Scalars["Boolean"];
  history: Array<Maybe<History2>>;
  sketchId: Scalars["String"];
  status: Scalars["String"];
}
export type UpdateSketchRequestInput = {
  cip: CipInput;
  text: Scalars["String"];
};
export type CipInput = {
  documentation?: Maybe<Array<Maybe<DocumentTypeEnum>>>;
  snapIDs?: Maybe<Array<Maybe<Scalars["String"]>>>;
  vendors?: Maybe<Array<Maybe<Scalars["String"]>>>;
};
export type DeleteAccountAchRelationshipMutationVariables = Exact<{
  accountId: Scalars["String"];
  id: Scalars["String"];
}>;
export type DeleteAccountAchRelationshipMutation = {
  __typename?: "Mutation";
} & {
  deleteAccountAchRelationship?: Maybe<
    {
      __typename?: "RemoveApexACHRelationshipResponse";
    } & {
      apexAchRelationship: {
        __typename?: "ApexACHRelationship";
      } & Pick<
        ApexAchRelationship,
        | "accountId"
        | "apexRelationshipId"
        | "createdAt"
        | "id"
        | "linkedBankAccountId"
        | "metadata"
        | "status"
        | "updatedAt"
      >;
    }
  >;
};
export type DeleteAccountTransferMutationVariables = Exact<{
  accountId: Scalars["String"];
  id: Scalars["String"];
}>;
export type DeleteAccountTransferMutation = {
  __typename?: "Mutation";
} & {
  deleteAccountTransfer?: Maybe<
    {
      __typename?: "CancelApexTransferResponse2";
    } & {
      transfer: {
        __typename?: "ApexTransfer";
      } & Pick<
        ApexTransfer,
        | "accountId"
        | "achRelationshipId"
        | "amount"
        | "apexTransferId"
        | "createdAt"
        | "direction"
        | "id"
        | "metadata"
        | "status"
        | "transferId"
        | "transferMethod"
        | "updatedAt"
      >;
    }
  >;
};
export type DeleteAccountsAchRelationshipsMutationVariables = Exact<{
  accountNumber: Scalars["String"];
}>;
export type DeleteAccountsAchRelationshipsMutation = {
  __typename?: "Mutation";
} & {
  deleteAccountsAchRelationships?: Maybe<
    {
      __typename?: "RemoveAchRelationshipResponse";
    } & {
      achRelationship: {
        __typename?: "AchRelationship";
      } & Pick<
        AchRelationship,
        | "accountNumber"
        | "achRelationshipId"
        | "createdAt"
        | "linkedBankAccountId"
        | "status"
        | "updatedAt"
      >;
    }
  >;
};
export type DeleteAccountsTransfersMutationVariables = Exact<{
  accountNumber: Scalars["String"];
  transferNumber: Scalars["String"];
}>;
export type DeleteAccountsTransfersMutation = {
  __typename?: "Mutation";
} & {
  deleteAccountsTransfers?: Maybe<
    {
      __typename?: "CancelApexTransferResponse";
    } & {
      transfer: {
        __typename?: "Transfer";
      } & Pick<
        Transfer,
        | "accountNumber"
        | "amount"
        | "createdAt"
        | "direction"
        | "linkedBankAccountId"
        | "status"
        | "transferId"
        | "transferMethod"
        | "transferNumber"
        | "updatedAt"
      >;
    }
  >;
};
export type DeleteExternalPortfolioMutationVariables = Exact<{
  id: Scalars["String"];
}>;
export type DeleteExternalPortfolioMutation = {
  __typename?: "Mutation";
} & {
  deleteExternalPortfolio?: Maybe<
    {
      __typename?: "DeleteExternalPortfolioResponse";
    } & Pick<DeleteExternalPortfolioResponse, "deleted">
  >;
};
export type DeleteInvestorMutationVariables = Exact<{
  investorId: Scalars["String"];
}>;
export type DeleteInvestorMutation = {
  __typename?: "Mutation";
} & {
  deleteInvestor?: Maybe<
    {
      __typename?: "RemoveInvestorResponse";
    } & {
      investor: {
        __typename?: "RemoveInvestor";
      } & Pick<
        RemoveInvestor,
        "createdAt" | "id" | "investorType" | "status" | "updatedAt"
      >;
    }
  >;
};
export type DeleteInvestorLinkedBankAccountMutationVariables = Exact<{
  investorId: Scalars["String"];
  linkedBankAccountId: Scalars["String"];
}>;
export type DeleteInvestorLinkedBankAccountMutation = {
  __typename?: "Mutation";
} & {
  deleteInvestorLinkedBankAccount?: Maybe<
    {
      __typename?: "RemoveLinkedBankAccountResponse";
    } & {
      linkedBankAccount: {
        __typename?: "RemoveLinkedBankAccount";
      } & Pick<RemoveLinkedBankAccount, "id" | "status">;
    }
  >;
};
export type DeleteInvestorTransferMutationVariables = Exact<{
  investorId: Scalars["String"];
  transferId: Scalars["String"];
}>;
export type DeleteInvestorTransferMutation = {
  __typename?: "Mutation";
} & {
  deleteInvestorTransfer?: Maybe<
    {
      __typename?: "CancelTransferResponse";
    } & {
      transfer: {
        __typename?: "Transfer3";
      } & Pick<
        Transfer3,
        | "amount"
        | "createdAt"
        | "currency"
        | "direction"
        | "id"
        | "investorId"
        | "ledgerId"
        | "linkedBankAccountId"
        | "metadata"
        | "portfolioId"
        | "status"
        | "transferMethod"
        | "updatedAt"
      > & {
          externalEntity?: Maybe<
            {
              __typename?: "ExternalEntity";
            } & Pick<ExternalEntity, "externalEntityId" | "externalEntityType">
          >;
        };
    }
  >;
};
export type DeletePortfolioPreferencesMutationVariables = Exact<{
  portfolioId: Scalars["String"];
}>;
export type DeletePortfolioPreferencesMutation = {
  __typename?: "Mutation";
} & {
  deletePortfolioPreferences?: Maybe<
    {
      __typename?: "DeletePreferencesResponse";
    } & Pick<DeletePreferencesResponse, "deleted">
  >;
};
export type DeletePubsubStacksSubscriptionMutationVariables = Exact<{
  id: Scalars["String"];
}>;
export type DeletePubsubStacksSubscriptionMutation = {
  __typename?: "Mutation";
} & {
  deletePubsubStacksSubscription?: Maybe<
    {
      __typename?: "DeleteSubscriptionResponse";
    } & Pick<DeleteSubscriptionResponse, "deleted">
  >;
};
export type DeletePubsubStacksTopicMutationVariables = Exact<{
  id: Scalars["String"];
}>;
export type DeletePubsubStacksTopicMutation = {
  __typename?: "Mutation";
} & {
  deletePubsubStacksTopic?: Maybe<
    {
      __typename?: "DeleteTopicResponse";
    } & Pick<DeleteTopicResponse, "deleted">
  >;
};
export type DeleteRoleMutationVariables = Exact<{
  id: Scalars["String"];
}>;
export type DeleteRoleMutation = {
  __typename?: "Mutation";
} & {
  deleteRole?: Maybe<
    {
      __typename?: "DeleteRoleResponse";
    } & Pick<DeleteRoleResponse, "message" | "timestamp">
  >;
};
export type DeleteRoleBindingMutationVariables = Exact<{
  id: Scalars["String"];
}>;
export type DeleteRoleBindingMutation = {
  __typename?: "Mutation";
} & {
  deleteRoleBinding?: Maybe<
    {
      __typename?: "DeleteRoleBindingResponse";
    } & Pick<DeleteRoleBindingResponse, "message" | "timestamp">
  >;
};
export type DeleteSearchStackMutationVariables = Exact<{
  id: Scalars["String"];
}>;
export type DeleteSearchStackMutation = {
  __typename?: "Mutation";
} & {
  deleteSearchStack?: Maybe<
    {
      __typename?: "DeleteSearchStackResponse";
    } & Pick<DeleteSearchStackResponse, "deleted">
  >;
};
export type DeleteTemporaryPortfolioMutationVariables = Exact<{
  id: Scalars["String"];
}>;
export type DeleteTemporaryPortfolioMutation = {
  __typename?: "Mutation";
} & {
  deleteTemporaryPortfolio?: Maybe<
    {
      __typename?: "DeleteTemporaryPortfolioResponse";
    } & Pick<DeleteTemporaryPortfolioResponse, "deleted">
  >;
};
export type DeleteUserMutationVariables = Exact<{
  id: Scalars["String"];
}>;
export type DeleteUserMutation = {
  __typename?: "Mutation";
} & {
  deleteUser?: Maybe<
    {
      __typename?: "DeleteUserResponse";
    } & {
      user?: Maybe<
        {
          __typename?: "DeletedUser";
        } & Pick<DeletedUser, "id" | "status" | "updatedAt">
      >;
    }
  >;
};
export type DeleteUserCartMutationVariables = Exact<{
  userId: Scalars["String"];
}>;
export type DeleteUserCartMutation = {
  __typename?: "Mutation";
} & {
  deleteUserCart?: Maybe<
    {
      __typename?: "ClearCartResponse";
    } & Pick<ClearCartResponse, "cleared">
  >;
};
export type DeleteUserCartItemMutationVariables = Exact<{
  assetId: Scalars["String"];
  userId: Scalars["String"];
}>;
export type DeleteUserCartItemMutation = {
  __typename?: "Mutation";
} & {
  deleteUserCartItem?: Maybe<
    {
      __typename?: "DeleteCartItemResponse";
    } & Pick<DeleteCartItemResponse, "deleted">
  >;
};
export type DeleteUserWatchlistMutationVariables = Exact<{
  userId: Scalars["String"];
}>;
export type DeleteUserWatchlistMutation = {
  __typename?: "Mutation";
} & {
  deleteUserWatchlist?: Maybe<
    {
      __typename?: "ClearWatchListResponse";
    } & Pick<ClearWatchListResponse, "cleared">
  >;
};
export type DeleteUserWatchlistItemMutationVariables = Exact<{
  assetId: Scalars["String"];
  userId: Scalars["String"];
}>;
export type DeleteUserWatchlistItemMutation = {
  __typename?: "Mutation";
} & {
  deleteUserWatchlistItem?: Maybe<
    {
      __typename?: "DeleteWatchListItemResponse";
    } & Pick<DeleteWatchListItemResponse, "deleted">
  >;
};
export type PatchAccountMutationVariables = Exact<{
  accountInput?: Maybe<AccountInput>;
  id: Scalars["String"];
}>;
export type PatchAccountMutation = {
  __typename?: "Mutation";
} & {
  patchAccount?: Maybe<
    {
      __typename?: "UpdateApexAccountResponse2";
    } & {
      apexAccount: {
        __typename?: "ApexAccount2";
      } & Pick<
        ApexAccount2,
        | "apexAccountNumber"
        | "apexRequestId"
        | "createdAt"
        | "id"
        | "investorId"
        | "metadata"
        | "status"
        | "updatedAt"
      >;
    }
  >;
};
export type PatchAccountFormsCorporateAgreementFormMutationVariables = Exact<{
  formId: Scalars["String"];
  updateCorporateAgreementFormRequestInput?: Maybe<
    UpdateCorporateAgreementFormRequestInput
  >;
}>;
export type PatchAccountFormsCorporateAgreementFormMutation = {
  __typename?: "Mutation";
} & {
  patchAccountFormsCorporateAgreementForm?: Maybe<
    {
      __typename?: "UpdateCorporateAgreementFormResponse";
    } & {
      corporateAgreementForm: {
        __typename?: "CorporateAgreementForm";
      } & Pick<
        CorporateAgreementForm,
        | "articlesOfIncorporationSnapId"
        | "authorizedOfficerName"
        | "authorizedOfficerTitle"
        | "corporationName"
        | "createdAt"
        | "formId"
        | "isAuthorizedOfficerESigned"
        | "isSecretaryESigned"
        | "secretaryName"
        | "stateOfIncorporation"
        | "updatedAt"
      >;
    }
  >;
};
export type PatchAccountFormsEntityAccountFormMutationVariables = Exact<{
  formId: Scalars["String"];
  updateEntityAccountFormRequestInput?: Maybe<
    UpdateEntityAccountFormRequestInput
  >;
}>;
export type PatchAccountFormsEntityAccountFormMutation = {
  __typename?: "Mutation";
} & {
  patchAccountFormsEntityAccountForm?: Maybe<
    {
      __typename?: "UpdateEntityAccountFormResponse";
    } & {
      entityAccountForm: {
        __typename?: "EntityAccountForm";
      } & Pick<
        EntityAccountForm,
        | "accountNature"
        | "catAccountholderType"
        | "createdAt"
        | "customerType"
        | "formId"
        | "isApplicantESigned"
        | "issuerDirectCommunicationCode"
        | "legalEntityIdentifier"
        | "updatedAt"
      > & {
          accountInformation?: Maybe<
            {
              __typename?: "EntityAccountInformation";
            } & Pick<
              EntityAccountInformation,
              | "businessTelephoneNumber"
              | "entityName"
              | "entityTaxId"
              | "isUSEntity"
            > & {
                accountTradingInformation: {
                  __typename?: "EntityAccountTradingInformation";
                } & Pick<
                  EntityAccountTradingInformation,
                  | "companyTickerSymbols"
                  | "isAffiliatedExchangeOrFINRA"
                  | "isControlPerson"
                  | "memberFirmNames"
                >;
                businessAddress: {
                  __typename?: "PhysicalAddress";
                } & Pick<
                  PhysicalAddress,
                  "city" | "country" | "postalCode" | "state" | "streetAddress"
                >;
              }
          >;
          additionalAccountInformation?: Maybe<
            {
              __typename?: "EntityAdditionalAccountInformation";
            } & Pick<
              EntityAdditionalAccountInformation,
              | "isForeignBank"
              | "isMaintainedForForeignFinancialInstitution"
              | "isPoliticallyExposed"
            > & {
                politicalExposureDetail?: Maybe<
                  {
                    __typename?: "EntityAccountPoliticalExposureDetail";
                  } & Pick<
                    EntityAccountPoliticalExposureDetail,
                    "immediateFamily" | "politicalOrganization"
                  >
                >;
              }
          >;
          authorizedSigner?: Maybe<
            {
              __typename?: "EntityAuthorizedSigner";
            } & Pick<
              EntityAuthorizedSigner,
              | "citizenshipCountry"
              | "dateOfBirth"
              | "emailAddress"
              | "isUsCitizen"
              | "taxId"
              | "title"
            > & {
                name: {
                  __typename?: "PrimaryName";
                } & Pick<PrimaryName, "familyName" | "givenName" | "legalName">;
              }
          >;
          beneficialOwners?: Maybe<
            Array<
              Maybe<
                {
                  __typename?: "OwnerOrOfficer";
                } & Pick<
                  OwnerOrOfficer,
                  | "dateOfBirth"
                  | "identificationNumber"
                  | "socialSecurityNumber"
                > & {
                    address: {
                      __typename?: "PhysicalAddress";
                    } & Pick<
                      PhysicalAddress,
                      | "city"
                      | "country"
                      | "postalCode"
                      | "state"
                      | "streetAddress"
                    >;
                    name: {
                      __typename?: "PrimaryName";
                    } & Pick<
                      PrimaryName,
                      "familyName" | "givenName" | "legalName"
                    >;
                  }
              >
            >
          >;
          entityOfficers?: Maybe<
            Array<
              Maybe<
                {
                  __typename?: "OwnerOrOfficer";
                } & Pick<
                  OwnerOrOfficer,
                  | "dateOfBirth"
                  | "identificationNumber"
                  | "socialSecurityNumber"
                > & {
                    address: {
                      __typename?: "PhysicalAddress";
                    } & Pick<
                      PhysicalAddress,
                      | "city"
                      | "country"
                      | "postalCode"
                      | "state"
                      | "streetAddress"
                    >;
                    name: {
                      __typename?: "PrimaryName";
                    } & Pick<
                      PrimaryName,
                      "familyName" | "givenName" | "legalName"
                    >;
                  }
              >
            >
          >;
          exemptLegalCustomer?: Maybe<
            {
              __typename?: "EntityAccountExemptLegalCustomer";
            } & Pick<
              EntityAccountExemptLegalCustomer,
              "exemption" | "isExemptLegalCustomer"
            >
          >;
          serviceProfile?: Maybe<
            {
              __typename?: "EntityAccountProfile";
            } & Pick<
              EntityAccountProfile,
              "dividendReinvestment" | "sweepInstructions"
            >
          >;
          suitabilityProfile?: Maybe<
            {
              __typename?: "SuitabilityProfile";
            } & Pick<SuitabilityProfile, "liquidityNeeds" | "timeHorizon">
          >;
          w9Certification?: Maybe<
            {
              __typename?: "W9Certification";
            } & Pick<W9Certification, "exemptPayeeCode" | "exemptionFromFatca">
          >;
        };
    }
  >;
};
export type PatchAccountFormsEntityDueDiligenceFormMutationVariables = Exact<{
  formId: Scalars["String"];
  updateEntityDueDiligenceFormRequestInput?: Maybe<
    UpdateEntityDueDiligenceFormRequestInput
  >;
}>;
export type PatchAccountFormsEntityDueDiligenceFormMutation = {
  __typename?: "Mutation";
} & {
  patchAccountFormsEntityDueDiligenceForm?: Maybe<
    {
      __typename?: "UpdateEntityDueDiligenceFormResponse";
    } & {
      entityDueDiligenceForm: {
        __typename?: "EntityDueDiligenceForm";
      } & Pick<
        EntityDueDiligenceForm,
        | "assessedRiskRating"
        | "createdAt"
        | "entityOrAssociatesHaveNegativeNews"
        | "entityOrAssociatesNegativeNewsInfo"
        | "formId"
        | "principalApproverName"
        | "registeredRepresentativeApproverName"
        | "updatedAt"
      > & {
          accountActivity?: Maybe<
            {
              __typename?: "DueDiligenceAccountActivity";
            } & Pick<
              DueDiligenceAccountActivity,
              | "expectedWithdrawalFrequency"
              | "initialDepositAmount"
              | "initialDepositSource"
              | "lowPricedSecuritiesPercentage"
              | "primaryAccountActivity"
              | "willTransactForeignBonds"
              | "willTransactLowPricedSecurities"
            >
          >;
          accountInformation?: Maybe<
            {
              __typename?: "DueDiligenceAccountInformation";
            } & Pick<
              DueDiligenceAccountInformation,
              | "accountName"
              | "businessLocations"
              | "countryOfIncorporation"
              | "hasAccounts"
            > & {
                relatedAccounts?: Maybe<
                  Array<
                    Maybe<
                      {
                        __typename?: "DueDiligenceRelatedAccounts";
                      } & Pick<
                        DueDiligenceRelatedAccounts,
                        "accountNumber" | "entityName"
                      >
                    >
                  >
                >;
              }
          >;
          additionalAccounts?: Maybe<
            {
              __typename?: "DueDiligenceAdditionalAccounts";
            } & Pick<
              DueDiligenceAdditionalAccounts,
              | "confirmEntityDoesNotIssueBearerShares"
              | "institutionNames"
              | "primaryOngoingFundingSource"
              | "primaryOngoingFundingSourceClarification"
              | "scopeOfBusiness"
              | "scopeOfBusinessClarification"
            >
          >;
          politicallyExposedPersons?: Maybe<
            {
              __typename?: "DueDiligencePoliticallyExposedPersons";
            } & Pick<
              DueDiligencePoliticallyExposedPersons,
              "isPoliticallyExposed"
            > & {
                politicalOfficials?: Maybe<
                  Array<
                    Maybe<
                      {
                        __typename?: "DueDiligencePoliticalOfficials";
                      } & Pick<
                        DueDiligencePoliticalOfficials,
                        | "immediateFamily"
                        | "legalName"
                        | "politicalOrganization"
                        | "politicalTitle"
                        | "role"
                      >
                    >
                  >
                >;
              }
          >;
        };
    }
  >;
};
export type PatchAccountFormsIndividualAccountFormMutationVariables = Exact<{
  formId: Scalars["String"];
  updateIndividualAccountFormRequestInput?: Maybe<
    UpdateIndividualAccountFormRequestInput
  >;
}>;
export type PatchAccountFormsIndividualAccountFormMutation = {
  __typename?: "Mutation";
} & {
  patchAccountFormsIndividualAccountForm?: Maybe<
    {
      __typename?: "UpdateIndividualAccountFormResponse";
    } & {
      individualAccountForm: {
        __typename?: "IndividualAccountForm";
      } & Pick<
        IndividualAccountForm,
        | "catAccountholderType"
        | "createdAt"
        | "customerType"
        | "formId"
        | "trustedContact"
        | "updatedAt"
      > & {
          applicantSignature?: Maybe<
            {
              __typename?: "ApplicantSignature";
            } & Pick<ApplicantSignature, "eSigned">
          >;
          applicants?: Maybe<
            Array<
              Maybe<
                {
                  __typename?: "Applicant";
                } & {
                  contact?: Maybe<
                    {
                      __typename?: "Contact";
                    } & Pick<Contact, "emailAddresses"> & {
                        homeAddress: {
                          __typename?: "PhysicalAddress";
                        } & Pick<
                          PhysicalAddress,
                          | "city"
                          | "country"
                          | "postalCode"
                          | "state"
                          | "streetAddress"
                        >;
                        phoneNumbers: Array<
                          Maybe<
                            {
                              __typename?: "PhoneNumber";
                            } & Pick<
                              PhoneNumber,
                              "phoneNumber" | "phoneNumberType"
                            >
                          >
                        >;
                      }
                  >;
                  disclosures?: Maybe<
                    {
                      __typename?: "Disclosures";
                    } & Pick<
                      Disclosures,
                      | "affiliatedApproval"
                      | "companySymbols"
                      | "firmName"
                      | "isAffiliatedExchangeOrFINRA"
                      | "isControlPerson"
                      | "isPoliticallyExposed"
                    > & {
                        politicalExposureDetail?: Maybe<
                          {
                            __typename?: "PoliticalExposureDetail";
                          } & Pick<
                            PoliticalExposureDetail,
                            "immediateFamily" | "politicalOrganization"
                          >
                        >;
                      }
                  >;
                  employment?: Maybe<
                    {
                      __typename?: "Employment";
                    } & Pick<
                      Employment,
                      "employer" | "employmentStatus" | "positionEmployed"
                    >
                  >;
                  identity?: Maybe<
                    {
                      __typename?: "Identity";
                    } & Pick<
                      Identity,
                      | "birthCountry"
                      | "citizenshipCountry"
                      | "dateOfBirth"
                      | "permanentResident"
                      | "socialSecurityNumber"
                      | "visaExpirationDate"
                      | "visaType"
                    > & {
                        name: {
                          __typename?: "PrimaryName";
                        } & Pick<
                          PrimaryName,
                          "familyName" | "givenName" | "legalName"
                        >;
                      }
                  >;
                }
              >
            >
          >;
          investmentProfile?: Maybe<
            {
              __typename?: "InvestmentProfile";
            } & Pick<
              InvestmentProfile,
              | "annualIncomeUSD"
              | "federalTaxBracketPercent"
              | "investmentExperience"
              | "investmentObjective"
              | "liquidNetWorthUSD"
              | "riskTolerance"
              | "totalNetWorthUSD"
            >
          >;
          serviceProfile?: Maybe<
            {
              __typename?: "IndividualServiceProfile";
            } & Pick<
              IndividualServiceProfile,
              | "dividendProceeds"
              | "dividendProceedsSendFrequency"
              | "dividendReinvestment"
              | "householdingService"
              | "issuerDirectCommunication"
              | "securitySaleProceeds"
              | "sweepInstructions"
            >
          >;
          suitabilityProfile?: Maybe<
            {
              __typename?: "SuitabilityProfile";
            } & Pick<SuitabilityProfile, "liquidityNeeds" | "timeHorizon">
          >;
        };
    }
  >;
};
export type PatchAccountFormsInterestedPartyFormMutationVariables = Exact<{
  formId: Scalars["String"];
  updateInterestedPartyFormRequestInput?: Maybe<
    UpdateInterestedPartyFormRequestInput
  >;
}>;
export type PatchAccountFormsInterestedPartyFormMutation = {
  __typename?: "Mutation";
} & {
  patchAccountFormsInterestedPartyForm?: Maybe<
    {
      __typename?: "UpdateInterestedPartyFormResponse";
    } & {
      interestedPartyForm: {
        __typename?: "InterestedPartyForm";
      } & Pick<InterestedPartyForm, "createdAt" | "formId" | "updatedAt"> & {
          interestedParties: Array<
            Maybe<
              {
                __typename?: "InterestedParties2";
              } & {
                mailingAddress: {
                  __typename?: "PhysicalAddress";
                } & Pick<
                  PhysicalAddress,
                  "city" | "country" | "postalCode" | "state" | "streetAddress"
                >;
                name: {
                  __typename?: "InterestedPartyName";
                } & Pick<InterestedPartyName, "companyName">;
              }
            >
          >;
        };
    }
  >;
};
export type PatchAccountFormsLlcAgreementFormMutationVariables = Exact<{
  formId: Scalars["String"];
  updateLlcAgreementFormRequestInput?: Maybe<
    UpdateLlcAgreementFormRequestInput
  >;
}>;
export type PatchAccountFormsLlcAgreementFormMutation = {
  __typename?: "Mutation";
} & {
  patchAccountFormsLlcAgreementForm?: Maybe<
    {
      __typename?: "UpdateLlcAgreementFormResponse";
    } & {
      llcAgreementForm: {
        __typename?: "LlcAgreementForm";
      } & Pick<
        LlcAgreementForm,
        | "articlesOfIncorporationOrOperatingAgreementSnapId"
        | "authorizedSignerName"
        | "authorizedSignerTitle"
        | "createdAt"
        | "entityName"
        | "formId"
        | "isAuthorizedSignerESigned"
        | "resolutionAdoptionDate"
        | "stateOfOrigin"
        | "updatedAt"
      > & {
          membersAndManagers: Array<
            Maybe<
              {
                __typename?: "MembersAndManagers2";
              } & Pick<
                MembersAndManagers2,
                | "isManager"
                | "isManagerESigned"
                | "legalName"
                | "organizationalRole"
              >
            >
          >;
        };
    }
  >;
};
export type PatchAccountFormsTrustedContactFormMutationVariables = Exact<{
  formId: Scalars["String"];
  updateTrustedContactFormRequestInput?: Maybe<
    UpdateTrustedContactFormRequestInput
  >;
}>;
export type PatchAccountFormsTrustedContactFormMutation = {
  __typename?: "Mutation";
} & {
  patchAccountFormsTrustedContactForm?: Maybe<
    {
      __typename?: "UpdateTrustedContactFormResponse";
    } & {
      trustedContactForm: {
        __typename?: "TrustedContactForm";
      } & Pick<
        TrustedContactForm,
        | "createdAt"
        | "emailAddress"
        | "familyName"
        | "formId"
        | "givenName"
        | "updatedAt"
      > & {
          mailingAddress?: Maybe<
            {
              __typename?: "PhysicalAddress";
            } & Pick<
              PhysicalAddress,
              "city" | "country" | "postalCode" | "state" | "streetAddress"
            >
          >;
          phoneNumber?: Maybe<
            {
              __typename?: "PhoneNumber";
            } & Pick<PhoneNumber, "phoneNumber" | "phoneNumberType">
          >;
        };
    }
  >;
};
export type PatchAccountNumberLinkedBankAccountUpdateStatusMutationVariables = Exact<{
  accountNumber: Scalars["String"];
  linkedBankAccountId: Scalars["String"];
  updateLinkedBankAccountStatusRequestInput?: Maybe<
    UpdateLinkedBankAccountStatusRequestInput
  >;
}>;
export type PatchAccountNumberLinkedBankAccountUpdateStatusMutation = {
  __typename?: "Mutation";
} & {
  patchAccountNumberLinkedBankAccountUpdateStatus?: Maybe<
    {
      __typename?: "UpdateLinkedBankAccountStatusResponse";
    } & {
      linkedBankAccount: {
        __typename?: "LinkedBankAccount";
      } & Pick<
        LinkedBankAccount,
        | "accountType"
        | "bankName"
        | "createdAt"
        | "id"
        | "investorId"
        | "mask"
        | "metadata"
        | "status"
        | "updatedAt"
      >;
    }
  >;
};
export type PatchAccountStatusMutationVariables = Exact<{
  id: Scalars["String"];
  updateApexAccountStatusRequestInput?: Maybe<
    UpdateApexAccountStatusRequestInput
  >;
}>;
export type PatchAccountStatusMutation = {
  __typename?: "Mutation";
} & {
  patchAccountStatus?: Maybe<
    {
      __typename?: "UpdateApexAccountStatusResponse";
    } & {
      apexAccount: {
        __typename?: "ApexAccount2";
      } & Pick<
        ApexAccount2,
        | "apexAccountNumber"
        | "apexRequestId"
        | "createdAt"
        | "id"
        | "investorId"
        | "metadata"
        | "status"
        | "updatedAt"
      >;
    }
  >;
};
export type PatchAccountsMutationVariables = Exact<{
  accountNumber: Scalars["String"];
  updateApexAccountRequestInput?: Maybe<UpdateApexAccountRequestInput>;
}>;
export type PatchAccountsMutation = {
  __typename?: "Mutation";
} & {
  patchAccounts?: Maybe<
    {
      __typename?: "UpdateApexAccountResponse";
    } & {
      apexAccount: {
        __typename?: "ApexAccount";
      } & Pick<
        ApexAccount,
        | "accountNumber"
        | "accountRequestId"
        | "accountType"
        | "createdAt"
        | "status"
        | "updatedAt"
      >;
    }
  >;
};
export type PatchAccountsTransferCancelMutationVariables = Exact<{
  accountNumber: Scalars["String"];
  transferId: Scalars["String"];
}>;
export type PatchAccountsTransferCancelMutation = {
  __typename?: "Mutation";
} & {
  patchAccountsTransferCancel?: Maybe<
    {
      __typename?: "CancelTransferResponse";
    } & {
      transfer: {
        __typename?: "Transfer3";
      } & Pick<
        Transfer3,
        | "amount"
        | "createdAt"
        | "currency"
        | "direction"
        | "id"
        | "investorId"
        | "ledgerId"
        | "linkedBankAccountId"
        | "metadata"
        | "portfolioId"
        | "status"
        | "transferMethod"
        | "updatedAt"
      > & {
          externalEntity?: Maybe<
            {
              __typename?: "ExternalEntity";
            } & Pick<ExternalEntity, "externalEntityId" | "externalEntityType">
          >;
        };
    }
  >;
};
export type PatchAccountsTransferSettleMutationVariables = Exact<{
  accountNumber: Scalars["String"];
  transferId: Scalars["String"];
}>;
export type PatchAccountsTransferSettleMutation = {
  __typename?: "Mutation";
} & {
  patchAccountsTransferSettle?: Maybe<
    {
      __typename?: "SettleTransferResponse";
    } & {
      transfer: {
        __typename?: "Transfer4";
      } & Pick<
        Transfer4,
        | "accountNumber"
        | "amount"
        | "counterparty"
        | "counterpartyId"
        | "createdAt"
        | "direction"
        | "status"
        | "transferId"
        | "updatedAt"
      >;
    }
  >;
};
export type PatchAssetMutationVariables = Exact<{
  id: Scalars["String"];
  updateAssetRequestInput?: Maybe<UpdateAssetRequestInput>;
}>;
export type PatchAssetMutation = {
  __typename?: "Mutation";
} & {
  patchAsset?: Maybe<
    {
      __typename?: "UpdateAssetResponse";
    } & Pick<UpdateAssetResponse, "created" | "updated">
  >;
};
export type PatchAssetsTimeSeriesMutationVariables = Exact<{
  updateAssetTimeSeriesRequestInput?: Maybe<UpdateAssetTimeSeriesRequestInput>;
}>;
export type PatchAssetsTimeSeriesMutation = {
  __typename?: "Mutation";
} & {
  patchAssetsTimeSeries?: Maybe<
    {
      __typename?: "UpdateAssetTimeSeriesResponse";
    } & Pick<UpdateAssetTimeSeriesResponse, "updated">
  >;
};
export type PatchInstitutionMutationVariables = Exact<{
  institutionId: Scalars["String"];
  updateInstitutionRequestInput?: Maybe<UpdateInstitutionRequestInput>;
}>;
export type PatchInstitutionMutation = {
  __typename?: "Mutation";
} & {
  patchInstitution?: Maybe<
    {
      __typename?: "UpdateInstitutionResponse";
    } & {
      institution: {
        __typename?: "Institution";
      } & Pick<
        Institution,
        "createdAt" | "id" | "metadata" | "name" | "updatedAt"
      > & {
          machineUsers: Array<
            Maybe<
              {
                __typename?: "MachineUser";
              } & Pick<MachineUser, "clientId" | "clientSecret">
            >
          >;
          primaryContact: {
            __typename?: "PrimaryContact";
          } & Pick<PrimaryContact, "email" | "first" | "last">;
        };
    }
  >;
};
export type PatchInstitutionApiCallRecordMutationVariables = Exact<{
  institutionId: Scalars["String"];
  recordId: Scalars["String"];
  updateApiCallRecordRequestInput?: Maybe<UpdateApiCallRecordRequestInput>;
}>;
export type PatchInstitutionApiCallRecordMutation = {
  __typename?: "Mutation";
} & {
  patchInstitutionApiCallRecord?: Maybe<
    {
      __typename?: "UpdateApiCallRecordResponse";
    } & {
      apiCallRecord: {
        __typename?: "ApiCallRecord";
      } & Pick<
        ApiCallRecord,
        | "action"
        | "createdAt"
        | "id"
        | "institutionId"
        | "metadata"
        | "responseStatus"
        | "updatedAt"
        | "url"
      >;
    }
  >;
};
export type PatchInstitutionInventoryMutationVariables = Exact<{
  id: Scalars["String"];
  institutionId: Scalars["String"];
  updateInventoryRequestInput?: Maybe<UpdateInventoryRequestInput>;
}>;
export type PatchInstitutionInventoryMutation = {
  __typename?: "Mutation";
} & {
  patchInstitutionInventory?: Maybe<
    {
      __typename?: "UpdateInventoryResponse";
    } & {
      unmappedConstituents: Array<
        Maybe<
          {
            __typename?: "Constituent";
          } & Pick<Constituent, "assetId" | "cusip" | "isin" | "ticker">
        >
      >;
    }
  >;
};
export type PatchInstitutionsUsersEmailMutationVariables = Exact<{
  email: Scalars["String"];
  updateUserMappingRequestInput?: Maybe<UpdateUserMappingRequestInput>;
}>;
export type PatchInstitutionsUsersEmailMutation = {
  __typename?: "Mutation";
} & {
  patchInstitutionsUsersEmail?: Maybe<
    {
      __typename?: "UpdateUserMappingResponse";
    } & {
      userMapping: {
        __typename?: "UserMapping";
      } & Pick<
        UserMapping,
        "email" | "institutionId" | "roles" | "userId" | "userType"
      >;
    }
  >;
};
export type PatchInvestorMutationVariables = Exact<{
  investorId: Scalars["String"];
  updateInvestorRequestInput?: Maybe<UpdateInvestorRequestInput>;
}>;
export type PatchInvestorMutation = {
  __typename?: "Mutation";
} & {
  patchInvestor?: Maybe<
    {
      __typename?: "UpdateInvestorResponse";
    } & {
      investor: {
        __typename?: "Investor";
      } & Pick<
        Investor,
        | "createdAt"
        | "id"
        | "investorType"
        | "metadata"
        | "status"
        | "updatedAt"
      > & {
          investorInfo: {
            __typename?: "InvestorInfo";
          } & Pick<
            InvestorInfo,
            | "birthCountry"
            | "catAccountHolderType"
            | "citizenshipCountry"
            | "familyName"
            | "givenName"
            | "investorType"
            | "isPermanentResident"
            | "issuerDirectCommunication"
            | "organizationName"
            | "title"
          > & {
              applicantSignature: {
                __typename?: "ApplicantSignature2";
              } & Pick<ApplicantSignature2, "eSigned">;
              beneficialOwnersAndOfficers?: Maybe<
                {
                  __typename?: "BeneficialOwnersAndOfficers";
                } & Pick<
                  BeneficialOwnersAndOfficers,
                  "businessClassification"
                > & {
                    beneficialOwners: Array<
                      Maybe<
                        {
                          __typename?: "BeneficialOwners3";
                        } & Pick<
                          BeneficialOwners3,
                          | "dateOfBirth"
                          | "identificationNumber"
                          | "socialSecurityNumber"
                        > & {
                            address: {
                              __typename?: "Address";
                            } & Pick<
                              Address,
                              | "city"
                              | "country"
                              | "postalCode"
                              | "state"
                              | "streetAddress"
                            >;
                            name: {
                              __typename?: "Name";
                            } & Pick<
                              Name,
                              "familyName" | "givenName" | "legalName"
                            >;
                          }
                      >
                    >;
                    officers: Array<
                      Maybe<
                        {
                          __typename?: "Officers2";
                        } & Pick<
                          Officers2,
                          | "dateOfBirth"
                          | "identificationNumber"
                          | "socialSecurityNumber"
                        > & {
                            address: {
                              __typename?: "Address";
                            } & Pick<
                              Address,
                              | "city"
                              | "country"
                              | "postalCode"
                              | "state"
                              | "streetAddress"
                            >;
                            name: {
                              __typename?: "Name";
                            } & Pick<
                              Name,
                              "familyName" | "givenName" | "legalName"
                            >;
                          }
                      >
                    >;
                  }
              >;
              cashAccountAgreement?: Maybe<
                {
                  __typename?: "CashAccountAgreement";
                } & Pick<
                  CashAccountAgreement,
                  | "articlesOfIncorporationSnapId"
                  | "authorizedOfficerName"
                  | "authorizedOfficerTitle"
                  | "corporationName"
                  | "isAuthorizedOfficerESigned"
                  | "isSecretaryESigned"
                  | "secretaryName"
                  | "stateOfIncorporation"
                >
              >;
              contactInformation: {
                __typename?: "ContactInformation";
              } & Pick<
                ContactInformation,
                | "city"
                | "country"
                | "emailAddresses"
                | "phone"
                | "phoneType"
                | "postalCode"
                | "state"
                | "streetAddress"
              >;
              disclosures: {
                __typename?: "Disclosures2";
              } & Pick<
                Disclosures2,
                | "affiliatedApproval"
                | "companySymbols"
                | "firmName"
                | "isAffiliatedExchangeOrFINRA"
                | "isControlPerson"
                | "isPoliticallyExposed"
              > & {
                  interestedParties?: Maybe<
                    Array<
                      Maybe<
                        {
                          __typename?: "InterestedParties4";
                        } & {
                          mailingAddress: {
                            __typename?: "InterestedPartyAddress";
                          } & Pick<
                            InterestedPartyAddress,
                            | "city"
                            | "country"
                            | "postalCode"
                            | "state"
                            | "streetAddress"
                          >;
                          name: {
                            __typename?: "InterestedPartyName";
                          } & Pick<InterestedPartyName, "companyName">;
                        }
                      >
                    >
                  >;
                  politicalExposureDetail?: Maybe<
                    {
                      __typename?: "PoliticalExposureDetail2";
                    } & Pick<
                      PoliticalExposureDetail2,
                      "immediateFamily" | "politicalOrganization"
                    >
                  >;
                };
              employment?: Maybe<
                {
                  __typename?: "Employment2";
                } & Pick<
                  Employment2,
                  "employer" | "employmentStatus" | "positionEmployed"
                >
              >;
              entityDueDiligence?: Maybe<
                {
                  __typename?: "EntityDueDiligence";
                } & Pick<
                  EntityDueDiligence,
                  "assessedRiskRating" | "entityOrAssociatesHaveNegativeNews"
                > & {
                    accountActivity: {
                      __typename?: "AccountActivity";
                    } & Pick<
                      AccountActivity,
                      | "expectedWithdrawalFrequency"
                      | "initialDepositAmount"
                      | "initialDepositSource"
                      | "primaryEntityAccountActivity"
                      | "willTransactForeignBonds"
                      | "willTransactLowPricedSecurities"
                    >;
                    accountInformation: {
                      __typename?: "DueDiligenceAccountInformation2";
                    } & Pick<
                      DueDiligenceAccountInformation2,
                      | "accountName"
                      | "businessLocations"
                      | "countryOfIncorporation"
                      | "hasRelatedAccounts"
                    > & {
                        relatedAccountList?: Maybe<
                          Array<
                            Maybe<
                              {
                                __typename?: "RelatedAccounts2";
                              } & Pick<
                                RelatedAccounts2,
                                "accountNumber" | "entityName"
                              >
                            >
                          >
                        >;
                      };
                    additionalAccounts: {
                      __typename?: "AdditionalAccounts";
                    } & Pick<
                      AdditionalAccounts,
                      | "confirmEntityDoesNotIssueBearerShares"
                      | "institutionNames"
                      | "primaryOngoingFundingSource"
                      | "primaryOngoingFundingSourceClarification"
                      | "scopeOfBusiness"
                      | "scopeOfBusinessClarification"
                    >;
                    politicallyExposedPersons: {
                      __typename?: "PoliticallyExposedPersons";
                    } & Pick<
                      PoliticallyExposedPersons,
                      "isPoliticallyExposed"
                    > & {
                        politicalOfficials?: Maybe<
                          Array<
                            Maybe<
                              {
                                __typename?: "PoliticalOfficials3";
                              } & Pick<
                                PoliticalOfficials3,
                                | "immediateFamily"
                                | "legalName"
                                | "politicalOrganization"
                                | "politicalTitle"
                                | "role"
                              >
                            >
                          >
                        >;
                      };
                  }
              >;
              exemptLegalCustomer?: Maybe<
                {
                  __typename?: "ExemptLegalCustomer";
                } & Pick<
                  ExemptLegalCustomer,
                  "exemption" | "isExemptLegalCustomer"
                >
              >;
              investmentProfile?: Maybe<
                {
                  __typename?: "InvestmentProfile2";
                } & Pick<
                  InvestmentProfile2,
                  | "annualIncomeUSD"
                  | "federalTaxBracketPercent"
                  | "investmentExperience"
                  | "investmentObjective"
                  | "liquidNetWorthUSD"
                  | "riskTolerance"
                  | "totalNetWorthUSD"
                >
              >;
              llcAccountAgreement?: Maybe<
                {
                  __typename?: "LlcAccountAgreement";
                } & Pick<
                  LlcAccountAgreement,
                  | "authorizedSignerName"
                  | "authorizedSignerTitle"
                  | "entityName"
                  | "isAuthorizedSignerESigned"
                  | "resolutionAdoptionDate"
                  | "stateOfOrigin"
                > & {
                    membersAndManagers: Array<
                      Maybe<
                        {
                          __typename?: "MembersAndManagers2";
                        } & Pick<
                          MembersAndManagers2,
                          | "isManager"
                          | "isManagerESigned"
                          | "legalName"
                          | "organizationalRole"
                        >
                      >
                    >;
                  }
              >;
              organization?: Maybe<
                {
                  __typename?: "Organization";
                } & Pick<
                  Organization,
                  | "entityType"
                  | "foreignBankUSAgent"
                  | "isForeignBank"
                  | "isMaintainedForForeignFinancialInstitution"
                  | "uploadedWNineForm"
                  | "usEntity"
                >
              >;
              suitabilityProfile: {
                __typename?: "SuitabilityProfile";
              } & Pick<SuitabilityProfile, "liquidityNeeds" | "timeHorizon">;
              trustedContactInfo: {
                __typename?: "TrustedContactInfo";
              } & Pick<TrustedContactInfo, "trustedContact"> & {
                  trustedContactPerson?: Maybe<
                    {
                      __typename?: "TrustedContactPerson";
                    } & Pick<
                      TrustedContactPerson,
                      "emailAddress" | "familyName" | "givenName"
                    >
                  >;
                };
              wnineTaxForm?: Maybe<
                {
                  __typename?: "WNineTaxForm";
                } & Pick<WNineTaxForm, "exemptPayeeCode" | "exemptionFromFatca">
              >;
            };
        };
    }
  >;
};
export type PatchInvestorAccountMutationVariables = Exact<{
  investorId: Scalars["String"];
}>;
export type PatchInvestorAccountMutation = {
  __typename?: "Mutation";
} & {
  patchInvestorAccount?: Maybe<
    {
      __typename?: "UpdateApexAccountResponse2";
    } & {
      apexAccount: {
        __typename?: "ApexAccount2";
      } & Pick<
        ApexAccount2,
        | "apexAccountNumber"
        | "apexRequestId"
        | "createdAt"
        | "id"
        | "investorId"
        | "metadata"
        | "status"
        | "updatedAt"
      >;
    }
  >;
};
export type PatchInvestorLinkedBankAccountStatusMutationVariables = Exact<{
  investorId: Scalars["String"];
  linkedBankAccountId: Scalars["String"];
  updateLinkedBankAccountStatusRequestInput?: Maybe<
    UpdateLinkedBankAccountStatusRequestInput
  >;
}>;
export type PatchInvestorLinkedBankAccountStatusMutation = {
  __typename?: "Mutation";
} & {
  patchInvestorLinkedBankAccountStatus?: Maybe<
    {
      __typename?: "UpdateLinkedBankAccountStatusResponse";
    } & {
      linkedBankAccount: {
        __typename?: "LinkedBankAccount";
      } & Pick<
        LinkedBankAccount,
        | "accountType"
        | "bankName"
        | "createdAt"
        | "id"
        | "investorId"
        | "mask"
        | "metadata"
        | "status"
        | "updatedAt"
      >;
    }
  >;
};
export type PatchInvestorTransferStatusMutationVariables = Exact<{
  investorId: Scalars["String"];
  transferId: Scalars["String"];
  updateTransferStatusRequestInput?: Maybe<UpdateTransferStatusRequestInput>;
}>;
export type PatchInvestorTransferStatusMutation = {
  __typename?: "Mutation";
} & {
  patchInvestorTransferStatus?: Maybe<
    {
      __typename?: "UpdateTransferStatusResponse";
    } & {
      transfer: {
        __typename?: "Transfer3";
      } & Pick<
        Transfer3,
        | "amount"
        | "createdAt"
        | "currency"
        | "direction"
        | "id"
        | "investorId"
        | "ledgerId"
        | "linkedBankAccountId"
        | "metadata"
        | "portfolioId"
        | "status"
        | "transferMethod"
        | "updatedAt"
      > & {
          externalEntity?: Maybe<
            {
              __typename?: "ExternalEntity";
            } & Pick<ExternalEntity, "externalEntityId" | "externalEntityType">
          >;
        };
    }
  >;
};
export type PatchIssueMutationVariables = Exact<{
  id: Scalars["String"];
  updateIssueRequestInput?: Maybe<UpdateIssueRequestInput>;
}>;
export type PatchIssueMutation = {
  __typename?: "Mutation";
} & {
  patchIssue?: Maybe<
    {
      __typename?: "UpdateIssueResponse";
    } & Pick<UpdateIssueResponse, "created" | "updated">
  >;
};
export type PatchIssuerMutationVariables = Exact<{
  id: Scalars["String"];
  updateIssuerRequestInput?: Maybe<UpdateIssuerRequestInput>;
}>;
export type PatchIssuerMutation = {
  __typename?: "Mutation";
} & {
  patchIssuer?: Maybe<
    {
      __typename?: "UpdateIssuerResponse";
    } & Pick<UpdateIssuerResponse, "created" | "updated">
  >;
};
export type PatchOrderMutationVariables = Exact<{
  orderId: Scalars["String"];
}>;
export type PatchOrderMutation = {
  __typename?: "Mutation";
} & {
  patchOrder?: Maybe<
    {
      __typename?: "CancelTrafixOrderResponse";
    } & Pick<CancelTrafixOrderResponse, "message" | "timestamp">
  >;
};
export type PatchPortfolioMutationVariables = Exact<{
  id: Scalars["String"];
  updatePortfolioRequestInput?: Maybe<UpdatePortfolioRequestInput>;
}>;
export type PatchPortfolioMutation = {
  __typename?: "Mutation";
} & {
  patchPortfolio?: Maybe<
    {
      __typename?: "UpdatePortfolioResponse";
    } & {
      portfolio: {
        __typename?: "Portfolio3";
      } & Pick<
        Portfolio3,
        | "accountNumber"
        | "app"
        | "createdAt"
        | "currency"
        | "description"
        | "id"
        | "metadata"
        | "name"
        | "status"
        | "updatedAt"
      > & {
          positions: Array<
            Maybe<
              {
                __typename?: "Position2";
              } & Pick<
                Position2,
                | "assetId"
                | "costBasis"
                | "createdAt"
                | "id"
                | "metadata"
                | "portfolioId"
                | "quantity"
                | "settled"
                | "tradeDate"
                | "unsettled"
                | "updatedAt"
              >
            >
          >;
        };
    }
  >;
};
export type PatchPortfolioOrderMutationVariables = Exact<{
  id: Scalars["String"];
  portfolioId: Scalars["String"];
  updateOrderRequestInput?: Maybe<UpdateOrderRequestInput>;
}>;
export type PatchPortfolioOrderMutation = {
  __typename?: "Mutation";
} & {
  patchPortfolioOrder?: Maybe<
    {
      __typename?: "UpdateOrderResponse";
    } & {
      order: {
        __typename?: "Order2";
      } & Pick<
        Order2,
        | "assetId"
        | "assignedTo"
        | "comment"
        | "createdAt"
        | "filled"
        | "fullFillRequired"
        | "goodTillCancel"
        | "id"
        | "metadata"
        | "portfolioId"
        | "priceLimit"
        | "quantity"
        | "spotPrice"
        | "status"
        | "updatedAt"
      >;
    }
  >;
};
export type PatchPortfolioOrderCancelMutationVariables = Exact<{
  cancelOrderRequestInput?: Maybe<CancelOrderRequestInput>;
  id: Scalars["String"];
  portfolioId: Scalars["String"];
}>;
export type PatchPortfolioOrderCancelMutation = {
  __typename?: "Mutation";
} & {
  patchPortfolioOrderCancel?: Maybe<
    {
      __typename?: "CancelOrderResponse";
    } & Pick<CancelOrderResponse, "canceled">
  >;
};
export type PatchPortfolioTradeCancelMutationVariables = Exact<{
  cancelTradeRequestInput?: Maybe<CancelTradeRequestInput>;
  id: Scalars["String"];
  portfolioId: Scalars["String"];
}>;
export type PatchPortfolioTradeCancelMutation = {
  __typename?: "Mutation";
} & {
  patchPortfolioTradeCancel?: Maybe<
    {
      __typename?: "CancelTradeResponse";
    } & Pick<CancelTradeResponse, "cancelled">
  >;
};
export type PatchUserMutationVariables = Exact<{
  id: Scalars["String"];
  updateUserRequestInput?: Maybe<UpdateUserRequestInput>;
}>;
export type PatchUserMutation = {
  __typename?: "Mutation";
} & {
  patchUser?: Maybe<
    {
      __typename?: "UpdateUserResponse";
    } & {
      user: {
        __typename?: "User";
      } & Pick<
        User,
        | "createdAt"
        | "email"
        | "first"
        | "id"
        | "institutionId"
        | "last"
        | "metadata"
        | "status"
        | "terms"
        | "updatedAt"
        | "userType"
      > & {
          policies?: Maybe<
            Array<
              Maybe<
                {
                  __typename?: "Policy";
                } & Pick<Policy, "actions" | "resource">
              >
            >
          >;
        };
    }
  >;
};
export type PatchUserBlockUserMutationVariables = Exact<{
  blockUserRequestInput?: Maybe<BlockUserRequestInput>;
  id: Scalars["String"];
}>;
export type PatchUserBlockUserMutation = {
  __typename?: "Mutation";
} & {
  patchUserBlockUser?: Maybe<
    {
      __typename?: "BlockUserResponse";
    } & {
      user: {
        __typename?: "User";
      } & Pick<
        User,
        | "createdAt"
        | "email"
        | "first"
        | "id"
        | "institutionId"
        | "last"
        | "metadata"
        | "status"
        | "terms"
        | "updatedAt"
        | "userType"
      > & {
          policies?: Maybe<
            Array<
              Maybe<
                {
                  __typename?: "Policy";
                } & Pick<Policy, "actions" | "resource">
              >
            >
          >;
        };
    }
  >;
};
export type PatchUsersInvitesEmailResendMutationVariables = Exact<{
  email: Scalars["String"];
}>;
export type PatchUsersInvitesEmailResendMutation = {
  __typename?: "Mutation";
} & {
  patchUsersInvitesEmailResend?: Maybe<
    {
      __typename?: "ResendUserInviteResponse";
    } & {
      invitedUser: {
        __typename?: "InvitedUser";
      } & Pick<
        InvitedUser,
        | "createdAt"
        | "email"
        | "firstName"
        | "institutionId"
        | "invitedBy"
        | "lastName"
        | "nonce"
        | "status"
        | "userType"
      >;
    }
  >;
};
export type PostAccountAchRelationshipsMutationVariables = Exact<{
  createApexACHRelationshipRequestInput?: Maybe<
    CreateApexAchRelationshipRequestInput
  >;
  id: Scalars["String"];
}>;
export type PostAccountAchRelationshipsMutation = {
  __typename?: "Mutation";
} & {
  postAccountAchRelationships?: Maybe<
    {
      __typename?: "CreateApexACHRelationshipResponse";
    } & {
      apexAchRelationship: {
        __typename?: "ApexACHRelationship";
      } & Pick<
        ApexAchRelationship,
        | "accountId"
        | "apexRelationshipId"
        | "createdAt"
        | "id"
        | "linkedBankAccountId"
        | "metadata"
        | "status"
        | "updatedAt"
      >;
    }
  >;
};
export type PostAccountFormsCorporateAgreementFormMutationVariables = Exact<{
  createCorporateAgreementFormRequestInput?: Maybe<
    CreateCorporateAgreementFormRequestInput
  >;
}>;
export type PostAccountFormsCorporateAgreementFormMutation = {
  __typename?: "Mutation";
} & {
  postAccountFormsCorporateAgreementForm?: Maybe<
    {
      __typename?: "CreateCorporateAgreementFormResponse";
    } & {
      corporateAgreementForm: {
        __typename?: "CorporateAgreementForm";
      } & Pick<
        CorporateAgreementForm,
        | "articlesOfIncorporationSnapId"
        | "authorizedOfficerName"
        | "authorizedOfficerTitle"
        | "corporationName"
        | "createdAt"
        | "formId"
        | "isAuthorizedOfficerESigned"
        | "isSecretaryESigned"
        | "secretaryName"
        | "stateOfIncorporation"
        | "updatedAt"
      >;
    }
  >;
};
export type PostAccountFormsEntityAccountFormMutationVariables = Exact<{
  createEntityAccountFormRequestInput?: Maybe<
    CreateEntityAccountFormRequestInput
  >;
}>;
export type PostAccountFormsEntityAccountFormMutation = {
  __typename?: "Mutation";
} & {
  postAccountFormsEntityAccountForm?: Maybe<
    {
      __typename?: "CreateEntityAccountFormResponse";
    } & {
      entityAccountForm: {
        __typename?: "EntityAccountForm";
      } & Pick<
        EntityAccountForm,
        | "accountNature"
        | "catAccountholderType"
        | "createdAt"
        | "customerType"
        | "formId"
        | "isApplicantESigned"
        | "issuerDirectCommunicationCode"
        | "legalEntityIdentifier"
        | "updatedAt"
      > & {
          accountInformation?: Maybe<
            {
              __typename?: "EntityAccountInformation";
            } & Pick<
              EntityAccountInformation,
              | "businessTelephoneNumber"
              | "entityName"
              | "entityTaxId"
              | "isUSEntity"
            > & {
                accountTradingInformation: {
                  __typename?: "EntityAccountTradingInformation";
                } & Pick<
                  EntityAccountTradingInformation,
                  | "companyTickerSymbols"
                  | "isAffiliatedExchangeOrFINRA"
                  | "isControlPerson"
                  | "memberFirmNames"
                >;
                businessAddress: {
                  __typename?: "PhysicalAddress";
                } & Pick<
                  PhysicalAddress,
                  "city" | "country" | "postalCode" | "state" | "streetAddress"
                >;
              }
          >;
          additionalAccountInformation?: Maybe<
            {
              __typename?: "EntityAdditionalAccountInformation";
            } & Pick<
              EntityAdditionalAccountInformation,
              | "isForeignBank"
              | "isMaintainedForForeignFinancialInstitution"
              | "isPoliticallyExposed"
            > & {
                politicalExposureDetail?: Maybe<
                  {
                    __typename?: "EntityAccountPoliticalExposureDetail";
                  } & Pick<
                    EntityAccountPoliticalExposureDetail,
                    "immediateFamily" | "politicalOrganization"
                  >
                >;
              }
          >;
          authorizedSigner?: Maybe<
            {
              __typename?: "EntityAuthorizedSigner";
            } & Pick<
              EntityAuthorizedSigner,
              | "citizenshipCountry"
              | "dateOfBirth"
              | "emailAddress"
              | "isUsCitizen"
              | "taxId"
              | "title"
            > & {
                name: {
                  __typename?: "PrimaryName";
                } & Pick<PrimaryName, "familyName" | "givenName" | "legalName">;
              }
          >;
          beneficialOwners?: Maybe<
            Array<
              Maybe<
                {
                  __typename?: "OwnerOrOfficer";
                } & Pick<
                  OwnerOrOfficer,
                  | "dateOfBirth"
                  | "identificationNumber"
                  | "socialSecurityNumber"
                > & {
                    address: {
                      __typename?: "PhysicalAddress";
                    } & Pick<
                      PhysicalAddress,
                      | "city"
                      | "country"
                      | "postalCode"
                      | "state"
                      | "streetAddress"
                    >;
                    name: {
                      __typename?: "PrimaryName";
                    } & Pick<
                      PrimaryName,
                      "familyName" | "givenName" | "legalName"
                    >;
                  }
              >
            >
          >;
          entityOfficers?: Maybe<
            Array<
              Maybe<
                {
                  __typename?: "OwnerOrOfficer";
                } & Pick<
                  OwnerOrOfficer,
                  | "dateOfBirth"
                  | "identificationNumber"
                  | "socialSecurityNumber"
                > & {
                    address: {
                      __typename?: "PhysicalAddress";
                    } & Pick<
                      PhysicalAddress,
                      | "city"
                      | "country"
                      | "postalCode"
                      | "state"
                      | "streetAddress"
                    >;
                    name: {
                      __typename?: "PrimaryName";
                    } & Pick<
                      PrimaryName,
                      "familyName" | "givenName" | "legalName"
                    >;
                  }
              >
            >
          >;
          exemptLegalCustomer?: Maybe<
            {
              __typename?: "EntityAccountExemptLegalCustomer";
            } & Pick<
              EntityAccountExemptLegalCustomer,
              "exemption" | "isExemptLegalCustomer"
            >
          >;
          serviceProfile?: Maybe<
            {
              __typename?: "EntityAccountProfile";
            } & Pick<
              EntityAccountProfile,
              "dividendReinvestment" | "sweepInstructions"
            >
          >;
          suitabilityProfile?: Maybe<
            {
              __typename?: "SuitabilityProfile";
            } & Pick<SuitabilityProfile, "liquidityNeeds" | "timeHorizon">
          >;
          w9Certification?: Maybe<
            {
              __typename?: "W9Certification";
            } & Pick<W9Certification, "exemptPayeeCode" | "exemptionFromFatca">
          >;
        };
    }
  >;
};
export type PostAccountFormsEntityDueDiligenceFormMutationVariables = Exact<{
  createEntityDueDiligenceFormRequestInput?: Maybe<
    CreateEntityDueDiligenceFormRequestInput
  >;
}>;
export type PostAccountFormsEntityDueDiligenceFormMutation = {
  __typename?: "Mutation";
} & {
  postAccountFormsEntityDueDiligenceForm?: Maybe<
    {
      __typename?: "CreateEntityDueDiligenceFormResponse";
    } & {
      entityDueDiligenceForm: {
        __typename?: "EntityDueDiligenceForm";
      } & Pick<
        EntityDueDiligenceForm,
        | "assessedRiskRating"
        | "createdAt"
        | "entityOrAssociatesHaveNegativeNews"
        | "entityOrAssociatesNegativeNewsInfo"
        | "formId"
        | "principalApproverName"
        | "registeredRepresentativeApproverName"
        | "updatedAt"
      > & {
          accountActivity?: Maybe<
            {
              __typename?: "DueDiligenceAccountActivity";
            } & Pick<
              DueDiligenceAccountActivity,
              | "expectedWithdrawalFrequency"
              | "initialDepositAmount"
              | "initialDepositSource"
              | "lowPricedSecuritiesPercentage"
              | "primaryAccountActivity"
              | "willTransactForeignBonds"
              | "willTransactLowPricedSecurities"
            >
          >;
          accountInformation?: Maybe<
            {
              __typename?: "DueDiligenceAccountInformation";
            } & Pick<
              DueDiligenceAccountInformation,
              | "accountName"
              | "businessLocations"
              | "countryOfIncorporation"
              | "hasAccounts"
            > & {
                relatedAccounts?: Maybe<
                  Array<
                    Maybe<
                      {
                        __typename?: "DueDiligenceRelatedAccounts";
                      } & Pick<
                        DueDiligenceRelatedAccounts,
                        "accountNumber" | "entityName"
                      >
                    >
                  >
                >;
              }
          >;
          additionalAccounts?: Maybe<
            {
              __typename?: "DueDiligenceAdditionalAccounts";
            } & Pick<
              DueDiligenceAdditionalAccounts,
              | "confirmEntityDoesNotIssueBearerShares"
              | "institutionNames"
              | "primaryOngoingFundingSource"
              | "primaryOngoingFundingSourceClarification"
              | "scopeOfBusiness"
              | "scopeOfBusinessClarification"
            >
          >;
          politicallyExposedPersons?: Maybe<
            {
              __typename?: "DueDiligencePoliticallyExposedPersons";
            } & Pick<
              DueDiligencePoliticallyExposedPersons,
              "isPoliticallyExposed"
            > & {
                politicalOfficials?: Maybe<
                  Array<
                    Maybe<
                      {
                        __typename?: "DueDiligencePoliticalOfficials";
                      } & Pick<
                        DueDiligencePoliticalOfficials,
                        | "immediateFamily"
                        | "legalName"
                        | "politicalOrganization"
                        | "politicalTitle"
                        | "role"
                      >
                    >
                  >
                >;
              }
          >;
        };
    }
  >;
};
export type PostAccountFormsIndividualAccountFormMutationVariables = Exact<{
  createIndividualAccountFormRequestInput?: Maybe<
    CreateIndividualAccountFormRequestInput
  >;
}>;
export type PostAccountFormsIndividualAccountFormMutation = {
  __typename?: "Mutation";
} & {
  postAccountFormsIndividualAccountForm?: Maybe<
    {
      __typename?: "CreateIndividualAccountFormResponse";
    } & {
      individualAccountForm: {
        __typename?: "IndividualAccountForm";
      } & Pick<
        IndividualAccountForm,
        | "catAccountholderType"
        | "createdAt"
        | "customerType"
        | "formId"
        | "trustedContact"
        | "updatedAt"
      > & {
          applicantSignature?: Maybe<
            {
              __typename?: "ApplicantSignature";
            } & Pick<ApplicantSignature, "eSigned">
          >;
          applicants?: Maybe<
            Array<
              Maybe<
                {
                  __typename?: "Applicant";
                } & {
                  contact?: Maybe<
                    {
                      __typename?: "Contact";
                    } & Pick<Contact, "emailAddresses"> & {
                        homeAddress: {
                          __typename?: "PhysicalAddress";
                        } & Pick<
                          PhysicalAddress,
                          | "city"
                          | "country"
                          | "postalCode"
                          | "state"
                          | "streetAddress"
                        >;
                        phoneNumbers: Array<
                          Maybe<
                            {
                              __typename?: "PhoneNumber";
                            } & Pick<
                              PhoneNumber,
                              "phoneNumber" | "phoneNumberType"
                            >
                          >
                        >;
                      }
                  >;
                  disclosures?: Maybe<
                    {
                      __typename?: "Disclosures";
                    } & Pick<
                      Disclosures,
                      | "affiliatedApproval"
                      | "companySymbols"
                      | "firmName"
                      | "isAffiliatedExchangeOrFINRA"
                      | "isControlPerson"
                      | "isPoliticallyExposed"
                    > & {
                        politicalExposureDetail?: Maybe<
                          {
                            __typename?: "PoliticalExposureDetail";
                          } & Pick<
                            PoliticalExposureDetail,
                            "immediateFamily" | "politicalOrganization"
                          >
                        >;
                      }
                  >;
                  employment?: Maybe<
                    {
                      __typename?: "Employment";
                    } & Pick<
                      Employment,
                      "employer" | "employmentStatus" | "positionEmployed"
                    >
                  >;
                  identity?: Maybe<
                    {
                      __typename?: "Identity";
                    } & Pick<
                      Identity,
                      | "birthCountry"
                      | "citizenshipCountry"
                      | "dateOfBirth"
                      | "permanentResident"
                      | "socialSecurityNumber"
                      | "visaExpirationDate"
                      | "visaType"
                    > & {
                        name: {
                          __typename?: "PrimaryName";
                        } & Pick<
                          PrimaryName,
                          "familyName" | "givenName" | "legalName"
                        >;
                      }
                  >;
                }
              >
            >
          >;
          investmentProfile?: Maybe<
            {
              __typename?: "InvestmentProfile";
            } & Pick<
              InvestmentProfile,
              | "annualIncomeUSD"
              | "federalTaxBracketPercent"
              | "investmentExperience"
              | "investmentObjective"
              | "liquidNetWorthUSD"
              | "riskTolerance"
              | "totalNetWorthUSD"
            >
          >;
          serviceProfile?: Maybe<
            {
              __typename?: "IndividualServiceProfile";
            } & Pick<
              IndividualServiceProfile,
              | "dividendProceeds"
              | "dividendProceedsSendFrequency"
              | "dividendReinvestment"
              | "householdingService"
              | "issuerDirectCommunication"
              | "securitySaleProceeds"
              | "sweepInstructions"
            >
          >;
          suitabilityProfile?: Maybe<
            {
              __typename?: "SuitabilityProfile";
            } & Pick<SuitabilityProfile, "liquidityNeeds" | "timeHorizon">
          >;
        };
    }
  >;
};
export type PostAccountFormsInterestedPartyFormMutationVariables = Exact<{
  createInterestedPartyFormRequestInput?: Maybe<
    CreateInterestedPartyFormRequestInput
  >;
}>;
export type PostAccountFormsInterestedPartyFormMutation = {
  __typename?: "Mutation";
} & {
  postAccountFormsInterestedPartyForm?: Maybe<
    {
      __typename?: "CreateInterestedPartyFormResponse";
    } & {
      interestedPartyForm: {
        __typename?: "InterestedPartyForm";
      } & Pick<InterestedPartyForm, "createdAt" | "formId" | "updatedAt"> & {
          interestedParties: Array<
            Maybe<
              {
                __typename?: "InterestedParties2";
              } & {
                mailingAddress: {
                  __typename?: "PhysicalAddress";
                } & Pick<
                  PhysicalAddress,
                  "city" | "country" | "postalCode" | "state" | "streetAddress"
                >;
                name: {
                  __typename?: "InterestedPartyName";
                } & Pick<InterestedPartyName, "companyName">;
              }
            >
          >;
        };
    }
  >;
};
export type PostAccountFormsLlcAgreementFormMutationVariables = Exact<{
  createLlcAgreementFormRequestInput?: Maybe<
    CreateLlcAgreementFormRequestInput
  >;
}>;
export type PostAccountFormsLlcAgreementFormMutation = {
  __typename?: "Mutation";
} & {
  postAccountFormsLlcAgreementForm?: Maybe<
    {
      __typename?: "CreateLlcAgreementFormResponse";
    } & {
      llcAgreementForm: {
        __typename?: "LlcAgreementForm";
      } & Pick<
        LlcAgreementForm,
        | "articlesOfIncorporationOrOperatingAgreementSnapId"
        | "authorizedSignerName"
        | "authorizedSignerTitle"
        | "createdAt"
        | "entityName"
        | "formId"
        | "isAuthorizedSignerESigned"
        | "resolutionAdoptionDate"
        | "stateOfOrigin"
        | "updatedAt"
      > & {
          membersAndManagers: Array<
            Maybe<
              {
                __typename?: "MembersAndManagers2";
              } & Pick<
                MembersAndManagers2,
                | "isManager"
                | "isManagerESigned"
                | "legalName"
                | "organizationalRole"
              >
            >
          >;
        };
    }
  >;
};
export type PostAccountFormsTrustedContactFormMutationVariables = Exact<{
  createTrustedContactFormRequestInput?: Maybe<
    CreateTrustedContactFormRequestInput
  >;
}>;
export type PostAccountFormsTrustedContactFormMutation = {
  __typename?: "Mutation";
} & {
  postAccountFormsTrustedContactForm?: Maybe<
    {
      __typename?: "CreateTrustedContactFormResponse";
    } & {
      trustedContactForm: {
        __typename?: "TrustedContactForm";
      } & Pick<
        TrustedContactForm,
        | "createdAt"
        | "emailAddress"
        | "familyName"
        | "formId"
        | "givenName"
        | "updatedAt"
      > & {
          mailingAddress?: Maybe<
            {
              __typename?: "PhysicalAddress";
            } & Pick<
              PhysicalAddress,
              "city" | "country" | "postalCode" | "state" | "streetAddress"
            >
          >;
          phoneNumber?: Maybe<
            {
              __typename?: "PhoneNumber";
            } & Pick<PhoneNumber, "phoneNumber" | "phoneNumberType">
          >;
        };
    }
  >;
};
export type PostAccountNumberLinkDirectlyMutationVariables = Exact<{
  accountNumber: Scalars["String"];
  linkBankAccountDirectlyRequestInput?: Maybe<
    LinkBankAccountDirectlyRequestInput
  >;
}>;
export type PostAccountNumberLinkDirectlyMutation = {
  __typename?: "Mutation";
} & {
  postAccountNumberLinkDirectly?: Maybe<
    {
      __typename?: "LinkBankAccountDirectlyResponse";
    } & {
      linkedBankAccount: {
        __typename?: "LinkedBankAccount2";
      } & Pick<
        LinkedBankAccount2,
        | "accountNumber"
        | "accountType"
        | "approvalMethod"
        | "bankName"
        | "createdAt"
        | "linkedBankAccountId"
        | "mask"
        | "metadata"
        | "owner"
        | "status"
        | "updatedAt"
      >;
    }
  >;
};
export type PostAccountNumberLinkWithPlaidMutationVariables = Exact<{
  accountNumber: Scalars["String"];
  linkBankAccountPlaidRequestInput?: Maybe<LinkBankAccountPlaidRequestInput>;
}>;
export type PostAccountNumberLinkWithPlaidMutation = {
  __typename?: "Mutation";
} & {
  postAccountNumberLinkWithPlaid?: Maybe<
    {
      __typename?: "LinkBankAccountPlaidResponse";
    } & {
      linkedBankAccount: {
        __typename?: "LinkedBankAccount2";
      } & Pick<
        LinkedBankAccount2,
        | "accountNumber"
        | "accountType"
        | "approvalMethod"
        | "bankName"
        | "createdAt"
        | "linkedBankAccountId"
        | "mask"
        | "metadata"
        | "owner"
        | "status"
        | "updatedAt"
      >;
    }
  >;
};
export type PostAccountTransfersMutationVariables = Exact<{
  accountTransfersInput?: Maybe<AccountTransfersInput>;
  id: Scalars["String"];
}>;
export type PostAccountTransfersMutation = {
  __typename?: "Mutation";
} & {
  postAccountTransfers?: Maybe<
    {
      __typename?: "CreateApexTransferResponse2";
    } & {
      apexTransfer: {
        __typename?: "ApexTransfer";
      } & Pick<
        ApexTransfer,
        | "accountId"
        | "achRelationshipId"
        | "amount"
        | "apexTransferId"
        | "createdAt"
        | "direction"
        | "id"
        | "metadata"
        | "status"
        | "transferId"
        | "transferMethod"
        | "updatedAt"
      >;
    }
  >;
};
export type PostAccountsMutationVariables = Exact<{
  createApexAccountRequestInput?: Maybe<CreateApexAccountRequestInput>;
}>;
export type PostAccountsMutation = {
  __typename?: "Mutation";
} & {
  postAccounts?: Maybe<
    {
      __typename?: "CreateApexAccountResponse";
    } & {
      apexAccount: {
        __typename?: "ApexAccount";
      } & Pick<
        ApexAccount,
        | "accountNumber"
        | "accountRequestId"
        | "accountType"
        | "createdAt"
        | "status"
        | "updatedAt"
      >;
    }
  >;
};
export type PostAccountsAchRelationshipsMutationVariables = Exact<{
  accountNumber: Scalars["String"];
  setAchRelationshipRequestInput?: Maybe<SetAchRelationshipRequestInput>;
}>;
export type PostAccountsAchRelationshipsMutation = {
  __typename?: "Mutation";
} & {
  postAccountsAchRelationships?: Maybe<
    {
      __typename?: "SetAchRelationshipResponse";
    } & {
      achRelationship: {
        __typename?: "AchRelationship";
      } & Pick<
        AchRelationship,
        | "accountNumber"
        | "achRelationshipId"
        | "createdAt"
        | "linkedBankAccountId"
        | "status"
        | "updatedAt"
      >;
    }
  >;
};
export type PostAccountsTransfersMutationVariables = Exact<{
  accountNumber: Scalars["String"];
  createApexTransferRequestInput?: Maybe<CreateApexTransferRequestInput>;
}>;
export type PostAccountsTransfersMutation = {
  __typename?: "Mutation";
} & {
  postAccountsTransfers?: Maybe<
    {
      __typename?: "CreateApexTransferResponse";
    } & {
      transfer: {
        __typename?: "Transfer";
      } & Pick<
        Transfer,
        | "accountNumber"
        | "amount"
        | "createdAt"
        | "direction"
        | "linkedBankAccountId"
        | "status"
        | "transferId"
        | "transferMethod"
        | "transferNumber"
        | "updatedAt"
      >;
    }
  >;
};
export type PostAccountsTransfersInternalMutationVariables = Exact<{
  accountNumber: Scalars["String"];
  internalTransferRequestInput?: Maybe<InternalTransferRequestInput>;
}>;
export type PostAccountsTransfersInternalMutation = {
  __typename?: "Mutation";
} & {
  postAccountsTransfersInternal?: Maybe<
    {
      __typename?: "InternalTransferResponse";
    } & {
      transfer: {
        __typename?: "Transfer4";
      } & Pick<
        Transfer4,
        | "accountNumber"
        | "amount"
        | "counterparty"
        | "counterpartyId"
        | "createdAt"
        | "direction"
        | "status"
        | "transferId"
        | "updatedAt"
      >;
    }
  >;
};
export type PostAnalysesMutationVariables = Exact<{
  getAnalysesRequestInput?: Maybe<GetAnalysesRequestInput>;
}>;
export type PostAnalysesMutation = {
  __typename?: "Mutation";
} & {
  postAnalyses?: Maybe<
    {
      __typename?: "GetAnalysesResponse";
    } & {
      analyses: Array<
        Maybe<
          {
            __typename?: "Analysis2";
          } & Pick<
            Analysis2,
            | "createdAt"
            | "currentCoupon"
            | "duration"
            | "expenseRatio"
            | "id"
            | "issuerConcentration"
            | "metadata"
            | "netAssetValue"
            | "portfolioId"
            | "risk"
            | "spread"
            | "updatedAt"
            | "yearsToMaturity"
            | "yield"
          > & {
              allocations?: Maybe<
                {
                  __typename?: "Allocations2";
                } & Pick<Allocations2, "country" | "currency"> & {
                    datastreamSubtype?: Maybe<
                      {
                        __typename?: "Allocation4";
                      } & {
                        buckets: Array<
                          Maybe<
                            {
                              __typename?: "Bucket";
                            } & Pick<
                              Bucket,
                              "name" | "percentOfNetAssetValue"
                            > & {
                                contributors?: Maybe<
                                  Array<
                                    Maybe<
                                      {
                                        __typename?: "Contributor";
                                      } & Pick<
                                        Contributor,
                                        | "assetId"
                                        | "percentOfNetAssetValue"
                                        | "positionId"
                                      >
                                    >
                                  >
                                >;
                              }
                          >
                        >;
                      }
                    >;
                    datastreamType?: Maybe<
                      {
                        __typename?: "Allocation4";
                      } & {
                        buckets: Array<
                          Maybe<
                            {
                              __typename?: "Bucket";
                            } & Pick<Bucket, "name" | "percentOfNetAssetValue">
                          >
                        >;
                      }
                    >;
                    debtType?: Maybe<
                      {
                        __typename?: "DebtTypeAllocation";
                      } & {
                        buckets: Array<
                          Maybe<
                            {
                              __typename?: "Bucket";
                            } & Pick<Bucket, "name" | "percentOfNetAssetValue">
                          >
                        >;
                      }
                    >;
                    maturity?: Maybe<
                      {
                        __typename?: "Maturity";
                      } & Pick<
                        Maturity,
                        | "fiveToTenYears"
                        | "greaterThanThirtyYears"
                        | "lessThanOneYear"
                        | "oneToThreeYears"
                        | "other"
                        | "tenToTwentyYears"
                        | "threeToFiveYears"
                        | "twentyToThirtyYears"
                      >
                    >;
                    rating?: Maybe<
                      {
                        __typename?: "RatingAllocation";
                      } & {
                        investmentGrade?: Maybe<
                          {
                            __typename?: "InvestmentGradeRatingAllocation";
                          } & Pick<
                            InvestmentGradeRatingAllocation,
                            "a" | "aa" | "aaa" | "bbb" | "total"
                          >
                        >;
                        nonInvestmentGrade?: Maybe<
                          {
                            __typename?: "NonInvestmentGradeRatingAllocation";
                          } & Pick<
                            NonInvestmentGradeRatingAllocation,
                            "b" | "bb" | "c" | "d" | "nr" | "total"
                          >
                        >;
                      }
                    >;
                    region?: Maybe<
                      {
                        __typename?: "Region";
                      } & Pick<
                        Region,
                        | "africaExNorthAfrica"
                        | "asiaPacificExJapan"
                        | "emergingMarketsAsia"
                        | "emergingMarketsEurope"
                        | "europeExUnitedKingdom"
                        | "japan"
                        | "latinAmerica"
                        | "middleEastNorthAfrica"
                        | "northAmericaExUnitedStates"
                        | "other"
                        | "unitedKingdom"
                        | "unitedStates"
                      >
                    >;
                    sector?: Maybe<
                      {
                        __typename?: "Sector";
                      } & Pick<
                        Sector,
                        | "agency"
                        | "communications"
                        | "consumerGoods"
                        | "energy"
                        | "financials"
                        | "manufacturing"
                        | "municipal"
                        | "other"
                        | "services"
                        | "sovereign"
                        | "supranational"
                        | "transportation"
                      >
                    >;
                  }
              >;
              esgScores?: Maybe<
                {
                  __typename?: "EsgScores";
                } & Pick<
                  EsgScores,
                  "environmental" | "governance" | "social" | "total"
                >
              >;
              estimatedPerformance?: Maybe<
                {
                  __typename?: "EstimatedPerformance2";
                } & Pick<EstimatedPerformance2, "endDate" | "startDate"> & {
                    averageMaximumDrawdown?: Maybe<
                      {
                        __typename?: "AverageMaximumDrawdown2";
                      } & Pick<AverageMaximumDrawdown2, "averageValue"> & {
                          rankedMaximumDrawdowns: Array<
                            Maybe<
                              {
                                __typename?: "RankedMaximumDrawdown";
                              } & Pick<
                                RankedMaximumDrawdown,
                                "endDate" | "rank" | "startDate" | "value"
                              >
                            >
                          >;
                        }
                    >;
                    estimatedMaximumDrawdown: {
                      __typename?: "EstimatedMaximumDrawdown";
                    } & Pick<
                      EstimatedMaximumDrawdown,
                      "endDate" | "startDate" | "value"
                    >;
                    timeSeries: Array<
                      Maybe<
                        {
                          __typename?: "SinglePeriodPerformance";
                        } & Pick<
                          SinglePeriodPerformance,
                          | "cumulativeReturn"
                          | "endDate"
                          | "periodReturn"
                          | "startDate"
                        >
                      >
                    >;
                  }
              >;
              wealthProjections?: Maybe<
                Array<
                  Maybe<
                    {
                      __typename?: "WealthProjection";
                    } & Pick<WealthProjection, "date"> & {
                        percentiles: Array<
                          Maybe<
                            {
                              __typename?: "WealthProjectionPercentile";
                            } & Pick<
                              WealthProjectionPercentile,
                              "cumulativeReturn" | "nav" | "percentile"
                            >
                          >
                        >;
                      }
                  >
                >
              >;
              yieldContributions?: Maybe<
                Array<
                  Maybe<
                    {
                      __typename?: "YieldContribution";
                    } & Pick<
                      YieldContribution,
                      "assetId" | "percentContribution"
                    >
                  >
                >
              >;
            }
        >
      >;
    }
  >;
};
export type PostAnalyzeAssetMutationVariables = Exact<{
  analyzeAssetRequestInput?: Maybe<AnalyzeAssetRequestInput>;
}>;
export type PostAnalyzeAssetMutation = {
  __typename?: "Mutation";
} & {
  postAnalyzeAsset?: Maybe<
    {
      __typename?: "AnalyzeAssetResponse";
    } & {
      analytics: Array<
        Maybe<
          {
            __typename?: "Analytic";
          } & Pick<Analytic, "field" | "value">
        >
      >;
    }
  >;
};
export type PostApiCallRecordsSearchMutationVariables = Exact<{
  searchApiCallRecordsRequestInput?: Maybe<SearchApiCallRecordsRequestInput>;
}>;
export type PostApiCallRecordsSearchMutation = {
  __typename?: "Mutation";
} & {
  postApiCallRecordsSearch?: Maybe<
    {
      __typename?: "SearchApiCallRecordsResponse";
    } & {
      apiCallRecords: Array<
        Maybe<
          {
            __typename?: "ApiCallRecord";
          } & Pick<
            ApiCallRecord,
            | "action"
            | "createdAt"
            | "id"
            | "institutionId"
            | "metadata"
            | "responseStatus"
            | "updatedAt"
            | "url"
          >
        >
      >;
    }
  >;
};
export type PostAssetAnalyzeAssetMutationVariables = Exact<{
  assetId: Scalars["String"];
}>;
export type PostAssetAnalyzeAssetMutation = {
  __typename?: "Mutation";
} & {
  postAssetAnalyzeAsset?: Maybe<
    {
      __typename?: "AnalyzeAssetByIdResponse";
    } & {
      analytics: Array<
        Maybe<
          {
            __typename?: "Analytic";
          } & Pick<Analytic, "field" | "value">
        >
      >;
    }
  >;
};
export type PostAssetCalculateIntradayReturnMutationVariables = Exact<{
  assetId: Scalars["String"];
}>;
export type PostAssetCalculateIntradayReturnMutation = {
  __typename?: "Mutation";
} & {
  postAssetCalculateIntradayReturn?: Maybe<
    {
      __typename?: "CalculateIntradayReturnResponse";
    } & Pick<
      CalculateIntradayReturnResponse,
      "marketValueReturn" | "percentReturn" | "totalReturn"
    >
  >;
};
export type PostAssetProjectCashFlowsMutationVariables = Exact<{
  assetId: Scalars["String"];
}>;
export type PostAssetProjectCashFlowsMutation = {
  __typename?: "Mutation";
} & {
  postAssetProjectCashFlows?: Maybe<
    {
      __typename?: "ProjectCashFlowsByIdResponse";
    } & {
      cashFlows: Array<
        Maybe<
          {
            __typename?: "CashFlow";
          } & Pick<CashFlow, "cashFlow" | "date" | "interest" | "principal">
        >
      >;
    }
  >;
};
export type PostAssetsMutationVariables = Exact<{
  multipartFormDataInput?: Maybe<Scalars["String"]>;
}>;
export type PostAssetsMutation = {
  __typename?: "Mutation";
} & {
  postAssets?: Maybe<
    {
      __typename?: "UploadAssetsResponse";
    } & {
      positions: Array<
        Maybe<
          {
            __typename?: "PositionAllocation";
          } & Pick<
            PositionAllocation,
            "assetId" | "externalId" | "externalIdType" | "percentage"
          >
        >
      >;
    }
  >;
};
export type PostAssetsCalculateRiskMutationVariables = Exact<{
  calculateAssetRiskRequestInput?: Maybe<CalculateAssetRiskRequestInput>;
}>;
export type PostAssetsCalculateRiskMutation = {
  __typename?: "Mutation";
} & {
  postAssetsCalculateRisk?: Maybe<
    {
      __typename?: "CalculateAssetRiskResponse";
    } & Pick<CalculateAssetRiskResponse, "risk">
  >;
};
export type PostAssetsCovariancesMutationVariables = Exact<{
  getAssetCovariancesRequestInput?: Maybe<GetAssetCovariancesRequestInput>;
}>;
export type PostAssetsCovariancesMutation = {
  __typename?: "Mutation";
} & {
  postAssetsCovariances?: Maybe<
    {
      __typename?: "GetAssetCovariancesResponse";
    } & Pick<GetAssetCovariancesResponse, "assetIds" | "matrix">
  >;
};
export type PostAssetsCovariancesClearCacheMutationVariables = Exact<{
  clearAssetCovariancesCacheRequestInput?: Maybe<
    ClearAssetCovariancesCacheRequestInput
  >;
}>;
export type PostAssetsCovariancesClearCacheMutation = {
  __typename?: "Mutation";
} & {
  postAssetsCovariancesClearCache?: Maybe<
    {
      __typename?: "ClearAssetCovariancesCacheResponse";
    } & Pick<ClearAssetCovariancesCacheResponse, "count">
  >;
};
export type PostAssetsListAssetIdsMutationVariables = Exact<{
  listAssetIdsRequestInput?: Maybe<ListAssetIdsRequestInput>;
}>;
export type PostAssetsListAssetIdsMutation = {
  __typename?: "Mutation";
} & {
  postAssetsListAssetIds?: Maybe<
    {
      __typename?: "ListAssetIdsResponse";
    } & Pick<ListAssetIdsResponse, "assetIds">
  >;
};
export type PostAssetsScoreAssetMutationVariables = Exact<{
  scoreAssetRequestInput?: Maybe<ScoreAssetRequestInput>;
}>;
export type PostAssetsScoreAssetMutation = {
  __typename?: "Mutation";
} & {
  postAssetsScoreAsset?: Maybe<
    {
      __typename?: "ScoreAssetResponse";
    } & {
      scores: {
        __typename?: "Scores5";
      } & Pick<
        Scores5,
        "attractiveness" | "credit" | "efficiency" | "liquidity" | "risk"
      >;
    }
  >;
};
export type PostAssetsSearchMutationVariables = Exact<{
  searchAssetRequestInput?: Maybe<SearchAssetRequestInput>;
}>;
export type PostAssetsSearchMutation = {
  __typename?: "Mutation";
} & {
  postAssetsSearch?: Maybe<
    {
      __typename?: "SearchAssetResponse";
    } & Pick<SearchAssetResponse, "end" | "found" | "start"> & {
        results: Array<
          Maybe<
            {
              __typename?: "AssetResult";
            } & Pick<AssetResult, "score"> & {
                asset: {
                  __typename?: "Asset6";
                } & Pick<
                  Asset6,
                  | "assetSubtype"
                  | "assetType"
                  | "country"
                  | "createdAt"
                  | "createdBy"
                  | "currency"
                  | "description"
                  | "displayId"
                  | "id"
                  | "liquid"
                  | "market"
                  | "metadata"
                  | "name"
                  | "price"
                  | "priceDate"
                  | "primaryExchange"
                  | "primaryExchangeMic"
                  | "rating"
                  | "ticker"
                  | "unit"
                  | "updatedAt"
                  | "updatedBy"
                > & {
                    allocation?: Maybe<
                      {
                        __typename?: "Allocation2";
                      } & Pick<Allocation2, "country" | "currency"> & {
                          debtType?: Maybe<
                            {
                              __typename?: "DebtType2";
                            } & Pick<
                              DebtType2,
                              | "assetBackedSecurities"
                              | "bonds"
                              | "debentures"
                              | "mortgageBackedSecurities"
                              | "municipalBonds"
                              | "notes"
                              | "other"
                              | "preferredStock"
                              | "supranationalBonds"
                            >
                          >;
                          maturity?: Maybe<
                            {
                              __typename?: "Maturity";
                            } & Pick<
                              Maturity,
                              | "fiveToTenYears"
                              | "greaterThanThirtyYears"
                              | "lessThanOneYear"
                              | "oneToThreeYears"
                              | "other"
                              | "tenToTwentyYears"
                              | "threeToFiveYears"
                              | "twentyToThirtyYears"
                            >
                          >;
                          rating?: Maybe<
                            {
                              __typename?: "Rating2";
                            } & Pick<
                              Rating2,
                              | "a"
                              | "aa"
                              | "aaa"
                              | "b"
                              | "bb"
                              | "bbb"
                              | "c"
                              | "cc"
                              | "ccc"
                              | "d"
                              | "nr"
                            >
                          >;
                          region?: Maybe<
                            {
                              __typename?: "Region";
                            } & Pick<
                              Region,
                              | "africaExNorthAfrica"
                              | "asiaPacificExJapan"
                              | "emergingMarketsAsia"
                              | "emergingMarketsEurope"
                              | "europeExUnitedKingdom"
                              | "japan"
                              | "latinAmerica"
                              | "middleEastNorthAfrica"
                              | "northAmericaExUnitedStates"
                              | "other"
                              | "unitedKingdom"
                              | "unitedStates"
                            >
                          >;
                          sector?: Maybe<
                            {
                              __typename?: "Sector";
                            } & Pick<
                              Sector,
                              | "agency"
                              | "communications"
                              | "consumerGoods"
                              | "energy"
                              | "financials"
                              | "manufacturing"
                              | "municipal"
                              | "other"
                              | "services"
                              | "sovereign"
                              | "supranational"
                              | "transportation"
                            >
                          >;
                        }
                    >;
                    analytics?: Maybe<
                      {
                        __typename?: "Analytics";
                      } & Pick<
                        Analytics,
                        | "convexity"
                        | "creditBeta"
                        | "currentYield"
                        | "date"
                        | "defaultAdjustedYield"
                        | "distributionYield"
                        | "dividendYield"
                        | "duration"
                        | "effectiveDuration"
                        | "gSpread"
                        | "optionAdjustedSpread"
                        | "recoveryRate"
                        | "secYield"
                        | "source"
                        | "spreadDuration"
                        | "standaloneRisk"
                        | "yearsToMaturity"
                        | "yield"
                        | "yieldToCall"
                        | "yieldToMaturity"
                        | "yieldToWorst"
                        | "zSpread"
                      >
                    >;
                    bond?: Maybe<
                      {
                        __typename?: "Bond5";
                      } & Pick<
                        Bond5,
                        | "accruedInterest"
                        | "active"
                        | "amountOutstanding"
                        | "amountOutstandingDate"
                        | "annuity"
                        | "assetStatus"
                        | "callType"
                        | "callable"
                        | "capType"
                        | "cleanPrice"
                        | "cleanUpCallable"
                        | "convertible"
                        | "countryOfIssue"
                        | "couponClass"
                        | "couponType"
                        | "covered"
                        | "creationUnit"
                        | "currentCoupon"
                        | "datedDate"
                        | "dayCount"
                        | "debtServiceType"
                        | "defeasable"
                        | "denominationIncrement"
                        | "dirtyPrice"
                        | "dualCurrency"
                        | "exDividendCalendarAdjustment"
                        | "exDividendCalendarAdjustmentValue"
                        | "exchangeListed"
                        | "firstCouponDate"
                        | "floating"
                        | "green"
                        | "guaranteed"
                        | "hasWarrantsAttached"
                        | "inflationProtected"
                        | "instrumentType"
                        | "issueCurrency"
                        | "issueDate"
                        | "lastCouponDate"
                        | "lastLiquidEtfConstituentDate"
                        | "maturityDate"
                        | "mediumTermNote"
                        | "minimumDenomination"
                        | "nearestCallPeriodEndDate"
                        | "nearestCallPeriodStartDate"
                        | "nearestCallPrice"
                        | "nextResetDate"
                        | "ordinaryCallNoticePeriodMaximumAmount"
                        | "ordinaryCallNoticePeriodMinimumAmount"
                        | "ordinaryCallNoticePeriodUnits"
                        | "ordinaryCallOptionType"
                        | "ordinaryCallable"
                        | "originalAmountIssued"
                        | "originalBenchmark"
                        | "originalIssuePrice"
                        | "originalIssueSpread"
                        | "originalYieldToMaturity"
                        | "parValue"
                        | "partlyPaid"
                        | "payableInKind"
                        | "performing"
                        | "perpetual"
                        | "priceQuoteConvention"
                        | "priceQuoteMethod"
                        | "priceQuoteRoundingMethod"
                        | "principalCurrency"
                        | "private144a"
                        | "privatePlacement"
                        | "puttable"
                        | "quotedDirty"
                        | "recordDateCalendarAdjustment"
                        | "recordDateCalendarAdjustmentValue"
                        | "redemptionValue"
                        | "seniority"
                        | "series"
                        | "sinkingOrAmortizing"
                        | "sovereignClass"
                        | "state"
                        | "stateTaxExempt"
                        | "straight"
                        | "strippable"
                        | "subjectToAlternativeMinimumTax"
                        | "totalAmountIssued"
                        | "unitedStatesTaxExempt"
                        | "useOfProceeds"
                        | "withholdingTax"
                      > & {
                          classifications?: Maybe<
                            {
                              __typename?: "Classifications";
                            } & Pick<
                              Classifications,
                              | "barclaysLevel1"
                              | "barclaysLevel2"
                              | "barclaysLevel3"
                              | "barclaysLevel4"
                              | "bondhouse"
                              | "datastreamSubtype"
                              | "datastreamType"
                              | "gics"
                            >
                          >;
                          couponResetHistory?: Maybe<
                            Array<
                              Maybe<
                                {
                                  __typename?: "CouponResetHistoryListItem";
                                } & Pick<
                                  CouponResetHistoryListItem,
                                  "effectiveDate" | "rate" | "rateNonAnnual"
                                >
                              >
                            >
                          >;
                          couponSchedule?: Maybe<
                            Array<
                              Maybe<
                                {
                                  __typename?: "CouponScheduleListItem";
                                } & Pick<
                                  CouponScheduleListItem,
                                  | "cap"
                                  | "couponClass"
                                  | "couponFormula"
                                  | "couponRateRoundingMethod"
                                  | "dayCount"
                                  | "effectiveDate"
                                  | "floor"
                                  | "indexDescription"
                                  | "indexHolidayCalendar"
                                  | "numberCutOffDays"
                                  | "paymentBusinessDayRule"
                                  | "paymentCalendarAdjustment"
                                  | "paymentCalendarAdjustmentValue"
                                  | "paymentCurrency"
                                  | "paymentFrequency"
                                  | "paymentHolidayCalendar"
                                  | "resetBusinessDayRule"
                                  | "resetCalendarAdjustment"
                                  | "resetCalendarAdjustmentValue"
                                  | "resetFrequency"
                                  | "resetHolidayCalendar"
                                >
                              >
                            >
                          >;
                          creditEnhancement?: Maybe<
                            {
                              __typename?: "CreditEnhancement";
                            } & Pick<
                              CreditEnhancement,
                              | "additionalCreditType"
                              | "crossDefaultForGuarantor"
                              | "enhancementEffectiveDate"
                              | "enhancementEndDate"
                              | "enhancementLegNumber"
                              | "escrowAccount"
                              | "eventsofDefaultforGuarantor"
                              | "guarantee"
                              | "guarantorPermId"
                              | "guarantorProgram"
                              | "insurance"
                              | "interestCollateralType"
                              | "letterOfCreditExpirationDate"
                              | "negativePledgeForGuarantor"
                              | "otherCovenantsForGuarantor"
                              | "percentInterestCollateralized"
                              | "percentPrincipalCollateralized"
                              | "principalCollateralType"
                            >
                          >;
                          issue?: Maybe<
                            {
                              __typename?: "Issue";
                            } & Pick<
                              Issue,
                              | "active"
                              | "id"
                              | "issueDescription"
                              | "issueIdentifier"
                              | "issuerIdentifier"
                              | "offeringDate"
                              | "offeringDescription"
                              | "private144a"
                              | "privatePlacement"
                              | "totalProgramAmount"
                            >
                          >;
                          issuer?: Maybe<
                            {
                              __typename?: "Issuer5";
                            } & Pick<
                              Issuer5,
                              | "active"
                              | "bankrupt"
                              | "country"
                              | "id"
                              | "immediateParentId"
                              | "legalName"
                              | "longName"
                              | "sector"
                              | "shortName"
                              | "sovereignClass"
                              | "subsector"
                              | "ticker"
                              | "ultimateParentId"
                              | "url"
                            > & {
                                headquartersAddress?: Maybe<
                                  {
                                    __typename?: "HeadquartersAddress";
                                  } & Pick<
                                    HeadquartersAddress,
                                    | "cityOrTown"
                                    | "country"
                                    | "stateOrCountyOrRegion"
                                    | "street1"
                                    | "street2"
                                    | "street3"
                                    | "zipCode"
                                  >
                                >;
                                registeredAddress?: Maybe<
                                  {
                                    __typename?: "HeadquartersAddress";
                                  } & Pick<
                                    HeadquartersAddress,
                                    | "cityOrTown"
                                    | "country"
                                    | "stateOrCountyOrRegion"
                                    | "street1"
                                    | "street2"
                                    | "street3"
                                    | "zipCode"
                                  >
                                >;
                              }
                          >;
                          liquidityCriteria?: Maybe<
                            {
                              __typename?: "LiquidityCriteria";
                            } & Pick<
                              LiquidityCriteria,
                              "hasAdequateQuotes" | "liquidityCriteriaDate"
                            >
                          >;
                          marketData?: Maybe<
                            {
                              __typename?: "MarketData";
                            } & {
                              ejv?: Maybe<
                                {
                                  __typename?: "Ejv";
                                } & Pick<
                                  Ejv,
                                  | "accruedInterest"
                                  | "askPrice"
                                  | "askYield"
                                  | "assetSwapSpread"
                                  | "benchmarkSpread"
                                  | "bidPrice"
                                  | "bidYield"
                                  | "cbeYieldToMaturity"
                                  | "cbeYieldToWorst"
                                  | "closePrice"
                                  | "date"
                                  | "highPrice"
                                  | "lowPrice"
                                  | "openPrice"
                                  | "price"
                                  | "source"
                                  | "swapSpread"
                                  | "volume"
                                  | "yieldToMaturity"
                                  | "yieldToWorst"
                                  | "zSpread"
                                >
                              >;
                            }
                          >;
                          ratings?: Maybe<
                            {
                              __typename?: "Ratings9";
                            } & {
                              snpLongTerm?: Maybe<
                                {
                                  __typename?: "SnpLongTerm";
                                } & Pick<
                                  SnpLongTerm,
                                  "effectiveDate" | "rank" | "rating"
                                >
                              >;
                              snpShortTerm?: Maybe<
                                {
                                  __typename?: "SnpLongTerm";
                                } & Pick<
                                  SnpLongTerm,
                                  "effectiveDate" | "rank" | "rating"
                                >
                              >;
                            }
                          >;
                          richCheap?: Maybe<
                            {
                              __typename?: "RichCheap";
                            } & Pick<
                              RichCheap,
                              | "effectiveDate"
                              | "interquartileRange"
                              | "richCheapBps"
                            >
                          >;
                        }
                    >;
                    equity?: Maybe<
                      {
                        __typename?: "Equity";
                      } & Pick<
                        Equity,
                        | "eps"
                        | "marketCap"
                        | "peRatio"
                        | "shareClass"
                        | "tradeLotRoundSize"
                        | "tradeLotSize"
                      >
                    >;
                    esgScores?: Maybe<
                      {
                        __typename?: "EsgScores2";
                      } & Pick<
                        EsgScores2,
                        | "environmental"
                        | "governance"
                        | "social"
                        | "timestamp"
                        | "total"
                      >
                    >;
                    fund?: Maybe<
                      {
                        __typename?: "Fund5";
                      } & Pick<
                        Fund5,
                        | "assetStatus"
                        | "benchmark"
                        | "classification"
                        | "fundType"
                        | "inceptionDate"
                        | "institutional"
                        | "managementCompany"
                        | "midPrice"
                        | "netAssetValuePerShare"
                        | "netAssets"
                        | "netAssetsDate"
                        | "priceDate"
                        | "regulatoryStructure"
                        | "replicationStrategy"
                        | "tradeLotSize"
                      > & {
                          allocation?: Maybe<
                            {
                              __typename?: "Allocation8";
                            } & Pick<
                              Allocation8,
                              | "currency"
                              | "equityCountry"
                              | "fixedIncomeCountry"
                            > & {
                                asset?: Maybe<
                                  {
                                    __typename?: "Asset2";
                                  } & Pick<
                                    Asset2,
                                    "cash" | "equity" | "fixedIncome" | "other"
                                  >
                                >;
                                equityRegion?: Maybe<
                                  {
                                    __typename?: "Region";
                                  } & Pick<
                                    Region,
                                    | "africaExNorthAfrica"
                                    | "asiaPacificExJapan"
                                    | "emergingMarketsAsia"
                                    | "emergingMarketsEurope"
                                    | "europeExUnitedKingdom"
                                    | "japan"
                                    | "latinAmerica"
                                    | "middleEastNorthAfrica"
                                    | "northAmericaExUnitedStates"
                                    | "other"
                                    | "unitedKingdom"
                                    | "unitedStates"
                                  >
                                >;
                                fixedIncomeRegion?: Maybe<
                                  {
                                    __typename?: "Region";
                                  } & Pick<
                                    Region,
                                    | "africaExNorthAfrica"
                                    | "asiaPacificExJapan"
                                    | "emergingMarketsAsia"
                                    | "emergingMarketsEurope"
                                    | "europeExUnitedKingdom"
                                    | "japan"
                                    | "latinAmerica"
                                    | "middleEastNorthAfrica"
                                    | "northAmericaExUnitedStates"
                                    | "other"
                                    | "unitedKingdom"
                                    | "unitedStates"
                                  >
                                >;
                                gicsSubIndustry?: Maybe<
                                  {
                                    __typename?: "GicsSubIndustry";
                                  } & Pick<
                                    GicsSubIndustry,
                                    | "communicationServices"
                                    | "consumerDiscretionary"
                                    | "consumerStaples"
                                    | "energy"
                                    | "financials"
                                    | "healthCare"
                                    | "industrials"
                                    | "informationTechnology"
                                    | "materials"
                                    | "other"
                                    | "realEstate"
                                    | "utilities"
                                  >
                                >;
                                trbcIndustry?: Maybe<
                                  {
                                    __typename?: "TrbcIndustry";
                                  } & Pick<
                                    TrbcIndustry,
                                    | "basicMaterials"
                                    | "consumerCyclicals"
                                    | "consumerNonCyclicals"
                                    | "energy"
                                    | "financials"
                                    | "healthcare"
                                    | "industrials"
                                    | "other"
                                    | "technology"
                                    | "telecommunicationsServices"
                                    | "utilities"
                                  >
                                >;
                              }
                          >;
                          apexSupport?: Maybe<
                            {
                              __typename?: "ApexSupport";
                            } & Pick<ApexSupport, "supportDate" | "supported">
                          >;
                          fees?: Maybe<
                            {
                              __typename?: "Fees";
                            } & Pick<
                              Fees,
                              | "backLoad"
                              | "frontLoad"
                              | "fundExpenseRatio"
                              | "managementFee"
                              | "marketing12b1Fee"
                              | "performanceFee"
                            >
                          >;
                          focus?: Maybe<
                            {
                              __typename?: "Focus";
                            } & Pick<Focus, "assetClassFocus" | "geoFocus">
                          >;
                          scores?: Maybe<
                            {
                              __typename?: "Scores7";
                            } & {
                              consistentReturn?: Maybe<
                                {
                                  __typename?: "TotalReturn";
                                } & Pick<
                                  TotalReturn,
                                  | "fiveYear"
                                  | "overall"
                                  | "tenYear"
                                  | "threeYear"
                                >
                              >;
                              expense?: Maybe<
                                {
                                  __typename?: "TotalReturn";
                                } & Pick<
                                  TotalReturn,
                                  | "fiveYear"
                                  | "overall"
                                  | "tenYear"
                                  | "threeYear"
                                >
                              >;
                              preservation?: Maybe<
                                {
                                  __typename?: "TotalReturn";
                                } & Pick<
                                  TotalReturn,
                                  | "fiveYear"
                                  | "overall"
                                  | "tenYear"
                                  | "threeYear"
                                >
                              >;
                              taxEfficiency?: Maybe<
                                {
                                  __typename?: "TotalReturn";
                                } & Pick<
                                  TotalReturn,
                                  | "fiveYear"
                                  | "overall"
                                  | "tenYear"
                                  | "threeYear"
                                >
                              >;
                              totalReturn?: Maybe<
                                {
                                  __typename?: "TotalReturn";
                                } & Pick<
                                  TotalReturn,
                                  | "fiveYear"
                                  | "overall"
                                  | "tenYear"
                                  | "threeYear"
                                >
                              >;
                            }
                          >;
                          yields?: Maybe<
                            {
                              __typename?: "Yields";
                            } & Pick<
                              Yields,
                              | "dailySecYield"
                              | "dailySecYieldDate"
                              | "distributionYield"
                              | "dividendYield"
                              | "lipperDistributionYield"
                              | "projectedYield"
                              | "secYield"
                              | "simpleYieldBegin"
                              | "simpleYieldEnd"
                              | "thirtyDayYield"
                              | "trailingTwelveMonthYield"
                            >
                          >;
                        }
                    >;
                    identifiers?: Maybe<
                      {
                        __typename?: "Identifiers";
                      } & Pick<
                        Identifiers,
                        | "apex"
                        | "bbGlobal"
                        | "cik"
                        | "cins"
                        | "cusip"
                        | "isin"
                        | "primaryTicker"
                        | "refinitivAssetId"
                        | "refinitivIssuePermId"
                        | "refinitivLipperId"
                        | "refinitivLipperParentId"
                        | "refinitivLipperPermId"
                        | "sedol"
                        | "valoren"
                      >
                    >;
                    legalEntity?: Maybe<
                      {
                        __typename?: "LegalEntity";
                      } & Pick<
                        LegalEntity,
                        | "issuingLegalEntityId"
                        | "ultimateObligor"
                        | "ultimateObligorId"
                        | "ultimateParent"
                        | "ultimateParentId"
                        | "ultimateParentTickerExchange"
                      >
                    >;
                    priceQuotes?: Maybe<
                      Array<
                        Maybe<
                          {
                            __typename?: "PriceQuotesListItem";
                          } & Pick<
                            PriceQuotesListItem,
                            | "accruedInterest"
                            | "askPrice"
                            | "askYield"
                            | "assetSwapSpread"
                            | "benchmarkSpread"
                            | "bidPrice"
                            | "bidYield"
                            | "cbeYieldToMaturity"
                            | "cbeYieldToWorst"
                            | "closePrice"
                            | "date"
                            | "highPrice"
                            | "lowPrice"
                            | "openPrice"
                            | "price"
                            | "source"
                            | "swapSpread"
                            | "volume"
                            | "yieldToMaturity"
                            | "yieldToWorst"
                            | "zSpread"
                          >
                        >
                      >
                    >;
                    scores?: Maybe<
                      {
                        __typename?: "Scores2";
                      } & Pick<
                        Scores2,
                        | "attractiveness"
                        | "credit"
                        | "efficiency"
                        | "liquidity"
                        | "risk"
                        | "timestamp"
                      >
                    >;
                    universes?: Maybe<
                      {
                        __typename?: "Universes";
                      } & Pick<
                        Universes,
                        "custom" | "general" | "liquid" | "search" | "timestamp"
                      >
                    >;
                  };
              }
          >
        >;
      }
  >;
};
export type PostAssetsTimeSeriesMutationVariables = Exact<{
  createOrReplaceAssetTimeSeriesRequestInput?: Maybe<
    CreateOrReplaceAssetTimeSeriesRequestInput
  >;
}>;
export type PostAssetsTimeSeriesMutation = {
  __typename?: "Mutation";
} & {
  postAssetsTimeSeries?: Maybe<
    {
      __typename?: "CreateOrReplaceAssetTimeSeriesResponse";
    } & Pick<CreateOrReplaceAssetTimeSeriesResponse, "message">
  >;
};
export type PostAssetsTimeSeriesUpdateByExternalIdMutationVariables = Exact<{
  updateAssetTimeSeriesByExternalIdRequestInput?: Maybe<
    UpdateAssetTimeSeriesByExternalIdRequestInput
  >;
}>;
export type PostAssetsTimeSeriesUpdateByExternalIdMutation = {
  __typename?: "Mutation";
} & {
  postAssetsTimeSeriesUpdateByExternalId?: Maybe<
    {
      __typename?: "UpdateAssetTimeSeriesByExternalIdResponse";
    } & Pick<UpdateAssetTimeSeriesByExternalIdResponse, "updated">
  >;
};
export type PostAssetsUpdateByExternalIdMutationVariables = Exact<{
  updateAssetByExternalIdRequestInput?: Maybe<
    UpdateAssetByExternalIdRequestInput
  >;
}>;
export type PostAssetsUpdateByExternalIdMutation = {
  __typename?: "Mutation";
} & {
  postAssetsUpdateByExternalId?: Maybe<
    {
      __typename?: "UpdateAssetByExternalIdResponse";
    } & Pick<UpdateAssetByExternalIdResponse, "created" | "updated">
  >;
};
export type PostCalculateBetasMutationVariables = Exact<{
  calculateBetasRequestInput?: Maybe<CalculateBetasRequestInput>;
}>;
export type PostCalculateBetasMutation = {
  __typename?: "Mutation";
} & {
  postCalculateBetas?: Maybe<
    {
      __typename?: "CalculateBetasResponse";
    } & {
      bonds?: Maybe<
        {
          __typename?: "CorrelationAndBeta";
        } & Pick<CorrelationAndBeta, "beta" | "correlation">
      >;
      gold?: Maybe<
        {
          __typename?: "CorrelationAndBeta";
        } & Pick<CorrelationAndBeta, "beta" | "correlation">
      >;
      highYield?: Maybe<
        {
          __typename?: "CorrelationAndBeta";
        } & Pick<CorrelationAndBeta, "beta" | "correlation">
      >;
      stocks?: Maybe<
        {
          __typename?: "CorrelationAndBeta";
        } & Pick<CorrelationAndBeta, "beta" | "correlation">
      >;
    }
  >;
};
export type PostCompositeDataSearchMutationVariables = Exact<{
  searchCompositeDataRequestInput?: Maybe<SearchCompositeDataRequestInput>;
}>;
export type PostCompositeDataSearchMutation = {
  __typename?: "Mutation";
} & {
  postCompositeDataSearch?: Maybe<
    {
      __typename?: "SearchCompositeDataResponse";
    } & {
      compositeData: Array<
        Maybe<
          {
            __typename?: "CompositeData2";
          } & Pick<
            CompositeData2,
            | "benchmarkCusip"
            | "benchmarkIsin"
            | "currency"
            | "cusip"
            | "discountMargin"
            | "entryDirection"
            | "entryId"
            | "entrySource"
            | "entryTransType"
            | "entryType"
            | "id"
            | "isin"
            | "lastAswSpread"
            | "lastGSpread"
            | "lastISpread"
            | "lastOasSpread"
            | "lastPrice"
            | "lastSpread"
            | "lastTimestamp"
            | "lastYield"
            | "lastZSpread"
            | "liquidityScore"
            | "marketSegment"
            | "mmeYield"
            | "nextCallDate"
            | "numberOfEntries"
            | "updatedAt"
            | "yieldToNextCall"
          >
        >
      >;
    }
  >;
};
export type PostCusipsMutationVariables = Exact<{
  endDate?: Maybe<Scalars["String"]>;
  getByCusipsRequestInput?: Maybe<GetByCusipsRequestInput>;
  includeDeleted?: Maybe<Scalars["Boolean"]>;
  startDate?: Maybe<Scalars["String"]>;
}>;
export type PostCusipsMutation = {
  __typename?: "Mutation";
} & {
  postCusips?: Maybe<
    {
      __typename?: "GetByCusipsResponse";
    } & {
      cusipIceMappings: Array<
        Maybe<
          {
            __typename?: "CusipIceMapping";
          } & Pick<CusipIceMapping, "cusip"> & {
              iceData: Array<
                Maybe<
                  {
                    __typename?: "IncrementalData";
                  } & Pick<
                    IncrementalData,
                    | "benchmarkCusip"
                    | "benchmarkPrice"
                    | "benchmarkPriceType"
                    | "coverBid"
                    | "cusip"
                    | "entryDate"
                    | "entryPrice"
                    | "entrySize"
                    | "entryTime"
                    | "entryType"
                    | "entryUpdateAction"
                    | "executionType"
                    | "hitOrLiftSide"
                    | "id"
                    | "impliedSpread"
                    | "mineFlag"
                    | "minimumBalanceRemaining"
                    | "minimumIncrement"
                    | "minimumQuantity"
                    | "product"
                    | "updatedAt"
                    | "yieldToMaturity"
                    | "yieldToWorst"
                  >
                >
              >;
            }
        >
      >;
    }
  >;
};
export type PostExecutionLogsMutationVariables = Exact<{
  postExecutionLogRequestInput?: Maybe<PostExecutionLogRequestInput>;
}>;
export type PostExecutionLogsMutation = {
  __typename?: "Mutation";
} & {
  postExecutionLogs?: Maybe<
    {
      __typename?: "PostExecutionLogResponse";
    } & {
      executionLog: {
        __typename?: "ExecutionLog";
      } & Pick<
        ExecutionLog,
        | "application"
        | "endpoint"
        | "failure"
        | "id"
        | "orderId"
        | "portfolioId"
        | "responseCode"
        | "state"
        | "timestamp"
        | "tradeId"
      >;
    }
  >;
};
export type PostExternalIdMappingGetAssetsByExternalIdMutationVariables = Exact<{
  getAssetsByExternalIdRequestInput?: Maybe<GetAssetsByExternalIdRequestInput>;
  sourceName: Scalars["String"];
}>;
export type PostExternalIdMappingGetAssetsByExternalIdMutation = {
  __typename?: "Mutation";
} & {
  postExternalIdMappingGetAssetsByExternalId?: Maybe<
    {
      __typename?: "GetAssetsByExternalIdResponse";
    } & {
      assets: Array<
        Maybe<
          {
            __typename?: "Asset5";
          } & Pick<
            Asset5,
            | "assetSubtype"
            | "assetType"
            | "country"
            | "createdAt"
            | "createdBy"
            | "currency"
            | "description"
            | "displayId"
            | "id"
            | "liquid"
            | "market"
            | "metadata"
            | "name"
            | "price"
            | "priceDate"
            | "primaryExchange"
            | "primaryExchangeMic"
            | "rating"
            | "ticker"
            | "unit"
            | "updatedAt"
            | "updatedBy"
          > & {
              allocation?: Maybe<
                {
                  __typename?: "Allocation7";
                } & Pick<Allocation7, "country" | "currency"> & {
                    debtType?: Maybe<
                      {
                        __typename?: "DebtTypeAllocation2";
                      } & Pick<
                        DebtTypeAllocation2,
                        | "assetBackedSecurities"
                        | "bonds"
                        | "debentures"
                        | "mortgageBackedSecurities"
                        | "municipalBonds"
                        | "notes"
                        | "other"
                        | "preferredStock"
                        | "supranationalBonds"
                      >
                    >;
                    maturity?: Maybe<
                      {
                        __typename?: "MaturityAllocation";
                      } & Pick<
                        MaturityAllocation,
                        | "fiveToTenYears"
                        | "greaterThanThirtyYears"
                        | "lessThanOneYear"
                        | "oneToThreeYears"
                        | "other"
                        | "tenToTwentyYears"
                        | "threeToFiveYears"
                        | "twentyToThirtyYears"
                      >
                    >;
                    rating?: Maybe<
                      {
                        __typename?: "RatingAllocation2";
                      } & Pick<
                        RatingAllocation2,
                        | "a"
                        | "aa"
                        | "aaa"
                        | "b"
                        | "bb"
                        | "bbb"
                        | "c"
                        | "cc"
                        | "ccc"
                        | "d"
                        | "nr"
                      >
                    >;
                    region?: Maybe<
                      {
                        __typename?: "RegionAllocation";
                      } & Pick<
                        RegionAllocation,
                        | "africaExNorthAfrica"
                        | "asiaPacificExJapan"
                        | "emergingMarketsAsia"
                        | "emergingMarketsEurope"
                        | "europeExUnitedKingdom"
                        | "japan"
                        | "latinAmerica"
                        | "middleEastNorthAfrica"
                        | "northAmericaExUnitedStates"
                        | "other"
                        | "unitedKingdom"
                        | "unitedStates"
                      >
                    >;
                    sector?: Maybe<
                      {
                        __typename?: "SectorAllocation";
                      } & Pick<
                        SectorAllocation,
                        | "agency"
                        | "communications"
                        | "consumerGoods"
                        | "energy"
                        | "financials"
                        | "manufacturing"
                        | "municipal"
                        | "other"
                        | "services"
                        | "sovereign"
                        | "supranational"
                        | "transportation"
                      >
                    >;
                  }
              >;
              analytics?: Maybe<
                {
                  __typename?: "Analytics";
                } & Pick<
                  Analytics,
                  | "convexity"
                  | "creditBeta"
                  | "currentYield"
                  | "date"
                  | "defaultAdjustedYield"
                  | "distributionYield"
                  | "dividendYield"
                  | "duration"
                  | "effectiveDuration"
                  | "gSpread"
                  | "optionAdjustedSpread"
                  | "recoveryRate"
                  | "secYield"
                  | "source"
                  | "spreadDuration"
                  | "standaloneRisk"
                  | "yearsToMaturity"
                  | "yield"
                  | "yieldToCall"
                  | "yieldToMaturity"
                  | "yieldToWorst"
                  | "zSpread"
                >
              >;
              bond?: Maybe<
                {
                  __typename?: "Bond4";
                } & Pick<
                  Bond4,
                  | "accruedInterest"
                  | "active"
                  | "amountOutstanding"
                  | "amountOutstandingDate"
                  | "annuity"
                  | "assetStatus"
                  | "callType"
                  | "callable"
                  | "capType"
                  | "cleanPrice"
                  | "cleanUpCallable"
                  | "convertible"
                  | "countryOfIssue"
                  | "couponClass"
                  | "couponType"
                  | "covered"
                  | "creationUnit"
                  | "currentCoupon"
                  | "datedDate"
                  | "dayCount"
                  | "debtServiceType"
                  | "defeasable"
                  | "denominationIncrement"
                  | "dirtyPrice"
                  | "dualCurrency"
                  | "exDividendCalendarAdjustment"
                  | "exDividendCalendarAdjustmentValue"
                  | "exchangeListed"
                  | "firstCouponDate"
                  | "floating"
                  | "green"
                  | "guaranteed"
                  | "hasWarrantsAttached"
                  | "inflationProtected"
                  | "instrumentType"
                  | "issueCurrency"
                  | "issueDate"
                  | "lastCouponDate"
                  | "lastLiquidEtfConstituentDate"
                  | "maturityDate"
                  | "mediumTermNote"
                  | "minimumDenomination"
                  | "nearestCallPeriodEndDate"
                  | "nearestCallPeriodStartDate"
                  | "nearestCallPrice"
                  | "nextResetDate"
                  | "ordinaryCallNoticePeriodMaximumAmount"
                  | "ordinaryCallNoticePeriodMinimumAmount"
                  | "ordinaryCallNoticePeriodUnits"
                  | "ordinaryCallOptionType"
                  | "ordinaryCallable"
                  | "originalAmountIssued"
                  | "originalBenchmark"
                  | "originalIssuePrice"
                  | "originalIssueSpread"
                  | "originalYieldToMaturity"
                  | "parValue"
                  | "partlyPaid"
                  | "payableInKind"
                  | "performing"
                  | "perpetual"
                  | "priceQuoteConvention"
                  | "priceQuoteMethod"
                  | "priceQuoteRoundingMethod"
                  | "principalCurrency"
                  | "private144a"
                  | "privatePlacement"
                  | "puttable"
                  | "quotedDirty"
                  | "recordDateCalendarAdjustment"
                  | "recordDateCalendarAdjustmentValue"
                  | "redemptionValue"
                  | "seniority"
                  | "series"
                  | "sinkingOrAmortizing"
                  | "sovereignClass"
                  | "state"
                  | "stateTaxExempt"
                  | "straight"
                  | "strippable"
                  | "subjectToAlternativeMinimumTax"
                  | "totalAmountIssued"
                  | "unitedStatesTaxExempt"
                  | "useOfProceeds"
                  | "withholdingTax"
                > & {
                    classifications?: Maybe<
                      {
                        __typename?: "Classifications";
                      } & Pick<
                        Classifications,
                        | "barclaysLevel1"
                        | "barclaysLevel2"
                        | "barclaysLevel3"
                        | "barclaysLevel4"
                        | "bondhouse"
                        | "datastreamSubtype"
                        | "datastreamType"
                        | "gics"
                      >
                    >;
                    couponResetHistory?: Maybe<
                      Array<
                        Maybe<
                          {
                            __typename?: "CouponResetPeriod";
                          } & Pick<
                            CouponResetPeriod,
                            "effectiveDate" | "rate" | "rateNonAnnual"
                          >
                        >
                      >
                    >;
                    couponSchedule?: Maybe<
                      Array<
                        Maybe<
                          {
                            __typename?: "CouponPeriod";
                          } & Pick<
                            CouponPeriod,
                            | "cap"
                            | "couponClass"
                            | "couponFormula"
                            | "couponRateRoundingMethod"
                            | "dayCount"
                            | "effectiveDate"
                            | "floor"
                            | "indexDescription"
                            | "indexHolidayCalendar"
                            | "numberCutOffDays"
                            | "paymentBusinessDayRule"
                            | "paymentCalendarAdjustment"
                            | "paymentCalendarAdjustmentValue"
                            | "paymentCurrency"
                            | "paymentFrequency"
                            | "paymentHolidayCalendar"
                            | "resetBusinessDayRule"
                            | "resetCalendarAdjustment"
                            | "resetCalendarAdjustmentValue"
                            | "resetFrequency"
                            | "resetHolidayCalendar"
                          >
                        >
                      >
                    >;
                    creditEnhancement?: Maybe<
                      {
                        __typename?: "CreditEnhancement";
                      } & Pick<
                        CreditEnhancement,
                        | "additionalCreditType"
                        | "crossDefaultForGuarantor"
                        | "enhancementEffectiveDate"
                        | "enhancementEndDate"
                        | "enhancementLegNumber"
                        | "escrowAccount"
                        | "eventsofDefaultforGuarantor"
                        | "guarantee"
                        | "guarantorPermId"
                        | "guarantorProgram"
                        | "insurance"
                        | "interestCollateralType"
                        | "letterOfCreditExpirationDate"
                        | "negativePledgeForGuarantor"
                        | "otherCovenantsForGuarantor"
                        | "percentInterestCollateralized"
                        | "percentPrincipalCollateralized"
                        | "principalCollateralType"
                      >
                    >;
                    issue?: Maybe<
                      {
                        __typename?: "Issue";
                      } & Pick<
                        Issue,
                        | "active"
                        | "id"
                        | "issueDescription"
                        | "issueIdentifier"
                        | "issuerIdentifier"
                        | "offeringDate"
                        | "offeringDescription"
                        | "private144a"
                        | "privatePlacement"
                        | "totalProgramAmount"
                      >
                    >;
                    issuer?: Maybe<
                      {
                        __typename?: "Issuer4";
                      } & Pick<
                        Issuer4,
                        | "active"
                        | "bankrupt"
                        | "country"
                        | "id"
                        | "immediateParentId"
                        | "legalName"
                        | "longName"
                        | "sector"
                        | "shortName"
                        | "sovereignClass"
                        | "subsector"
                        | "ticker"
                        | "ultimateParentId"
                        | "url"
                      > & {
                          headquartersAddress?: Maybe<
                            {
                              __typename?: "Address2";
                            } & Pick<
                              Address2,
                              | "cityOrTown"
                              | "country"
                              | "stateOrCountyOrRegion"
                              | "street1"
                              | "street2"
                              | "street3"
                              | "zipCode"
                            >
                          >;
                          ratings?: Maybe<
                            {
                              __typename?: "IssuerRatings";
                            } & {
                              snpLongTerm?: Maybe<
                                {
                                  __typename?: "Rating3";
                                } & Pick<
                                  Rating3,
                                  "effectiveDate" | "rank" | "rating"
                                >
                              >;
                              snpSeniorSecured?: Maybe<
                                {
                                  __typename?: "Rating3";
                                } & Pick<
                                  Rating3,
                                  "effectiveDate" | "rank" | "rating"
                                >
                              >;
                              snpSeniorUnsecured?: Maybe<
                                {
                                  __typename?: "Rating3";
                                } & Pick<
                                  Rating3,
                                  "effectiveDate" | "rank" | "rating"
                                >
                              >;
                              snpShortTerm?: Maybe<
                                {
                                  __typename?: "Rating3";
                                } & Pick<
                                  Rating3,
                                  "effectiveDate" | "rank" | "rating"
                                >
                              >;
                              snpSubordinated?: Maybe<
                                {
                                  __typename?: "Rating3";
                                } & Pick<
                                  Rating3,
                                  "effectiveDate" | "rank" | "rating"
                                >
                              >;
                            }
                          >;
                          registeredAddress?: Maybe<
                            {
                              __typename?: "Address2";
                            } & Pick<
                              Address2,
                              | "cityOrTown"
                              | "country"
                              | "stateOrCountyOrRegion"
                              | "street1"
                              | "street2"
                              | "street3"
                              | "zipCode"
                            >
                          >;
                        }
                    >;
                    liquidityCriteria?: Maybe<
                      {
                        __typename?: "BondLiquidityCriteria";
                      } & Pick<
                        BondLiquidityCriteria,
                        "hasAdequateQuotes" | "liquidityCriteriaDate"
                      >
                    >;
                    marketData?: Maybe<
                      {
                        __typename?: "MarketData2";
                      } & {
                        ejv?: Maybe<
                          {
                            __typename?: "MarketQuote";
                          } & Pick<
                            MarketQuote,
                            | "accruedInterest"
                            | "askPrice"
                            | "askYield"
                            | "assetSwapSpread"
                            | "benchmarkSpread"
                            | "bidPrice"
                            | "bidYield"
                            | "cbeYieldToMaturity"
                            | "cbeYieldToWorst"
                            | "closePrice"
                            | "date"
                            | "highPrice"
                            | "lowPrice"
                            | "openPrice"
                            | "price"
                            | "source"
                            | "swapSpread"
                            | "volume"
                            | "yieldToMaturity"
                            | "yieldToWorst"
                            | "zSpread"
                          >
                        >;
                      }
                    >;
                    richCheap?: Maybe<
                      {
                        __typename?: "RichCheap";
                      } & Pick<
                        RichCheap,
                        "effectiveDate" | "interquartileRange" | "richCheapBps"
                      >
                    >;
                  }
              >;
              equity?: Maybe<
                {
                  __typename?: "Equity";
                } & Pick<
                  Equity,
                  | "eps"
                  | "marketCap"
                  | "peRatio"
                  | "shareClass"
                  | "tradeLotRoundSize"
                  | "tradeLotSize"
                >
              >;
              esgScores?: Maybe<
                {
                  __typename?: "EsgScores2";
                } & Pick<
                  EsgScores2,
                  | "environmental"
                  | "governance"
                  | "social"
                  | "timestamp"
                  | "total"
                >
              >;
              fund?: Maybe<
                {
                  __typename?: "Fund4";
                } & Pick<
                  Fund4,
                  | "assetStatus"
                  | "benchmark"
                  | "classification"
                  | "fundType"
                  | "inceptionDate"
                  | "institutional"
                  | "managementCompany"
                  | "midPrice"
                  | "netAssetValuePerShare"
                  | "netAssets"
                  | "netAssetsDate"
                  | "priceDate"
                  | "regulatoryStructure"
                  | "replicationStrategy"
                  | "tradeLotSize"
                > & {
                    allocation?: Maybe<
                      {
                        __typename?: "FundAllocation";
                      } & Pick<
                        FundAllocation,
                        "currency" | "equityCountry" | "fixedIncomeCountry"
                      > & {
                          asset?: Maybe<
                            {
                              __typename?: "AssetAllocation";
                            } & Pick<
                              AssetAllocation,
                              "cash" | "equity" | "fixedIncome" | "other"
                            >
                          >;
                          equityRegion?: Maybe<
                            {
                              __typename?: "RegionAllocation";
                            } & Pick<
                              RegionAllocation,
                              | "africaExNorthAfrica"
                              | "asiaPacificExJapan"
                              | "emergingMarketsAsia"
                              | "emergingMarketsEurope"
                              | "europeExUnitedKingdom"
                              | "japan"
                              | "latinAmerica"
                              | "middleEastNorthAfrica"
                              | "northAmericaExUnitedStates"
                              | "other"
                              | "unitedKingdom"
                              | "unitedStates"
                            >
                          >;
                          fixedIncomeRegion?: Maybe<
                            {
                              __typename?: "RegionAllocation";
                            } & Pick<
                              RegionAllocation,
                              | "africaExNorthAfrica"
                              | "asiaPacificExJapan"
                              | "emergingMarketsAsia"
                              | "emergingMarketsEurope"
                              | "europeExUnitedKingdom"
                              | "japan"
                              | "latinAmerica"
                              | "middleEastNorthAfrica"
                              | "northAmericaExUnitedStates"
                              | "other"
                              | "unitedKingdom"
                              | "unitedStates"
                            >
                          >;
                          gicsSubIndustry?: Maybe<
                            {
                              __typename?: "GicsSubIndustryAllocation";
                            } & Pick<
                              GicsSubIndustryAllocation,
                              | "communicationServices"
                              | "consumerDiscretionary"
                              | "consumerStaples"
                              | "energy"
                              | "financials"
                              | "healthCare"
                              | "industrials"
                              | "informationTechnology"
                              | "materials"
                              | "other"
                              | "realEstate"
                              | "utilities"
                            >
                          >;
                          trbcIndustry?: Maybe<
                            {
                              __typename?: "TrbcIndustryAllocation";
                            } & Pick<
                              TrbcIndustryAllocation,
                              | "basicMaterials"
                              | "consumerCyclicals"
                              | "consumerNonCyclicals"
                              | "energy"
                              | "financials"
                              | "healthcare"
                              | "industrials"
                              | "other"
                              | "technology"
                              | "telecommunicationsServices"
                              | "utilities"
                            >
                          >;
                        }
                    >;
                    apexSupport?: Maybe<
                      {
                        __typename?: "ApexSupport";
                      } & Pick<ApexSupport, "supportDate" | "supported">
                    >;
                    distributions?: Maybe<
                      {
                        __typename?: "FundDistributions";
                      } & {
                        capitalGain?: Maybe<
                          {
                            __typename?: "CapitalGainDistributions";
                          } & {
                            capitalGain?: Maybe<
                              {
                                __typename?: "FundDistribution";
                              } & Pick<
                                FundDistribution,
                                | "accountingDate"
                                | "exDate"
                                | "exValue"
                                | "paymentDate"
                                | "recordDate"
                                | "reinvestmentDate"
                                | "reinvestmentType"
                                | "reinvestmentValue"
                                | "taxableInterestIncome"
                              >
                            >;
                            collectibles?: Maybe<
                              {
                                __typename?: "FundDistribution";
                              } & Pick<
                                FundDistribution,
                                | "accountingDate"
                                | "exDate"
                                | "exValue"
                                | "paymentDate"
                                | "recordDate"
                                | "reinvestmentDate"
                                | "reinvestmentType"
                                | "reinvestmentValue"
                                | "taxableInterestIncome"
                              >
                            >;
                            longTermCapitalGain?: Maybe<
                              {
                                __typename?: "FundDistribution";
                              } & Pick<
                                FundDistribution,
                                | "accountingDate"
                                | "exDate"
                                | "exValue"
                                | "paymentDate"
                                | "recordDate"
                                | "reinvestmentDate"
                                | "reinvestmentType"
                                | "reinvestmentValue"
                                | "taxableInterestIncome"
                              >
                            >;
                            mediumTermCapitalGain?: Maybe<
                              {
                                __typename?: "FundDistribution";
                              } & Pick<
                                FundDistribution,
                                | "accountingDate"
                                | "exDate"
                                | "exValue"
                                | "paymentDate"
                                | "recordDate"
                                | "reinvestmentDate"
                                | "reinvestmentType"
                                | "reinvestmentValue"
                                | "taxableInterestIncome"
                              >
                            >;
                            nonQualifiedShortTermCapitalGain?: Maybe<
                              {
                                __typename?: "FundDistribution";
                              } & Pick<
                                FundDistribution,
                                | "accountingDate"
                                | "exDate"
                                | "exValue"
                                | "paymentDate"
                                | "recordDate"
                                | "reinvestmentDate"
                                | "reinvestmentType"
                                | "reinvestmentValue"
                                | "taxableInterestIncome"
                              >
                            >;
                            qualifiedShortTermCapitalGain?: Maybe<
                              {
                                __typename?: "FundDistribution";
                              } & Pick<
                                FundDistribution,
                                | "accountingDate"
                                | "exDate"
                                | "exValue"
                                | "paymentDate"
                                | "recordDate"
                                | "reinvestmentDate"
                                | "reinvestmentType"
                                | "reinvestmentValue"
                                | "taxableInterestIncome"
                              >
                            >;
                            returnOfCapital?: Maybe<
                              {
                                __typename?: "FundDistribution";
                              } & Pick<
                                FundDistribution,
                                | "accountingDate"
                                | "exDate"
                                | "exValue"
                                | "paymentDate"
                                | "recordDate"
                                | "reinvestmentDate"
                                | "reinvestmentType"
                                | "reinvestmentValue"
                                | "taxableInterestIncome"
                              >
                            >;
                            shortTermCapitalGain?: Maybe<
                              {
                                __typename?: "FundDistribution";
                              } & Pick<
                                FundDistribution,
                                | "accountingDate"
                                | "exDate"
                                | "exValue"
                                | "paymentDate"
                                | "recordDate"
                                | "reinvestmentDate"
                                | "reinvestmentType"
                                | "reinvestmentValue"
                                | "taxableInterestIncome"
                              >
                            >;
                            superLongTermCapitalGain?: Maybe<
                              {
                                __typename?: "FundDistribution";
                              } & Pick<
                                FundDistribution,
                                | "accountingDate"
                                | "exDate"
                                | "exValue"
                                | "paymentDate"
                                | "recordDate"
                                | "reinvestmentDate"
                                | "reinvestmentType"
                                | "reinvestmentValue"
                                | "taxableInterestIncome"
                              >
                            >;
                          }
                        >;
                        foreignTaxCredit?: Maybe<
                          {
                            __typename?: "ForeignTaxCreditDistributions";
                          } & {
                            foreignTaxCredit?: Maybe<
                              {
                                __typename?: "FundDistribution";
                              } & Pick<
                                FundDistribution,
                                | "accountingDate"
                                | "exDate"
                                | "exValue"
                                | "paymentDate"
                                | "recordDate"
                                | "reinvestmentDate"
                                | "reinvestmentType"
                                | "reinvestmentValue"
                                | "taxableInterestIncome"
                              >
                            >;
                            nonQualifiedForeignTaxPaid?: Maybe<
                              {
                                __typename?: "FundDistribution";
                              } & Pick<
                                FundDistribution,
                                | "accountingDate"
                                | "exDate"
                                | "exValue"
                                | "paymentDate"
                                | "recordDate"
                                | "reinvestmentDate"
                                | "reinvestmentType"
                                | "reinvestmentValue"
                                | "taxableInterestIncome"
                              >
                            >;
                            qualifiedForeignTaxPaid?: Maybe<
                              {
                                __typename?: "FundDistribution";
                              } & Pick<
                                FundDistribution,
                                | "accountingDate"
                                | "exDate"
                                | "exValue"
                                | "paymentDate"
                                | "recordDate"
                                | "reinvestmentDate"
                                | "reinvestmentType"
                                | "reinvestmentValue"
                                | "taxableInterestIncome"
                              >
                            >;
                          }
                        >;
                        income?: Maybe<
                          {
                            __typename?: "IncomeDistributions";
                          } & {
                            aggregateAccrual?: Maybe<
                              {
                                __typename?: "FundDistribution";
                              } & Pick<
                                FundDistribution,
                                | "accountingDate"
                                | "exDate"
                                | "exValue"
                                | "paymentDate"
                                | "recordDate"
                                | "reinvestmentDate"
                                | "reinvestmentType"
                                | "reinvestmentValue"
                                | "taxableInterestIncome"
                              >
                            >;
                            exemptIncome?: Maybe<
                              {
                                __typename?: "FundDistribution";
                              } & Pick<
                                FundDistribution,
                                | "accountingDate"
                                | "exDate"
                                | "exValue"
                                | "paymentDate"
                                | "recordDate"
                                | "reinvestmentDate"
                                | "reinvestmentType"
                                | "reinvestmentValue"
                                | "taxableInterestIncome"
                              >
                            >;
                            incomeDividend?: Maybe<
                              {
                                __typename?: "FundDistribution";
                              } & Pick<
                                FundDistribution,
                                | "accountingDate"
                                | "exDate"
                                | "exValue"
                                | "paymentDate"
                                | "recordDate"
                                | "reinvestmentDate"
                                | "reinvestmentType"
                                | "reinvestmentValue"
                                | "taxableInterestIncome"
                              >
                            >;
                            interestIncome?: Maybe<
                              {
                                __typename?: "FundDistribution";
                              } & Pick<
                                FundDistribution,
                                | "accountingDate"
                                | "exDate"
                                | "exValue"
                                | "paymentDate"
                                | "recordDate"
                                | "reinvestmentDate"
                                | "reinvestmentType"
                                | "reinvestmentValue"
                                | "taxableInterestIncome"
                              >
                            >;
                            nonQualifiedIncomeDividend?: Maybe<
                              {
                                __typename?: "FundDistribution";
                              } & Pick<
                                FundDistribution,
                                | "accountingDate"
                                | "exDate"
                                | "exValue"
                                | "paymentDate"
                                | "recordDate"
                                | "reinvestmentDate"
                                | "reinvestmentType"
                                | "reinvestmentValue"
                                | "taxableInterestIncome"
                              >
                            >;
                            qualifiedIncomeDividend?: Maybe<
                              {
                                __typename?: "FundDistribution";
                              } & Pick<
                                FundDistribution,
                                | "accountingDate"
                                | "exDate"
                                | "exValue"
                                | "paymentDate"
                                | "recordDate"
                                | "reinvestmentDate"
                                | "reinvestmentType"
                                | "reinvestmentValue"
                                | "taxableInterestIncome"
                              >
                            >;
                          }
                        >;
                        repaymentCategory?: Maybe<
                          {
                            __typename?: "RepaymentCategoryDistributions";
                          } & {
                            bonusIssue?: Maybe<
                              {
                                __typename?: "FundDistribution";
                              } & Pick<
                                FundDistribution,
                                | "accountingDate"
                                | "exDate"
                                | "exValue"
                                | "paymentDate"
                                | "recordDate"
                                | "reinvestmentDate"
                                | "reinvestmentType"
                                | "reinvestmentValue"
                                | "taxableInterestIncome"
                              >
                            >;
                            factor?: Maybe<
                              {
                                __typename?: "FundDistribution";
                              } & Pick<
                                FundDistribution,
                                | "accountingDate"
                                | "exDate"
                                | "exValue"
                                | "paymentDate"
                                | "recordDate"
                                | "reinvestmentDate"
                                | "reinvestmentType"
                                | "reinvestmentValue"
                                | "taxableInterestIncome"
                              >
                            >;
                            repayment?: Maybe<
                              {
                                __typename?: "FundDistribution";
                              } & Pick<
                                FundDistribution,
                                | "accountingDate"
                                | "exDate"
                                | "exValue"
                                | "paymentDate"
                                | "recordDate"
                                | "reinvestmentDate"
                                | "reinvestmentType"
                                | "reinvestmentValue"
                                | "taxableInterestIncome"
                              >
                            >;
                            rightsIssue?: Maybe<
                              {
                                __typename?: "FundDistribution";
                              } & Pick<
                                FundDistribution,
                                | "accountingDate"
                                | "exDate"
                                | "exValue"
                                | "paymentDate"
                                | "recordDate"
                                | "reinvestmentDate"
                                | "reinvestmentType"
                                | "reinvestmentValue"
                                | "taxableInterestIncome"
                              >
                            >;
                            split?: Maybe<
                              {
                                __typename?: "FundDistribution";
                              } & Pick<
                                FundDistribution,
                                | "accountingDate"
                                | "exDate"
                                | "exValue"
                                | "paymentDate"
                                | "recordDate"
                                | "reinvestmentDate"
                                | "reinvestmentType"
                                | "reinvestmentValue"
                                | "taxableInterestIncome"
                              >
                            >;
                          }
                        >;
                      }
                    >;
                    fees?: Maybe<
                      {
                        __typename?: "Fees";
                      } & Pick<
                        Fees,
                        | "backLoad"
                        | "frontLoad"
                        | "fundExpenseRatio"
                        | "managementFee"
                        | "marketing12b1Fee"
                        | "performanceFee"
                      >
                    >;
                    focus?: Maybe<
                      {
                        __typename?: "Focus";
                      } & Pick<Focus, "assetClassFocus" | "geoFocus">
                    >;
                    scores?: Maybe<
                      {
                        __typename?: "Scores6";
                      } & {
                        consistentReturn?: Maybe<
                          {
                            __typename?: "Score";
                          } & Pick<
                            Score,
                            "fiveYear" | "overall" | "tenYear" | "threeYear"
                          >
                        >;
                        expense?: Maybe<
                          {
                            __typename?: "Score";
                          } & Pick<
                            Score,
                            "fiveYear" | "overall" | "tenYear" | "threeYear"
                          >
                        >;
                        preservation?: Maybe<
                          {
                            __typename?: "Score";
                          } & Pick<
                            Score,
                            "fiveYear" | "overall" | "tenYear" | "threeYear"
                          >
                        >;
                        taxEfficiency?: Maybe<
                          {
                            __typename?: "Score";
                          } & Pick<
                            Score,
                            "fiveYear" | "overall" | "tenYear" | "threeYear"
                          >
                        >;
                        totalReturn?: Maybe<
                          {
                            __typename?: "Score";
                          } & Pick<
                            Score,
                            "fiveYear" | "overall" | "tenYear" | "threeYear"
                          >
                        >;
                      }
                    >;
                    yields?: Maybe<
                      {
                        __typename?: "FundYields";
                      } & Pick<
                        FundYields,
                        | "dailySecYield"
                        | "dailySecYieldDate"
                        | "distributionYield"
                        | "dividendYield"
                        | "lipperDistributionYield"
                        | "projectedYield"
                        | "secYield"
                        | "simpleYieldBegin"
                        | "simpleYieldEnd"
                        | "thirtyDayYield"
                        | "trailingTwelveMonthYield"
                      >
                    >;
                  }
              >;
              identifiers?: Maybe<
                {
                  __typename?: "Identifiers";
                } & Pick<
                  Identifiers,
                  | "apex"
                  | "bbGlobal"
                  | "cik"
                  | "cins"
                  | "cusip"
                  | "isin"
                  | "primaryTicker"
                  | "refinitivAssetId"
                  | "refinitivIssuePermId"
                  | "refinitivLipperId"
                  | "refinitivLipperParentId"
                  | "refinitivLipperPermId"
                  | "sedol"
                  | "valoren"
                >
              >;
              legalEntity?: Maybe<
                {
                  __typename?: "LegalEntity";
                } & Pick<
                  LegalEntity,
                  | "issuingLegalEntityId"
                  | "ultimateObligor"
                  | "ultimateObligorId"
                  | "ultimateParent"
                  | "ultimateParentId"
                  | "ultimateParentTickerExchange"
                >
              >;
              priceQuotes?: Maybe<
                Array<
                  Maybe<
                    {
                      __typename?: "PriceQuote";
                    } & Pick<
                      PriceQuote,
                      | "accruedInterest"
                      | "askPrice"
                      | "askYield"
                      | "assetSwapSpread"
                      | "benchmarkSpread"
                      | "bidPrice"
                      | "bidYield"
                      | "cbeYieldToMaturity"
                      | "cbeYieldToWorst"
                      | "closePrice"
                      | "date"
                      | "highPrice"
                      | "lowPrice"
                      | "openPrice"
                      | "price"
                      | "source"
                      | "swapSpread"
                      | "volume"
                      | "yieldToMaturity"
                      | "yieldToWorst"
                      | "zSpread"
                    >
                  >
                >
              >;
              scores?: Maybe<
                {
                  __typename?: "RoverScores";
                } & Pick<
                  RoverScores,
                  | "attractiveness"
                  | "credit"
                  | "efficiency"
                  | "liquidity"
                  | "risk"
                  | "timestamp"
                >
              >;
              universes?: Maybe<
                {
                  __typename?: "Universes";
                } & Pick<
                  Universes,
                  "custom" | "general" | "liquid" | "search" | "timestamp"
                >
              >;
            }
        >
      >;
    }
  >;
};
export type PostExternalIdMappingGetExternalIdMappingsMutationVariables = Exact<{
  getExternalIdMappingsRequestInput?: Maybe<GetExternalIdMappingsRequestInput>;
  sourceName: Scalars["String"];
}>;
export type PostExternalIdMappingGetExternalIdMappingsMutation = {
  __typename?: "Mutation";
} & {
  postExternalIdMappingGetExternalIdMappings?: Maybe<
    {
      __typename?: "GetExternalIdMappingsResponse";
    } & {
      externalIdMappings: Array<
        Maybe<
          {
            __typename?: "ExternalIdMappingsListItem";
          } & {
            externalIdMapping?: Maybe<
              {
                __typename?: "ExternalIdMapping";
              } & Pick<
                ExternalIdMapping,
                | "assetId"
                | "createdAt"
                | "externalId"
                | "metadata"
                | "sourceName"
                | "updatedAt"
              >
            >;
          }
        >
      >;
    }
  >;
};
export type PostExternalPortfoliosMutationVariables = Exact<{
  createOrReplaceExternalPortfolioRequestInput?: Maybe<
    CreateOrReplaceExternalPortfolioRequestInput
  >;
}>;
export type PostExternalPortfoliosMutation = {
  __typename?: "Mutation";
} & {
  postExternalPortfolios?: Maybe<
    {
      __typename?: "CreateOrReplaceExternalPortfolioResponse";
    } & Pick<CreateOrReplaceExternalPortfolioResponse, "created" | "updated">
  >;
};
export type PostFilesMutationVariables = Exact<{
  uploadFileRequestInput?: Maybe<UploadFileRequestInput>;
}>;
export type PostFilesMutation = {
  __typename?: "Mutation";
} & {
  postFiles?: Maybe<
    {
      __typename?: "UploadFileResponse";
    } & {
      fileInfo: {
        __typename?: "FileInfo";
      } & Pick<
        FileInfo,
        | "affiliatedResource"
        | "affiliatedResourceId"
        | "createdAt"
        | "documentName"
        | "fileExtension"
        | "fileId"
      >;
    }
  >;
};
export type PostIdentityInvestigationUploadMutationVariables = Exact<{
  sketchId: Scalars["String"];
  uploadIdentityDocumentRequestInput?: Maybe<
    UploadIdentityDocumentRequestInput
  >;
}>;
export type PostIdentityInvestigationUploadMutation = {
  __typename?: "Mutation";
} & {
  postIdentityInvestigationUpload?: Maybe<
    {
      __typename?: "UploadIdentityDocumentResponse";
    } & {
      identityDocument: {
        __typename?: "IdentityDocument";
      } & Pick<
        IdentityDocument,
        "snapId" | "uploadDateTime" | "uploadUserName"
      > & {
          documentType?: Maybe<
            {
              __typename?: "DocumentType";
            } & Pick<DocumentType, "description" | "name">
          >;
        };
    }
  >;
};
export type PostInstitutionApiCallRecordsMutationVariables = Exact<{
  createApiCallRecordRequestInput?: Maybe<CreateApiCallRecordRequestInput>;
  institutionId: Scalars["String"];
}>;
export type PostInstitutionApiCallRecordsMutation = {
  __typename?: "Mutation";
} & {
  postInstitutionApiCallRecords?: Maybe<
    {
      __typename?: "CreateApiCallRecordResponse";
    } & {
      apiCallRecord: {
        __typename?: "ApiCallRecord";
      } & Pick<
        ApiCallRecord,
        | "action"
        | "createdAt"
        | "id"
        | "institutionId"
        | "metadata"
        | "responseStatus"
        | "updatedAt"
        | "url"
      >;
    }
  >;
};
export type PostInstitutionInventoriesMutationVariables = Exact<{
  createOrUpdateInventoryMappingRequestInput?: Maybe<
    CreateOrUpdateInventoryMappingRequestInput
  >;
  institutionId: Scalars["String"];
}>;
export type PostInstitutionInventoriesMutation = {
  __typename?: "Mutation";
} & {
  postInstitutionInventories?: Maybe<
    {
      __typename?: "CreateOrUpdateInventoryMappingResponse";
    } & {
      inventoryMapping: {
        __typename?: "InventoryMapping";
      } & Pick<
        InventoryMapping,
        "assetExplorer" | "bestFit" | "inpaas" | "institutionId" | "muniBestFit"
      >;
    }
  >;
};
export type PostInstitutionInvestorsMutationVariables = Exact<{
  createInvestorMappingRequestInput?: Maybe<CreateInvestorMappingRequestInput>;
  institutionId: Scalars["String"];
}>;
export type PostInstitutionInvestorsMutation = {
  __typename?: "Mutation";
} & {
  postInstitutionInvestors?: Maybe<
    {
      __typename?: "CreateInvestorMappingResponse";
    } & {
      investorMapping: {
        __typename?: "InvestorMapping";
      } & Pick<InvestorMapping, "institutionId" | "investorId">;
    }
  >;
};
export type PostInstitutionPortfoliosMutationVariables = Exact<{
  createPortfolioMappingRequestInput?: Maybe<
    CreatePortfolioMappingRequestInput
  >;
  institutionId: Scalars["String"];
}>;
export type PostInstitutionPortfoliosMutation = {
  __typename?: "Mutation";
} & {
  postInstitutionPortfolios?: Maybe<
    {
      __typename?: "CreatePortfolioMappingResponse";
    } & {
      portfolioMapping: {
        __typename?: "PortfolioMapping";
      } & Pick<PortfolioMapping, "institutionId" | "portfolioId">;
    }
  >;
};
export type PostInstitutionProposalsMutationVariables = Exact<{
  createProposalMappingRequestInput?: Maybe<CreateProposalMappingRequestInput>;
  institutionId: Scalars["String"];
}>;
export type PostInstitutionProposalsMutation = {
  __typename?: "Mutation";
} & {
  postInstitutionProposals?: Maybe<
    {
      __typename?: "CreateProposalMappingResponse";
    } & {
      proposalMapping: {
        __typename?: "ProposalMapping";
      } & Pick<ProposalMapping, "institutionId" | "proposalId">;
    }
  >;
};
export type PostInstitutionRolesMutationVariables = Exact<{
  createRoleMappingRequestInput?: Maybe<CreateRoleMappingRequestInput>;
  institutionId: Scalars["String"];
}>;
export type PostInstitutionRolesMutation = {
  __typename?: "Mutation";
} & {
  postInstitutionRoles?: Maybe<
    {
      __typename?: "CreateRoleMappingResponse";
    } & {
      role: {
        __typename?: "RoleMapping";
      } & Pick<RoleMapping, "institutionId" | "roleId" | "userType">;
    }
  >;
};
export type PostInstitutionUsersMutationVariables = Exact<{
  createUserMappingRequestInput?: Maybe<CreateUserMappingRequestInput>;
  institutionId: Scalars["String"];
}>;
export type PostInstitutionUsersMutation = {
  __typename?: "Mutation";
} & {
  postInstitutionUsers?: Maybe<
    {
      __typename?: "CreateUserMappingResponse";
    } & {
      userMapping: {
        __typename?: "UserMapping";
      } & Pick<
        UserMapping,
        "email" | "institutionId" | "roles" | "userId" | "userType"
      >;
    }
  >;
};
export type PostInstitutionWhitelistsGenerateBestFitMutationVariables = Exact<{
  generateBestFitWhitelistRequestInput?: Maybe<
    GenerateBestFitWhitelistRequestInput
  >;
  institutionId: Scalars["String"];
}>;
export type PostInstitutionWhitelistsGenerateBestFitMutation = {
  __typename?: "Mutation";
} & {
  postInstitutionWhitelistsGenerateBestFit?: Maybe<
    {
      __typename?: "GenerateBestFitWhitelistResponse";
    } & Pick<GenerateBestFitWhitelistResponse, "assetIds">
  >;
};
export type PostInstitutionWhitelistsGenerateMuniBestFitMutationVariables = Exact<{
  generateMuniBestFitWhitelistRequestInput?: Maybe<
    GenerateMuniBestFitWhitelistRequestInput
  >;
  institutionId: Scalars["String"];
}>;
export type PostInstitutionWhitelistsGenerateMuniBestFitMutation = {
  __typename?: "Mutation";
} & {
  postInstitutionWhitelistsGenerateMuniBestFit?: Maybe<
    {
      __typename?: "GenerateMuniBestFitWhitelistResponse";
    } & Pick<GenerateMuniBestFitWhitelistResponse, "assetIds">
  >;
};
export type PostInstitutionsMutationVariables = Exact<{
  createInstitutionRequestInput?: Maybe<CreateInstitutionRequestInput>;
}>;
export type PostInstitutionsMutation = {
  __typename?: "Mutation";
} & {
  postInstitutions?: Maybe<
    {
      __typename?: "CreateInstitutionResponse";
    } & {
      institution: {
        __typename?: "Institution";
      } & Pick<
        Institution,
        "createdAt" | "id" | "metadata" | "name" | "updatedAt"
      > & {
          machineUsers: Array<
            Maybe<
              {
                __typename?: "MachineUser";
              } & Pick<MachineUser, "clientId" | "clientSecret">
            >
          >;
          primaryContact: {
            __typename?: "PrimaryContact";
          } & Pick<PrimaryContact, "email" | "first" | "last">;
        };
    }
  >;
};
export type PostInternalAccountsSearchMutationVariables = Exact<{
  searchApexAccountsRequestInput?: Maybe<SearchApexAccountsRequestInput>;
}>;
export type PostInternalAccountsSearchMutation = {
  __typename?: "Mutation";
} & {
  postInternalAccountsSearch?: Maybe<
    {
      __typename?: "SearchApexAccountsResponse";
    } & {
      apexAccounts: Array<
        Maybe<
          {
            __typename?: "ApexAccount2";
          } & Pick<
            ApexAccount2,
            | "apexAccountNumber"
            | "apexRequestId"
            | "createdAt"
            | "id"
            | "investorId"
            | "metadata"
            | "status"
            | "updatedAt"
          >
        >
      >;
    }
  >;
};
export type PostInternalAchRelationshipSearchMutationVariables = Exact<{
  searchApexAchRelationshipsRequestInput?: Maybe<
    SearchApexAchRelationshipsRequestInput
  >;
}>;
export type PostInternalAchRelationshipSearchMutation = {
  __typename?: "Mutation";
} & {
  postInternalAchRelationshipSearch?: Maybe<
    {
      __typename?: "SearchApexAchRelationshipsResponse";
    } & {
      apexAchRelationships: Array<
        Maybe<
          {
            __typename?: "ApexACHRelationship";
          } & Pick<
            ApexAchRelationship,
            | "accountId"
            | "apexRelationshipId"
            | "createdAt"
            | "id"
            | "linkedBankAccountId"
            | "metadata"
            | "status"
            | "updatedAt"
          >
        >
      >;
    }
  >;
};
export type PostInternalSyncSearchMutationVariables = Exact<{
  internalSyncSearchRequestInput?: Maybe<InternalSyncSearchRequestInput>;
}>;
export type PostInternalSyncSearchMutation = {
  __typename?: "Mutation";
} & {
  postInternalSyncSearch?: Maybe<
    {
      __typename?: "InternalSyncSearchResponse";
    } & Pick<InternalSyncSearchResponse, "timestamp">
  >;
};
export type PostInternalTransfersSearchMutationVariables = Exact<{
  searchApexTransfersRequestInput?: Maybe<SearchApexTransfersRequestInput>;
}>;
export type PostInternalTransfersSearchMutation = {
  __typename?: "Mutation";
} & {
  postInternalTransfersSearch?: Maybe<
    {
      __typename?: "SearchApexTransfersResponse";
    } & {
      apexTransfers: Array<
        Maybe<
          {
            __typename?: "ApexTransfer";
          } & Pick<
            ApexTransfer,
            | "accountId"
            | "achRelationshipId"
            | "amount"
            | "apexTransferId"
            | "createdAt"
            | "direction"
            | "id"
            | "metadata"
            | "status"
            | "transferId"
            | "transferMethod"
            | "updatedAt"
          >
        >
      >;
    }
  >;
};
export type PostInvestorAccountMutationVariables = Exact<{
  investorId: Scalars["String"];
}>;
export type PostInvestorAccountMutation = {
  __typename?: "Mutation";
} & {
  postInvestorAccount?: Maybe<
    {
      __typename?: "InvestorAccount";
    } & {
      apexAccount: {
        __typename?: "ApexAccount2";
      } & Pick<
        ApexAccount2,
        | "apexAccountNumber"
        | "apexRequestId"
        | "createdAt"
        | "id"
        | "investorId"
        | "metadata"
        | "status"
        | "updatedAt"
      >;
    }
  >;
};
export type PostInvestorLinkedBankAccountsMutationVariables = Exact<{
  createLinkedBankAccountRequestInput?: Maybe<
    CreateLinkedBankAccountRequestInput
  >;
  investorId: Scalars["String"];
}>;
export type PostInvestorLinkedBankAccountsMutation = {
  __typename?: "Mutation";
} & {
  postInvestorLinkedBankAccounts?: Maybe<
    {
      __typename?: "CreateLinkedBankAccountResponse";
    } & {
      linkedBankAccount: {
        __typename?: "LinkedBankAccount";
      } & Pick<
        LinkedBankAccount,
        | "accountType"
        | "bankName"
        | "createdAt"
        | "id"
        | "investorId"
        | "mask"
        | "metadata"
        | "status"
        | "updatedAt"
      >;
    }
  >;
};
export type PostInvestorLinkedBankAccountsDirectlyMutationVariables = Exact<{
  createLinkedBankAccountDirectlyRequestInput?: Maybe<
    CreateLinkedBankAccountDirectlyRequestInput
  >;
  investorId: Scalars["String"];
}>;
export type PostInvestorLinkedBankAccountsDirectlyMutation = {
  __typename?: "Mutation";
} & {
  postInvestorLinkedBankAccountsDirectly?: Maybe<
    {
      __typename?: "CreateLinkedBankAccountDirectlyResponse";
    } & {
      linkedBankAccount: {
        __typename?: "LinkedBankAccount";
      } & Pick<
        LinkedBankAccount,
        | "accountType"
        | "bankName"
        | "createdAt"
        | "id"
        | "investorId"
        | "mask"
        | "metadata"
        | "status"
        | "updatedAt"
      >;
    }
  >;
};
export type PostInvestorPortfolioInternalPortfolioFundTransferMutationVariables = Exact<{
  createFundTransferRequestInput?: Maybe<CreateFundTransferRequestInput>;
  investorId: Scalars["String"];
  portfolioId: Scalars["String"];
}>;
export type PostInvestorPortfolioInternalPortfolioFundTransferMutation = {
  __typename?: "Mutation";
} & {
  postInvestorPortfolioInternalPortfolioFundTransfer?: Maybe<
    {
      __typename?: "SettleFundTransferResponse";
    } & {
      ledgerEntry?: Maybe<
        {
          __typename?: "LedgerEntry";
        } & Pick<
          LedgerEntry,
          | "accountNumber"
          | "assetId"
          | "comment"
          | "counterPartyId"
          | "createdAt"
          | "fee"
          | "id"
          | "metadata"
          | "orderId"
          | "portfolioId"
          | "quantity"
          | "status"
          | "tradeId"
          | "tradePrice"
          | "updatedAt"
        > & {
            relatedPositions: Array<
              Maybe<
                {
                  __typename?: "RelatedPosition";
                } & Pick<RelatedPosition, "positionId" | "quantity">
              >
            >;
          }
      >;
    }
  >;
};
export type PostInvestorPortfoliosMutationVariables = Exact<{
  createPortfolioRequestInput?: Maybe<CreatePortfolioRequestInput>;
  investorId: Scalars["String"];
}>;
export type PostInvestorPortfoliosMutation = {
  __typename?: "Mutation";
} & {
  postInvestorPortfolios?: Maybe<
    {
      __typename?: "CreatePortfolioResponse";
    } & {
      portfolio: {
        __typename?: "Portfolio3";
      } & Pick<
        Portfolio3,
        | "accountNumber"
        | "app"
        | "createdAt"
        | "currency"
        | "description"
        | "id"
        | "metadata"
        | "name"
        | "status"
        | "updatedAt"
      > & {
          positions: Array<
            Maybe<
              {
                __typename?: "Position2";
              } & Pick<
                Position2,
                | "assetId"
                | "costBasis"
                | "createdAt"
                | "id"
                | "metadata"
                | "portfolioId"
                | "quantity"
                | "settled"
                | "tradeDate"
                | "unsettled"
                | "updatedAt"
              >
            >
          >;
        };
    }
  >;
};
export type PostInvestorPortfoliosCashPortfolioMutationVariables = Exact<{
  investorId: Scalars["String"];
}>;
export type PostInvestorPortfoliosCashPortfolioMutation = {
  __typename?: "Mutation";
} & {
  postInvestorPortfoliosCashPortfolio?: Maybe<
    {
      __typename?: "CreateInvestorCashPortfolioResponse";
    } & {
      externalAccounts: Array<
        Maybe<
          {
            __typename?: "ExternalAccountsListItem";
          } & Pick<
            ExternalAccountsListItem,
            "externalEntityId" | "externalEntityType"
          >
        >
      >;
      portfolio: {
        __typename?: "Portfolio3";
      } & Pick<
        Portfolio3,
        | "accountNumber"
        | "app"
        | "createdAt"
        | "currency"
        | "description"
        | "id"
        | "metadata"
        | "name"
        | "status"
        | "updatedAt"
      > & {
          positions: Array<
            Maybe<
              {
                __typename?: "Position2";
              } & Pick<
                Position2,
                | "assetId"
                | "costBasis"
                | "createdAt"
                | "id"
                | "metadata"
                | "portfolioId"
                | "quantity"
                | "settled"
                | "tradeDate"
                | "unsettled"
                | "updatedAt"
              >
            >
          >;
        };
    }
  >;
};
export type PostInvestorTransfersMutationVariables = Exact<{
  createTransferRequestInput?: Maybe<CreateTransferRequestInput>;
  investorId: Scalars["String"];
}>;
export type PostInvestorTransfersMutation = {
  __typename?: "Mutation";
} & {
  postInvestorTransfers?: Maybe<
    {
      __typename?: "CreateTransferResponse";
    } & {
      transfer: {
        __typename?: "Transfer3";
      } & Pick<
        Transfer3,
        | "amount"
        | "createdAt"
        | "currency"
        | "direction"
        | "id"
        | "investorId"
        | "ledgerId"
        | "linkedBankAccountId"
        | "metadata"
        | "portfolioId"
        | "status"
        | "transferMethod"
        | "updatedAt"
      > & {
          externalEntity?: Maybe<
            {
              __typename?: "ExternalEntity";
            } & Pick<ExternalEntity, "externalEntityId" | "externalEntityType">
          >;
        };
    }
  >;
};
export type PostInvestorsMutationVariables = Exact<{
  createInvestorRequestInput?: Maybe<CreateInvestorRequestInput>;
}>;
export type PostInvestorsMutation = {
  __typename?: "Mutation";
} & {
  postInvestors?: Maybe<
    {
      __typename?: "CreateInvestorResponse";
    } & {
      investor: {
        __typename?: "Investor";
      } & Pick<
        Investor,
        | "createdAt"
        | "id"
        | "investorType"
        | "metadata"
        | "status"
        | "updatedAt"
      > & {
          investorInfo: {
            __typename?: "InvestorInfo";
          } & Pick<
            InvestorInfo,
            | "birthCountry"
            | "catAccountHolderType"
            | "citizenshipCountry"
            | "familyName"
            | "givenName"
            | "investorType"
            | "isPermanentResident"
            | "issuerDirectCommunication"
            | "organizationName"
            | "title"
          > & {
              applicantSignature: {
                __typename?: "ApplicantSignature2";
              } & Pick<ApplicantSignature2, "eSigned">;
              beneficialOwnersAndOfficers?: Maybe<
                {
                  __typename?: "BeneficialOwnersAndOfficers";
                } & Pick<
                  BeneficialOwnersAndOfficers,
                  "businessClassification"
                > & {
                    beneficialOwners: Array<
                      Maybe<
                        {
                          __typename?: "BeneficialOwners3";
                        } & Pick<
                          BeneficialOwners3,
                          | "dateOfBirth"
                          | "identificationNumber"
                          | "socialSecurityNumber"
                        > & {
                            address: {
                              __typename?: "Address";
                            } & Pick<
                              Address,
                              | "city"
                              | "country"
                              | "postalCode"
                              | "state"
                              | "streetAddress"
                            >;
                            name: {
                              __typename?: "Name";
                            } & Pick<
                              Name,
                              "familyName" | "givenName" | "legalName"
                            >;
                          }
                      >
                    >;
                    officers: Array<
                      Maybe<
                        {
                          __typename?: "Officers2";
                        } & Pick<
                          Officers2,
                          | "dateOfBirth"
                          | "identificationNumber"
                          | "socialSecurityNumber"
                        > & {
                            address: {
                              __typename?: "Address";
                            } & Pick<
                              Address,
                              | "city"
                              | "country"
                              | "postalCode"
                              | "state"
                              | "streetAddress"
                            >;
                            name: {
                              __typename?: "Name";
                            } & Pick<
                              Name,
                              "familyName" | "givenName" | "legalName"
                            >;
                          }
                      >
                    >;
                  }
              >;
              cashAccountAgreement?: Maybe<
                {
                  __typename?: "CashAccountAgreement";
                } & Pick<
                  CashAccountAgreement,
                  | "articlesOfIncorporationSnapId"
                  | "authorizedOfficerName"
                  | "authorizedOfficerTitle"
                  | "corporationName"
                  | "isAuthorizedOfficerESigned"
                  | "isSecretaryESigned"
                  | "secretaryName"
                  | "stateOfIncorporation"
                >
              >;
              contactInformation: {
                __typename?: "ContactInformation";
              } & Pick<
                ContactInformation,
                | "city"
                | "country"
                | "emailAddresses"
                | "phone"
                | "phoneType"
                | "postalCode"
                | "state"
                | "streetAddress"
              >;
              disclosures: {
                __typename?: "Disclosures2";
              } & Pick<
                Disclosures2,
                | "affiliatedApproval"
                | "companySymbols"
                | "firmName"
                | "isAffiliatedExchangeOrFINRA"
                | "isControlPerson"
                | "isPoliticallyExposed"
              > & {
                  interestedParties?: Maybe<
                    Array<
                      Maybe<
                        {
                          __typename?: "InterestedParties4";
                        } & {
                          mailingAddress: {
                            __typename?: "InterestedPartyAddress";
                          } & Pick<
                            InterestedPartyAddress,
                            | "city"
                            | "country"
                            | "postalCode"
                            | "state"
                            | "streetAddress"
                          >;
                          name: {
                            __typename?: "InterestedPartyName";
                          } & Pick<InterestedPartyName, "companyName">;
                        }
                      >
                    >
                  >;
                  politicalExposureDetail?: Maybe<
                    {
                      __typename?: "PoliticalExposureDetail2";
                    } & Pick<
                      PoliticalExposureDetail2,
                      "immediateFamily" | "politicalOrganization"
                    >
                  >;
                };
              employment?: Maybe<
                {
                  __typename?: "Employment2";
                } & Pick<
                  Employment2,
                  "employer" | "employmentStatus" | "positionEmployed"
                >
              >;
              entityDueDiligence?: Maybe<
                {
                  __typename?: "EntityDueDiligence";
                } & Pick<
                  EntityDueDiligence,
                  "assessedRiskRating" | "entityOrAssociatesHaveNegativeNews"
                > & {
                    accountActivity: {
                      __typename?: "AccountActivity";
                    } & Pick<
                      AccountActivity,
                      | "expectedWithdrawalFrequency"
                      | "initialDepositAmount"
                      | "initialDepositSource"
                      | "primaryEntityAccountActivity"
                      | "willTransactForeignBonds"
                      | "willTransactLowPricedSecurities"
                    >;
                    accountInformation: {
                      __typename?: "DueDiligenceAccountInformation2";
                    } & Pick<
                      DueDiligenceAccountInformation2,
                      | "accountName"
                      | "businessLocations"
                      | "countryOfIncorporation"
                      | "hasRelatedAccounts"
                    > & {
                        relatedAccountList?: Maybe<
                          Array<
                            Maybe<
                              {
                                __typename?: "RelatedAccounts2";
                              } & Pick<
                                RelatedAccounts2,
                                "accountNumber" | "entityName"
                              >
                            >
                          >
                        >;
                      };
                    additionalAccounts: {
                      __typename?: "AdditionalAccounts";
                    } & Pick<
                      AdditionalAccounts,
                      | "confirmEntityDoesNotIssueBearerShares"
                      | "institutionNames"
                      | "primaryOngoingFundingSource"
                      | "primaryOngoingFundingSourceClarification"
                      | "scopeOfBusiness"
                      | "scopeOfBusinessClarification"
                    >;
                    politicallyExposedPersons: {
                      __typename?: "PoliticallyExposedPersons";
                    } & Pick<
                      PoliticallyExposedPersons,
                      "isPoliticallyExposed"
                    > & {
                        politicalOfficials?: Maybe<
                          Array<
                            Maybe<
                              {
                                __typename?: "PoliticalOfficials3";
                              } & Pick<
                                PoliticalOfficials3,
                                | "immediateFamily"
                                | "legalName"
                                | "politicalOrganization"
                                | "politicalTitle"
                                | "role"
                              >
                            >
                          >
                        >;
                      };
                  }
              >;
              exemptLegalCustomer?: Maybe<
                {
                  __typename?: "ExemptLegalCustomer";
                } & Pick<
                  ExemptLegalCustomer,
                  "exemption" | "isExemptLegalCustomer"
                >
              >;
              investmentProfile?: Maybe<
                {
                  __typename?: "InvestmentProfile2";
                } & Pick<
                  InvestmentProfile2,
                  | "annualIncomeUSD"
                  | "federalTaxBracketPercent"
                  | "investmentExperience"
                  | "investmentObjective"
                  | "liquidNetWorthUSD"
                  | "riskTolerance"
                  | "totalNetWorthUSD"
                >
              >;
              llcAccountAgreement?: Maybe<
                {
                  __typename?: "LlcAccountAgreement";
                } & Pick<
                  LlcAccountAgreement,
                  | "authorizedSignerName"
                  | "authorizedSignerTitle"
                  | "entityName"
                  | "isAuthorizedSignerESigned"
                  | "resolutionAdoptionDate"
                  | "stateOfOrigin"
                > & {
                    membersAndManagers: Array<
                      Maybe<
                        {
                          __typename?: "MembersAndManagers2";
                        } & Pick<
                          MembersAndManagers2,
                          | "isManager"
                          | "isManagerESigned"
                          | "legalName"
                          | "organizationalRole"
                        >
                      >
                    >;
                  }
              >;
              organization?: Maybe<
                {
                  __typename?: "Organization";
                } & Pick<
                  Organization,
                  | "entityType"
                  | "foreignBankUSAgent"
                  | "isForeignBank"
                  | "isMaintainedForForeignFinancialInstitution"
                  | "uploadedWNineForm"
                  | "usEntity"
                >
              >;
              suitabilityProfile: {
                __typename?: "SuitabilityProfile";
              } & Pick<SuitabilityProfile, "liquidityNeeds" | "timeHorizon">;
              trustedContactInfo: {
                __typename?: "TrustedContactInfo";
              } & Pick<TrustedContactInfo, "trustedContact"> & {
                  trustedContactPerson?: Maybe<
                    {
                      __typename?: "TrustedContactPerson";
                    } & Pick<
                      TrustedContactPerson,
                      "emailAddress" | "familyName" | "givenName"
                    >
                  >;
                };
              wnineTaxForm?: Maybe<
                {
                  __typename?: "WNineTaxForm";
                } & Pick<WNineTaxForm, "exemptPayeeCode" | "exemptionFromFatca">
              >;
            };
        };
    }
  >;
};
export type PostInvestorsTransfersSearchMutationVariables = Exact<{
  searchTransfersRequestInput?: Maybe<SearchTransfersRequestInput>;
}>;
export type PostInvestorsTransfersSearchMutation = {
  __typename?: "Mutation";
} & {
  postInvestorsTransfersSearch?: Maybe<
    {
      __typename?: "SearchTransfersResponse";
    } & {
      transfers?: Maybe<
        Array<
          Maybe<
            {
              __typename?: "Transfer";
            } & Pick<
              Transfer,
              | "accountNumber"
              | "amount"
              | "createdAt"
              | "direction"
              | "linkedBankAccountId"
              | "status"
              | "transferId"
              | "transferMethod"
              | "transferNumber"
              | "updatedAt"
            >
          >
        >
      >;
    }
  >;
};
export type PostOauthTokenMutationVariables = Exact<{
  getAccessTokenRequestInput?: Maybe<GetAccessTokenRequestInput>;
}>;
export type PostOauthTokenMutation = {
  __typename?: "Mutation";
} & {
  postOauthToken?: Maybe<
    {
      __typename?: "GetAccessTokenResponse";
    } & Pick<GetAccessTokenResponse, "accessToken">
  >;
};
export type PostOptimizePortfolioMutationVariables = Exact<{
  optimizePortfolioRequestInput?: Maybe<OptimizePortfolioRequestInput>;
}>;
export type PostOptimizePortfolioMutation = {
  __typename?: "Mutation";
} & {
  postOptimizePortfolio?: Maybe<
    {
      __typename?: "OptimizePortfolioResponse";
    } & {
      orders: Array<
        Maybe<
          {
            __typename?: "Orders6ListItem";
          } & Pick<
            Orders6ListItem,
            | "assetId"
            | "comment"
            | "direction"
            | "fullFillRequired"
            | "goodTillCancel"
            | "metadata"
            | "orderId"
            | "positionId"
            | "priceLimit"
            | "quantity"
            | "spotPrice"
          >
        >
      >;
      portfolio: {
        __typename?: "Portfolio";
      } & Pick<
        Portfolio,
        | "accountNumber"
        | "app"
        | "createdAt"
        | "currency"
        | "description"
        | "id"
        | "metadata"
        | "name"
        | "status"
        | "updatedAt"
      > & {
          positions: Array<
            Maybe<
              {
                __typename?: "PositionsListItem";
              } & Pick<
                PositionsListItem,
                | "assetId"
                | "costBasis"
                | "createdAt"
                | "id"
                | "metadata"
                | "portfolioId"
                | "quantity"
                | "settled"
                | "tradeDate"
                | "unsettled"
                | "updatedAt"
              >
            >
          >;
        };
    }
  >;
};
export type PostOrdersMutationVariables = Exact<{
  createTrafixOrderRequestInput?: Maybe<CreateTrafixOrderRequestInput>;
}>;
export type PostOrdersMutation = {
  __typename?: "Mutation";
} & {
  postOrders?: Maybe<
    {
      __typename?: "CreateTrafixOrderResponse";
    } & {
      trafixOrder: {
        __typename?: "TrafixOrder";
      } & Pick<
        TrafixOrder,
        | "assetId"
        | "createdAt"
        | "direction"
        | "fill"
        | "fullFillRequired"
        | "goodTillCancel"
        | "orderId"
        | "portfolioId"
        | "priceLimit"
        | "quantity"
        | "reason"
        | "status"
        | "ticker"
        | "trafixOrderId"
        | "updatedAt"
      >;
    }
  >;
};
export type PostOrdersSearchMutationVariables = Exact<{
  searchOrdersRequestInput?: Maybe<SearchOrdersRequestInput>;
}>;
export type PostOrdersSearchMutation = {
  __typename?: "Mutation";
} & {
  postOrdersSearch?: Maybe<
    {
      __typename?: "SearchOrdersResponse";
    } & {
      orders?: Maybe<
        Array<
          Maybe<
            {
              __typename?: "Order2";
            } & Pick<
              Order2,
              | "assetId"
              | "assignedTo"
              | "comment"
              | "createdAt"
              | "filled"
              | "fullFillRequired"
              | "goodTillCancel"
              | "id"
              | "metadata"
              | "portfolioId"
              | "priceLimit"
              | "quantity"
              | "spotPrice"
              | "status"
              | "updatedAt"
            >
          >
        >
      >;
    }
  >;
};
export type PostPortfolioCloseMutationVariables = Exact<{
  closePortfolioRequestInput?: Maybe<ClosePortfolioRequestInput>;
  institution: Scalars["String"];
  portfolioId: Scalars["String"];
}>;
export type PostPortfolioCloseMutation = {
  __typename?: "Mutation";
} & {
  postPortfolioClose?: Maybe<
    {
      __typename?: "ClosePortfolioResponse";
    } & Pick<ClosePortfolioResponse, "closed" | "timestamp">
  >;
};
export type PostPortfolioDeliveryInstructionMutationVariables = Exact<{
  createPortfolioDeliveryInstructionRequestInput?: Maybe<
    CreatePortfolioDeliveryInstructionRequestInput
  >;
  portfolioId: Scalars["String"];
}>;
export type PostPortfolioDeliveryInstructionMutation = {
  __typename?: "Mutation";
} & {
  postPortfolioDeliveryInstruction?: Maybe<
    {
      __typename?: "CreatePortfolioDeliveryInstructionResponse";
    } & {
      portfolioDeliveryInstruction: {
        __typename?: "PortfolioDeliveryInstruction";
      } & Pick<
        PortfolioDeliveryInstruction,
        | "cashOnly"
        | "createdAt"
        | "id"
        | "investorId"
        | "metadata"
        | "portfolioId"
        | "updatedAt"
      > & {
          instructions: Array<
            Maybe<
              {
                __typename?: "ExternalEntity";
              } & Pick<
                ExternalEntity,
                "externalEntityId" | "externalEntityType"
              >
            >
          >;
        };
    }
  >;
};
export type PostPortfolioFundTransferSettleMutationVariables = Exact<{
  id: Scalars["String"];
  ledgerEntryId: Scalars["String"];
  settleFundTransferRequestInput?: Maybe<SettleFundTransferRequestInput>;
}>;
export type PostPortfolioFundTransferSettleMutation = {
  __typename?: "Mutation";
} & {
  postPortfolioFundTransferSettle?: Maybe<
    {
      __typename?: "SettleFundTransferResponse";
    } & {
      ledgerEntry?: Maybe<
        {
          __typename?: "LedgerEntry";
        } & Pick<
          LedgerEntry,
          | "accountNumber"
          | "assetId"
          | "comment"
          | "counterPartyId"
          | "createdAt"
          | "fee"
          | "id"
          | "metadata"
          | "orderId"
          | "portfolioId"
          | "quantity"
          | "status"
          | "tradeId"
          | "tradePrice"
          | "updatedAt"
        > & {
            relatedPositions: Array<
              Maybe<
                {
                  __typename?: "RelatedPosition";
                } & Pick<RelatedPosition, "positionId" | "quantity">
              >
            >;
          }
      >;
    }
  >;
};
export type PostPortfolioFundTransfersMutationVariables = Exact<{
  createFundTransferRequestInput?: Maybe<CreateFundTransferRequestInput>;
  id: Scalars["String"];
}>;
export type PostPortfolioFundTransfersMutation = {
  __typename?: "Mutation";
} & {
  postPortfolioFundTransfers?: Maybe<
    {
      __typename?: "CreateFundTransferResponse";
    } & Pick<CreateFundTransferResponse, "accepted"> & {
        ledgerEntry: {
          __typename?: "LedgerEntry";
        } & Pick<
          LedgerEntry,
          | "accountNumber"
          | "assetId"
          | "comment"
          | "counterPartyId"
          | "createdAt"
          | "fee"
          | "id"
          | "metadata"
          | "orderId"
          | "portfolioId"
          | "quantity"
          | "status"
          | "tradeId"
          | "tradePrice"
          | "updatedAt"
        > & {
            relatedPositions: Array<
              Maybe<
                {
                  __typename?: "RelatedPosition";
                } & Pick<RelatedPosition, "positionId" | "quantity">
              >
            >;
          };
      }
  >;
};
export type PostPortfolioMappingMutationVariables = Exact<{
  createOrReplacePortfolioMappingRequestInput?: Maybe<
    CreateOrReplacePortfolioMappingRequestInput
  >;
  portfolioId: Scalars["String"];
}>;
export type PostPortfolioMappingMutation = {
  __typename?: "Mutation";
} & {
  postPortfolioMapping?: Maybe<
    {
      __typename?: "CreateOrReplacePortfolioMappingResponse";
    } & Pick<CreateOrReplacePortfolioMappingResponse, "created" | "updated">
  >;
};
export type PostPortfolioOrdersMutationVariables = Exact<{
  createOrderRequestInput?: Maybe<CreateOrderRequestInput>;
  portfolioId: Scalars["String"];
}>;
export type PostPortfolioOrdersMutation = {
  __typename?: "Mutation";
} & {
  postPortfolioOrders?: Maybe<
    {
      __typename?: "CreateOrderResponse";
    } & {
      order: {
        __typename?: "Order2";
      } & Pick<
        Order2,
        | "assetId"
        | "assignedTo"
        | "comment"
        | "createdAt"
        | "filled"
        | "fullFillRequired"
        | "goodTillCancel"
        | "id"
        | "metadata"
        | "portfolioId"
        | "priceLimit"
        | "quantity"
        | "spotPrice"
        | "status"
        | "updatedAt"
      >;
    }
  >;
};
export type PostPortfolioOrdersRebalanceMutationVariables = Exact<{
  portfolioId: Scalars["String"];
  rebalanceOrdersRequestInput?: Maybe<RebalanceOrdersRequestInput>;
}>;
export type PostPortfolioOrdersRebalanceMutation = {
  __typename?: "Mutation";
} & {
  postPortfolioOrdersRebalance?: Maybe<
    {
      __typename?: "RebalanceOrdersResponse";
    } & Pick<RebalanceOrdersResponse, "errors"> & {
        placedOrders: Array<
          Maybe<
            {
              __typename?: "Order2";
            } & Pick<
              Order2,
              | "assetId"
              | "assignedTo"
              | "comment"
              | "createdAt"
              | "filled"
              | "fullFillRequired"
              | "goodTillCancel"
              | "id"
              | "metadata"
              | "portfolioId"
              | "priceLimit"
              | "quantity"
              | "spotPrice"
              | "status"
              | "updatedAt"
            >
          >
        >;
        stagedOrders: Array<
          Maybe<
            {
              __typename?: "Order2";
            } & Pick<
              Order2,
              | "assetId"
              | "assignedTo"
              | "comment"
              | "createdAt"
              | "filled"
              | "fullFillRequired"
              | "goodTillCancel"
              | "id"
              | "metadata"
              | "portfolioId"
              | "priceLimit"
              | "quantity"
              | "spotPrice"
              | "status"
              | "updatedAt"
            >
          >
        >;
      }
  >;
};
export type PostPortfolioPreferencesMutationVariables = Exact<{
  portfolioId: Scalars["String"];
  putPreferencesRequestInput?: Maybe<PutPreferencesRequestInput>;
}>;
export type PostPortfolioPreferencesMutation = {
  __typename?: "Mutation";
} & Pick<Mutation, "postPortfolioPreferences">;
export type PostPortfolioTradeSettleMutationVariables = Exact<{
  id: Scalars["String"];
  portfolioId: Scalars["String"];
  settleTradeRequestInput?: Maybe<SettleTradeRequestInput>;
}>;
export type PostPortfolioTradeSettleMutation = {
  __typename?: "Mutation";
} & {
  postPortfolioTradeSettle?: Maybe<
    {
      __typename?: "SettleTradeResponse";
    } & {
      ledgerEntries?: Maybe<
        Array<
          Maybe<
            {
              __typename?: "LedgerEntry";
            } & Pick<
              LedgerEntry,
              | "accountNumber"
              | "assetId"
              | "comment"
              | "counterPartyId"
              | "createdAt"
              | "fee"
              | "id"
              | "metadata"
              | "orderId"
              | "portfolioId"
              | "quantity"
              | "status"
              | "tradeId"
              | "tradePrice"
              | "updatedAt"
            > & {
                relatedPositions: Array<
                  Maybe<
                    {
                      __typename?: "RelatedPosition";
                    } & Pick<RelatedPosition, "positionId" | "quantity">
                  >
                >;
              }
          >
        >
      >;
    }
  >;
};
export type PostPortfolioTradesMutationVariables = Exact<{
  createTradeRequestInput?: Maybe<CreateTradeRequestInput>;
  portfolioId: Scalars["String"];
}>;
export type PostPortfolioTradesMutation = {
  __typename?: "Mutation";
} & {
  postPortfolioTrades?: Maybe<
    {
      __typename?: "CreateTradeResponse";
    } & {
      ledgerEntries: Array<
        Maybe<
          {
            __typename?: "LedgerEntry";
          } & Pick<
            LedgerEntry,
            | "accountNumber"
            | "assetId"
            | "comment"
            | "counterPartyId"
            | "createdAt"
            | "fee"
            | "id"
            | "metadata"
            | "orderId"
            | "portfolioId"
            | "quantity"
            | "status"
            | "tradeId"
            | "tradePrice"
            | "updatedAt"
          > & {
              relatedPositions: Array<
                Maybe<
                  {
                    __typename?: "RelatedPosition";
                  } & Pick<RelatedPosition, "positionId" | "quantity">
                >
              >;
            }
        >
      >;
    }
  >;
};
export type PostPortfoliosMutationVariables = Exact<{
  createPortfolioRequestInput?: Maybe<CreatePortfolioRequestInput>;
}>;
export type PostPortfoliosMutation = {
  __typename?: "Mutation";
} & {
  postPortfolios?: Maybe<
    {
      __typename?: "CreatePortfolioResponse";
    } & {
      portfolio: {
        __typename?: "Portfolio3";
      } & Pick<
        Portfolio3,
        | "accountNumber"
        | "app"
        | "createdAt"
        | "currency"
        | "description"
        | "id"
        | "metadata"
        | "name"
        | "status"
        | "updatedAt"
      > & {
          positions: Array<
            Maybe<
              {
                __typename?: "Position2";
              } & Pick<
                Position2,
                | "assetId"
                | "costBasis"
                | "createdAt"
                | "id"
                | "metadata"
                | "portfolioId"
                | "quantity"
                | "settled"
                | "tradeDate"
                | "unsettled"
                | "updatedAt"
              >
            >
          >;
        };
    }
  >;
};
export type PostPortfoliosCalculateRiskMutationVariables = Exact<{
  calculatePortfolioRiskRequestInput?: Maybe<
    CalculatePortfolioRiskRequestInput
  >;
  calculateVar?: Maybe<Scalars["Boolean"]>;
}>;
export type PostPortfoliosCalculateRiskMutation = {
  __typename?: "Mutation";
} & {
  postPortfoliosCalculateRisk?: Maybe<
    {
      __typename?: "CalculatePortfolioRiskResponse";
    } & Pick<CalculatePortfolioRiskResponse, "risk"> & {
        var?: Maybe<
          Array<
            Maybe<
              {
                __typename?: "VarResult";
              } & Pick<
                VarResult,
                | "confidence"
                | "timePeriodAmount"
                | "timePeriodUnits"
                | "units"
                | "value"
              >
            >
          >
        >;
      }
  >;
};
export type PostPortfoliosCovariancesMutationVariables = Exact<{
  getPortfolioCovariancesRequestInput?: Maybe<
    GetPortfolioCovariancesRequestInput
  >;
}>;
export type PostPortfoliosCovariancesMutation = {
  __typename?: "Mutation";
} & {
  postPortfoliosCovariances?: Maybe<
    {
      __typename?: "GetPortfolioCovariancesResponse";
    } & Pick<GetPortfolioCovariancesResponse, "matrix" | "portfolioIds">
  >;
};
export type PostPortfoliosDeliveryInstructionSearchMutationVariables = Exact<{
  searchPorfolioDeliveryInstructionsRequestInput?: Maybe<
    SearchPorfolioDeliveryInstructionsRequestInput
  >;
}>;
export type PostPortfoliosDeliveryInstructionSearchMutation = {
  __typename?: "Mutation";
} & {
  postPortfoliosDeliveryInstructionSearch?: Maybe<
    {
      __typename?: "SearchPortfolioDeliveryInstructionsResponse";
    } & {
      deliveryInstructions?: Maybe<
        Array<
          Maybe<
            {
              __typename?: "PortfolioDeliveryInstruction";
            } & Pick<
              PortfolioDeliveryInstruction,
              | "cashOnly"
              | "createdAt"
              | "id"
              | "investorId"
              | "metadata"
              | "portfolioId"
              | "updatedAt"
            > & {
                instructions: Array<
                  Maybe<
                    {
                      __typename?: "ExternalEntity";
                    } & Pick<
                      ExternalEntity,
                      "externalEntityId" | "externalEntityType"
                    >
                  >
                >;
              }
          >
        >
      >;
    }
  >;
};
export type PostPortfoliosStressScenariosMutationVariables = Exact<{
  getPortfolioStressScenariosRequestInput?: Maybe<
    GetPortfolioStressScenariosRequestInput
  >;
}>;
export type PostPortfoliosStressScenariosMutation = {
  __typename?: "Mutation";
} & {
  postPortfoliosStressScenarios?: Maybe<
    {
      __typename?: "GetPortfolioStressScenariosResponse";
    } & {
      equitiesDownTenPercent?: Maybe<
        {
          __typename?: "StressScenarioReturn";
        } & Pick<StressScenarioReturn, "returns">
      >;
      housingCrisis?: Maybe<
        {
          __typename?: "StressScenarioReturn";
        } & Pick<StressScenarioReturn, "returns">
      >;
      ratesUpOnePercent?: Maybe<
        {
          __typename?: "StressScenarioReturn";
        } & Pick<StressScenarioReturn, "returns">
      >;
      taperTantrum?: Maybe<
        {
          __typename?: "StressScenarioReturn";
        } & Pick<StressScenarioReturn, "returns">
      >;
    }
  >;
};
export type PostProjectCashFlowsMutationVariables = Exact<{
  projectCashFlowsRequestInput?: Maybe<ProjectCashFlowsRequestInput>;
}>;
export type PostProjectCashFlowsMutation = {
  __typename?: "Mutation";
} & {
  postProjectCashFlows?: Maybe<
    {
      __typename?: "ProjectCashFlowsResponse";
    } & {
      cashFlows: Array<
        Maybe<
          {
            __typename?: "CashFlow";
          } & Pick<CashFlow, "cashFlow" | "date" | "interest" | "principal">
        >
      >;
    }
  >;
};
export type PostProposalAcceptMutationVariables = Exact<{
  acceptProposalRequestInput?: Maybe<AcceptProposalRequestInput>;
  institution: Scalars["String"];
  proposalId: Scalars["String"];
}>;
export type PostProposalAcceptMutation = {
  __typename?: "Mutation";
} & {
  postProposalAccept?: Maybe<
    {
      __typename?: "AcceptProposalResponse";
    } & {
      goal: {
        __typename?: "Goal";
      } & Pick<Goal, "income" | "risk" | "yield">;
      portfolio: {
        __typename?: "Portfolio2";
      } & Pick<
        Portfolio2,
        "createdAt" | "currency" | "id" | "metadata" | "name" | "updatedAt"
      > & {
          positions: Array<
            Maybe<
              {
                __typename?: "Position";
              } & Pick<
                Position,
                | "assetId"
                | "id"
                | "marketValue"
                | "name"
                | "price"
                | "quantity"
                | "weight"
                | "yield"
              > & {
                  publicIdentifiers: {
                    __typename?: "PublicIdentifiers";
                  } & Pick<
                    PublicIdentifiers,
                    "cusip" | "isin" | "sedol" | "ticker"
                  >;
                }
            >
          >;
        };
    }
  >;
};
export type PostProposalsMinMaxRiskMutationVariables = Exact<{
  institution: Scalars["String"];
}>;
export type PostProposalsMinMaxRiskMutation = {
  __typename?: "Mutation";
} & {
  postProposalsMinMaxRisk?: Maybe<
    {
      __typename?: "GetMinMaxRiskResponse";
    } & Pick<GetMinMaxRiskResponse, "maxRisk" | "minRisk">
  >;
};
export type PostProposalsMinMaxYieldMutationVariables = Exact<{
  institution: Scalars["String"];
}>;
export type PostProposalsMinMaxYieldMutation = {
  __typename?: "Mutation";
} & {
  postProposalsMinMaxYield?: Maybe<
    {
      __typename?: "GetMinMaxYieldResponse";
    } & Pick<GetMinMaxYieldResponse, "maxYield" | "minYield">
  >;
};
export type PostProposalsNewMutationVariables = Exact<{
  newProposalRequestInput?: Maybe<NewProposalRequestInput>;
}>;
export type PostProposalsNewMutation = {
  __typename?: "Mutation";
} & {
  postProposalsNew?: Maybe<
    {
      __typename?: "NewProposalResponse";
    } & {
      proposal: {
        __typename?: "Proposal";
      } & Pick<Proposal, "proposalId" | "updatedAt"> & {
          commentary: Array<
            Maybe<
              {
                __typename?: "CommentaryItem";
              } & Pick<CommentaryItem, "content" | "topic">
            >
          >;
          incomePortfoliosAnalysis: {
            __typename?: "IncomePortfoliosAnalysis";
          } & Pick<
            IncomePortfoliosAnalysis,
            | "afterTaxYield"
            | "expenseRatio"
            | "income"
            | "maxDrawdown"
            | "risk"
            | "yield"
          > & {
              commentary?: Maybe<
                Array<
                  Maybe<
                    {
                      __typename?: "CommentaryItem";
                    } & Pick<CommentaryItem, "content" | "topic">
                  >
                >
              >;
              comparisons?: Maybe<
                Array<
                  Maybe<
                    {
                      __typename?: "Comparison";
                    } & Pick<
                      Comparison,
                      | "average"
                      | "comparisonType"
                      | "difference"
                      | "inpaas"
                      | "percentageDifference"
                    >
                  >
                >
              >;
            };
          orders?: Maybe<
            Array<
              Maybe<
                {
                  __typename?: "Order";
                } & Pick<
                  Order,
                  "assetId" | "direction" | "marketValue" | "quantity"
                >
              >
            >
          >;
          originalIncomePortfoliosAnalysis?: Maybe<
            {
              __typename?: "IncomePortfoliosAnalysis";
            } & Pick<
              IncomePortfoliosAnalysis,
              | "afterTaxYield"
              | "expenseRatio"
              | "income"
              | "maxDrawdown"
              | "risk"
              | "yield"
            > & {
                commentary?: Maybe<
                  Array<
                    Maybe<
                      {
                        __typename?: "CommentaryItem";
                      } & Pick<CommentaryItem, "content" | "topic">
                    >
                  >
                >;
                comparisons?: Maybe<
                  Array<
                    Maybe<
                      {
                        __typename?: "Comparison";
                      } & Pick<
                        Comparison,
                        | "average"
                        | "comparisonType"
                        | "difference"
                        | "inpaas"
                        | "percentageDifference"
                      >
                    >
                  >
                >;
              }
          >;
          portfolio: {
            __typename?: "Portfolio";
          } & Pick<
            Portfolio,
            | "accountNumber"
            | "app"
            | "createdAt"
            | "currency"
            | "description"
            | "id"
            | "metadata"
            | "name"
            | "status"
            | "updatedAt"
          > & {
              positions: Array<
                Maybe<
                  {
                    __typename?: "PositionsListItem";
                  } & Pick<
                    PositionsListItem,
                    | "assetId"
                    | "costBasis"
                    | "createdAt"
                    | "id"
                    | "metadata"
                    | "portfolioId"
                    | "quantity"
                    | "settled"
                    | "tradeDate"
                    | "unsettled"
                    | "updatedAt"
                  >
                >
              >;
            };
          proposalRequest: {
            __typename?: "ProposalRequest";
          } & Pick<
            ProposalRequest,
            "investmentAmount" | "portfolioId" | "whitelist"
          > & {
              constraints?: Maybe<
                {
                  __typename?: "Constraints";
                } & Pick<Constraints, "maximumWeight" | "minimumWeight">
              >;
              goal: {
                __typename?: "Goal";
              } & Pick<Goal, "income" | "risk" | "yield">;
              taxBrackets?: Maybe<
                {
                  __typename?: "TaxBrackets";
                } & Pick<TaxBrackets, "federalTaxRate" | "stateTaxRate">
              >;
            };
        };
    }
  >;
};
export type PostProposalsPortfolioRebalanceMutationVariables = Exact<{
  portfolioId: Scalars["String"];
  rebalanceProposalRequestInput?: Maybe<RebalanceProposalRequestInput>;
}>;
export type PostProposalsPortfolioRebalanceMutation = {
  __typename?: "Mutation";
} & {
  postProposalsPortfolioRebalance?: Maybe<
    {
      __typename?: "RebalanceProposalResponse";
    } & {
      proposal: {
        __typename?: "Proposal";
      } & Pick<Proposal, "proposalId" | "updatedAt"> & {
          commentary: Array<
            Maybe<
              {
                __typename?: "CommentaryItem";
              } & Pick<CommentaryItem, "content" | "topic">
            >
          >;
          incomePortfoliosAnalysis: {
            __typename?: "IncomePortfoliosAnalysis";
          } & Pick<
            IncomePortfoliosAnalysis,
            | "afterTaxYield"
            | "expenseRatio"
            | "income"
            | "maxDrawdown"
            | "risk"
            | "yield"
          > & {
              commentary?: Maybe<
                Array<
                  Maybe<
                    {
                      __typename?: "CommentaryItem";
                    } & Pick<CommentaryItem, "content" | "topic">
                  >
                >
              >;
              comparisons?: Maybe<
                Array<
                  Maybe<
                    {
                      __typename?: "Comparison";
                    } & Pick<
                      Comparison,
                      | "average"
                      | "comparisonType"
                      | "difference"
                      | "inpaas"
                      | "percentageDifference"
                    >
                  >
                >
              >;
            };
          orders?: Maybe<
            Array<
              Maybe<
                {
                  __typename?: "Order";
                } & Pick<
                  Order,
                  "assetId" | "direction" | "marketValue" | "quantity"
                >
              >
            >
          >;
          originalIncomePortfoliosAnalysis?: Maybe<
            {
              __typename?: "IncomePortfoliosAnalysis";
            } & Pick<
              IncomePortfoliosAnalysis,
              | "afterTaxYield"
              | "expenseRatio"
              | "income"
              | "maxDrawdown"
              | "risk"
              | "yield"
            > & {
                commentary?: Maybe<
                  Array<
                    Maybe<
                      {
                        __typename?: "CommentaryItem";
                      } & Pick<CommentaryItem, "content" | "topic">
                    >
                  >
                >;
                comparisons?: Maybe<
                  Array<
                    Maybe<
                      {
                        __typename?: "Comparison";
                      } & Pick<
                        Comparison,
                        | "average"
                        | "comparisonType"
                        | "difference"
                        | "inpaas"
                        | "percentageDifference"
                      >
                    >
                  >
                >;
              }
          >;
          portfolio: {
            __typename?: "Portfolio";
          } & Pick<
            Portfolio,
            | "accountNumber"
            | "app"
            | "createdAt"
            | "currency"
            | "description"
            | "id"
            | "metadata"
            | "name"
            | "status"
            | "updatedAt"
          > & {
              positions: Array<
                Maybe<
                  {
                    __typename?: "PositionsListItem";
                  } & Pick<
                    PositionsListItem,
                    | "assetId"
                    | "costBasis"
                    | "createdAt"
                    | "id"
                    | "metadata"
                    | "portfolioId"
                    | "quantity"
                    | "settled"
                    | "tradeDate"
                    | "unsettled"
                    | "updatedAt"
                  >
                >
              >;
            };
          proposalRequest: {
            __typename?: "ProposalRequest";
          } & Pick<
            ProposalRequest,
            "investmentAmount" | "portfolioId" | "whitelist"
          > & {
              constraints?: Maybe<
                {
                  __typename?: "Constraints";
                } & Pick<Constraints, "maximumWeight" | "minimumWeight">
              >;
              goal: {
                __typename?: "Goal";
              } & Pick<Goal, "income" | "risk" | "yield">;
              taxBrackets?: Maybe<
                {
                  __typename?: "TaxBrackets";
                } & Pick<TaxBrackets, "federalTaxRate" | "stateTaxRate">
              >;
            };
        };
    }
  >;
};
export type PostPubsubStacksSubscriptionMutationVariables = Exact<{
  createSubscriptionRequestInput?: Maybe<CreateSubscriptionRequestInput>;
}>;
export type PostPubsubStacksSubscriptionMutation = {
  __typename?: "Mutation";
} & {
  postPubsubStacksSubscription?: Maybe<
    {
      __typename?: "CreateSubscriptionResponse";
    } & {
      subscription: {
        __typename?: "Subscription2";
      } & Pick<
        Subscription2,
        | "createdAt"
        | "id"
        | "queueArn"
        | "queueUrl"
        | "subscriptionArn"
        | "topicArn"
        | "updatedAt"
      >;
    }
  >;
};
export type PostPubsubStacksTopicMutationVariables = Exact<{
  createTopicRequestInput?: Maybe<CreateTopicRequestInput>;
}>;
export type PostPubsubStacksTopicMutation = {
  __typename?: "Mutation";
} & {
  postPubsubStacksTopic?: Maybe<
    {
      __typename?: "CreateTopicResponse";
    } & {
      topic: {
        __typename?: "Topic";
      } & Pick<Topic, "arn" | "createdAt" | "id" | "updatedAt">;
    }
  >;
};
export type PostResetPasswordMutationVariables = Exact<{
  [key: string]: never;
}>;
export type PostResetPasswordMutation = {
  __typename?: "Mutation";
} & Pick<Mutation, "postResetPassword">;
export type PostRoleBindingsMutationVariables = Exact<{
  createOrUpdateRoleBindingRequestInput?: Maybe<
    CreateOrUpdateRoleBindingRequestInput
  >;
}>;
export type PostRoleBindingsMutation = {
  __typename?: "Mutation";
} & {
  postRoleBindings?: Maybe<
    {
      __typename?: "CreateOrUpdateRoleBindingResponse";
    } & Pick<CreateOrUpdateRoleBindingResponse, "message" | "timestamp">
  >;
};
export type PostRolePoliciesMutationVariables = Exact<{
  id: Scalars["String"];
  removeRolePoliciesRequestInput?: Maybe<RemoveRolePoliciesRequestInput>;
}>;
export type PostRolePoliciesMutation = {
  __typename?: "Mutation";
} & {
  postRolePolicies?: Maybe<
    {
      __typename?: "RemoveRolePoliciesResponse";
    } & {
      role: {
        __typename?: "Role";
      } & Pick<Role, "id"> & {
          policies: Array<
            Maybe<
              {
                __typename?: "Policy";
              } & Pick<Policy, "actions" | "resource">
            >
          >;
        };
    }
  >;
};
export type PostRolesMutationVariables = Exact<{
  createOrUpdateRoleRequestInput?: Maybe<CreateOrUpdateRoleRequestInput>;
}>;
export type PostRolesMutation = {
  __typename?: "Mutation";
} & {
  postRoles?: Maybe<
    {
      __typename?: "CreateOrUpdateRoleResponse";
    } & Pick<CreateOrUpdateRoleResponse, "message" | "timestamp">
  >;
};
export type PostSearchStacksMutationVariables = Exact<{
  tableName: Scalars["String"];
}>;
export type PostSearchStacksMutation = {
  __typename?: "Mutation";
} & {
  postSearchStacks?: Maybe<
    {
      __typename?: "CreateSearchStackResponse";
    } & {
      searchStack: {
        __typename?: "SearchStack";
      } & Pick<
        SearchStack,
        | "createdAt"
        | "deadLetterQueueUrl"
        | "functionArn"
        | "functionName"
        | "id"
        | "metadata"
        | "tableName"
        | "tableStatus"
        | "updatedAt"
      >;
    }
  >;
};
export type PostSketchUploadMutationVariables = Exact<{
  sketchId: Scalars["String"];
  uploadSketchDocumentRequestInput?: Maybe<UploadSketchDocumentRequestInput>;
}>;
export type PostSketchUploadMutation = {
  __typename?: "Mutation";
} & {
  postSketchUpload?: Maybe<
    {
      __typename?: "UploadSketchDocumentResponse";
    } & {
      document: {
        __typename?: "SketchDocument";
      } & Pick<
        SketchDocument,
        "snapId" | "uploadDateTime" | "uploadUserName"
      > & {
          documentType?: Maybe<
            {
              __typename?: "DocumentType";
            } & Pick<DocumentType, "description" | "name">
          >;
        };
    }
  >;
};
export type PostSuggestionsGenerateAssetSuggestionsMutationVariables = Exact<{
  generateAssetSuggestionsRequestInput?: Maybe<
    GenerateAssetSuggestionsRequestInput
  >;
}>;
export type PostSuggestionsGenerateAssetSuggestionsMutation = {
  __typename?: "Mutation";
} & {
  postSuggestionsGenerateAssetSuggestions?: Maybe<
    {
      __typename?: "GenerateAssetSuggestionsResponse";
    } & Pick<GenerateAssetSuggestionsResponse, "assetIds">
  >;
};
export type PostTemporaryPortfoliosMutationVariables = Exact<{
  createOrReplaceTemporaryPortfolioRequestInput?: Maybe<
    CreateOrReplaceTemporaryPortfolioRequestInput
  >;
}>;
export type PostTemporaryPortfoliosMutation = {
  __typename?: "Mutation";
} & {
  postTemporaryPortfolios?: Maybe<
    {
      __typename?: "CreateOrReplaceTemporaryPortfolioResponse";
    } & Pick<CreateOrReplaceTemporaryPortfolioResponse, "created" | "updated">
  >;
};
export type PostTicketsEmailVerificationMutationVariables = Exact<{
  ticketId: Scalars["String"];
}>;
export type PostTicketsEmailVerificationMutation = {
  __typename?: "Mutation";
} & {
  postTicketsEmailVerification?: Maybe<
    {
      __typename?: "VerifyEmailResponse";
    } & Pick<VerifyEmailResponse, "verified">
  >;
};
export type PostTicketsEmailVerificationsMutationVariables = Exact<{
  email: Scalars["String"];
}>;
export type PostTicketsEmailVerificationsMutation = {
  __typename?: "Mutation";
} & {
  postTicketsEmailVerifications?: Maybe<
    {
      __typename?: "CreateEmailVerificationTicketResponse";
    } & Pick<CreateEmailVerificationTicketResponse, "success">
  >;
};
export type PostTicketsLoginMutationVariables = Exact<{
  loginRequestInput?: Maybe<LoginRequestInput>;
  sdk?: Maybe<Scalars["Boolean"]>;
}>;
export type PostTicketsLoginMutation = {
  __typename?: "Mutation";
} & {
  postTicketsLogin?: Maybe<
    {
      __typename?: "LoginResponse";
    } & Pick<LoginResponse, "success">
  >;
};
export type PostTicketsPasswordResetMutationVariables = Exact<{
  resetPasswordRequestInput?: Maybe<ResetPasswordRequestInput>;
  ticketId: Scalars["String"];
}>;
export type PostTicketsPasswordResetMutation = {
  __typename?: "Mutation";
} & {
  postTicketsPasswordReset?: Maybe<
    {
      __typename?: "ResetPasswordResponse";
    } & Pick<ResetPasswordResponse, "success">
  >;
};
export type PostTicketsPasswordResetsMutationVariables = Exact<{
  email: Scalars["String"];
}>;
export type PostTicketsPasswordResetsMutation = {
  __typename?: "Mutation";
} & {
  postTicketsPasswordResets?: Maybe<
    {
      __typename?: "CreatePasswordResetTicketResponse";
    } & Pick<CreatePasswordResetTicketResponse, "success">
  >;
};
export type PostTradePostingPostExecutionsMutationVariables = Exact<{
  postExecutionsRequestInput?: Maybe<PostExecutionsRequestInput>;
}>;
export type PostTradePostingPostExecutionsMutation = {
  __typename?: "Mutation";
} & {
  postTradePostingPostExecutions?: Maybe<
    {
      __typename?: "PostExecutionsResponse";
    } & {
      tradePostings: Array<
        Maybe<
          {
            __typename?: "TradePosting";
          } & Pick<
            TradePosting,
            | "aleId"
            | "direction"
            | "errorDetails"
            | "orderId"
            | "price"
            | "quantity"
            | "state"
            | "ticker"
            | "tradePostingId"
            | "tradedAt"
            | "updatedAt"
          >
        >
      >;
    }
  >;
};
export type PostTradesSearchMutationVariables = Exact<{
  searchTradeRequestInput?: Maybe<SearchTradeRequestInput>;
}>;
export type PostTradesSearchMutation = {
  __typename?: "Mutation";
} & {
  postTradesSearch?: Maybe<
    {
      __typename?: "SearchTradeResponse";
    } & {
      trades?: Maybe<
        Array<
          Maybe<
            {
              __typename?: "LedgerEntry";
            } & Pick<
              LedgerEntry,
              | "accountNumber"
              | "assetId"
              | "comment"
              | "counterPartyId"
              | "createdAt"
              | "fee"
              | "id"
              | "metadata"
              | "orderId"
              | "portfolioId"
              | "quantity"
              | "status"
              | "tradeId"
              | "tradePrice"
              | "updatedAt"
            > & {
                relatedPositions: Array<
                  Maybe<
                    {
                      __typename?: "RelatedPosition";
                    } & Pick<RelatedPosition, "positionId" | "quantity">
                  >
                >;
              }
          >
        >
      >;
    }
  >;
};
export type PostUserCartItemsMutationVariables = Exact<{
  createOrReplaceCartItemRequestInput?: Maybe<
    CreateOrReplaceCartItemRequestInput
  >;
  userId: Scalars["String"];
}>;
export type PostUserCartItemsMutation = {
  __typename?: "Mutation";
} & {
  postUserCartItems?: Maybe<
    {
      __typename?: "CreateOrReplaceCartItemResponse";
    } & Pick<CreateOrReplaceCartItemResponse, "ok">
  >;
};
export type PostUserResetPasswordDirectlyMutationVariables = Exact<{
  id: Scalars["String"];
  resetPasswordDirectlyRequestInput?: Maybe<ResetPasswordDirectlyRequestInput>;
}>;
export type PostUserResetPasswordDirectlyMutation = {
  __typename?: "Mutation";
} & {
  postUserResetPasswordDirectly?: Maybe<
    {
      __typename?: "ResetPasswordDirectlyResponse";
    } & Pick<ResetPasswordDirectlyResponse, "success">
  >;
};
export type PostUserWatchlistItemMutationVariables = Exact<{
  assetId: Scalars["String"];
  userId: Scalars["String"];
}>;
export type PostUserWatchlistItemMutation = {
  __typename?: "Mutation";
} & {
  postUserWatchlistItem?: Maybe<
    {
      __typename?: "CreateOrReplaceWatchListItemResponse";
    } & Pick<CreateOrReplaceWatchListItemResponse, "ok">
  >;
};
export type PostUsersMutationVariables = Exact<{
  createUserRequestInput?: Maybe<CreateUserRequestInput>;
}>;
export type PostUsersMutation = {
  __typename?: "Mutation";
} & {
  postUsers?: Maybe<
    {
      __typename?: "CreateUserResponse";
    } & {
      user: {
        __typename?: "User";
      } & Pick<
        User,
        | "createdAt"
        | "email"
        | "first"
        | "id"
        | "institutionId"
        | "last"
        | "metadata"
        | "status"
        | "terms"
        | "updatedAt"
        | "userType"
      > & {
          policies?: Maybe<
            Array<
              Maybe<
                {
                  __typename?: "Policy";
                } & Pick<Policy, "actions" | "resource">
              >
            >
          >;
        };
    }
  >;
};
export type PostUsersBlockExpiredTrialUsersMutationVariables = Exact<{
  blockExpiredTrialUsersRequestInput?: Maybe<
    BlockExpiredTrialUsersRequestInput
  >;
}>;
export type PostUsersBlockExpiredTrialUsersMutation = {
  __typename?: "Mutation";
} & {
  postUsersBlockExpiredTrialUsers?: Maybe<
    {
      __typename?: "BlockExpiredTrialUsersResponse";
    } & {
      users: Array<
        Maybe<
          {
            __typename?: "User";
          } & Pick<
            User,
            | "createdAt"
            | "email"
            | "first"
            | "id"
            | "institutionId"
            | "last"
            | "metadata"
            | "status"
            | "terms"
            | "updatedAt"
            | "userType"
          > & {
              policies?: Maybe<
                Array<
                  Maybe<
                    {
                      __typename?: "Policy";
                    } & Pick<Policy, "actions" | "resource">
                  >
                >
              >;
            }
        >
      >;
    }
  >;
};
export type PostUsersInvitesMutationVariables = Exact<{
  inviteUserRequestInput?: Maybe<InviteUserRequestInput>;
}>;
export type PostUsersInvitesMutation = {
  __typename?: "Mutation";
} & {
  postUsersInvites?: Maybe<
    {
      __typename?: "InviteUserResponse";
    } & {
      invitedUser: {
        __typename?: "InvitedUser";
      } & Pick<
        InvitedUser,
        | "createdAt"
        | "email"
        | "firstName"
        | "institutionId"
        | "invitedBy"
        | "lastName"
        | "nonce"
        | "status"
        | "userType"
      >;
    }
  >;
};
export type PostWhitelistsGenerateBestFitMutationVariables = Exact<{
  generateBestFitWhitelistRequestInput?: Maybe<
    GenerateBestFitWhitelistRequestInput
  >;
}>;
export type PostWhitelistsGenerateBestFitMutation = {
  __typename?: "Mutation";
} & {
  postWhitelistsGenerateBestFit?: Maybe<
    {
      __typename?: "GenerateBestFitWhitelistResponse";
    } & Pick<GenerateBestFitWhitelistResponse, "assetIds">
  >;
};
export type PutAccountCloseMutationVariables = Exact<{
  id: Scalars["String"];
}>;
export type PutAccountCloseMutation = {
  __typename?: "Mutation";
} & {
  putAccountClose?: Maybe<
    {
      __typename?: "InvestorAccountClose";
    } & {
      apexAccount: {
        __typename?: "ApexAccount2";
      } & Pick<
        ApexAccount2,
        | "apexAccountNumber"
        | "apexRequestId"
        | "createdAt"
        | "id"
        | "investorId"
        | "metadata"
        | "status"
        | "updatedAt"
      >;
    }
  >;
};
export type PutAccountReopenMutationVariables = Exact<{
  id: Scalars["String"];
}>;
export type PutAccountReopenMutation = {
  __typename?: "Mutation";
} & {
  putAccountReopen?: Maybe<
    {
      __typename?: "InvestorAccountReopen";
    } & {
      apexAccount: {
        __typename?: "ApexAccount2";
      } & Pick<
        ApexAccount2,
        | "apexAccountNumber"
        | "apexRequestId"
        | "createdAt"
        | "id"
        | "investorId"
        | "metadata"
        | "status"
        | "updatedAt"
      >;
    }
  >;
};
export type PutAccountsCloseMutationVariables = Exact<{
  accountNumber: Scalars["String"];
}>;
export type PutAccountsCloseMutation = {
  __typename?: "Mutation";
} & {
  putAccountsClose?: Maybe<
    {
      __typename?: "CloseApexAccountResponse";
    } & {
      apexAccount: {
        __typename?: "ApexAccount";
      } & Pick<
        ApexAccount,
        | "accountNumber"
        | "accountRequestId"
        | "accountType"
        | "createdAt"
        | "status"
        | "updatedAt"
      >;
    }
  >;
};
export type PutAccountsReopenMutationVariables = Exact<{
  accountNumber: Scalars["String"];
}>;
export type PutAccountsReopenMutation = {
  __typename?: "Mutation";
} & {
  putAccountsReopen?: Maybe<
    {
      __typename?: "ReopenApexAccountResponse";
    } & {
      apexAccount: {
        __typename?: "ApexAccount";
      } & Pick<
        ApexAccount,
        | "accountNumber"
        | "accountRequestId"
        | "accountType"
        | "createdAt"
        | "status"
        | "updatedAt"
      >;
    }
  >;
};
export type PutIdentityInvestigationActionMutationVariables = Exact<{
  action: Action4;
  sketchId: Scalars["String"];
  updateIdentityInvestigationRequestInput?: Maybe<
    UpdateIdentityInvestigationRequestInput
  >;
}>;
export type PutIdentityInvestigationActionMutation = {
  __typename?: "Mutation";
} & {
  putIdentityInvestigationAction?: Maybe<
    {
      __typename?: "UpdateIdentityInvestigationResponse";
    } & {
      identityState: {
        __typename?: "IdentityState";
      } & Pick<IdentityState, "archived" | "id" | "status"> & {
          history: {
            __typename?: "History2";
          } & Pick<History2, "comment" | "stateChange" | "timestamp" | "user">;
        };
    }
  >;
};
export type PutInvestorAccountCloseMutationVariables = Exact<{
  investorId: Scalars["String"];
}>;
export type PutInvestorAccountCloseMutation = {
  __typename?: "Mutation";
} & {
  putInvestorAccountClose?: Maybe<
    {
      __typename?: "InvestorAccountClose";
    } & {
      apexAccount: {
        __typename?: "ApexAccount2";
      } & Pick<
        ApexAccount2,
        | "apexAccountNumber"
        | "apexRequestId"
        | "createdAt"
        | "id"
        | "investorId"
        | "metadata"
        | "status"
        | "updatedAt"
      >;
    }
  >;
};
export type PutInvestorAccountReopenMutationVariables = Exact<{
  investorId: Scalars["String"];
}>;
export type PutInvestorAccountReopenMutation = {
  __typename?: "Mutation";
} & {
  putInvestorAccountReopen?: Maybe<
    {
      __typename?: "InvestorAccountReopen";
    } & {
      apexAccount: {
        __typename?: "ApexAccount2";
      } & Pick<
        ApexAccount2,
        | "apexAccountNumber"
        | "apexRequestId"
        | "createdAt"
        | "id"
        | "investorId"
        | "metadata"
        | "status"
        | "updatedAt"
      >;
    }
  >;
};
export type PutSketchActionMutationVariables = Exact<{
  action: Action4;
  sketchId: Scalars["String"];
  updateSketchRequestInput?: Maybe<UpdateSketchRequestInput>;
}>;
export type PutSketchActionMutation = {
  __typename?: "Mutation";
} & {
  putSketchAction?: Maybe<
    {
      __typename?: "UpdateSketchResponse";
    } & {
      sketchState: {
        __typename?: "SketchState";
      } & Pick<SketchState, "archived" | "sketchId" | "status"> & {
          history: Array<
            Maybe<
              {
                __typename?: "History2";
              } & Pick<
                History2,
                "comment" | "stateChange" | "timestamp" | "user"
              >
            >
          >;
        };
    }
  >;
};
export type ApexAccountsGetAccountStatementsQueryVariables = Exact<{
  accountNumber: Scalars["String"];
  documentType?: Maybe<Scalars["String"]>;
  endMonth: Scalars["String"];
  endYear: Scalars["String"];
  startMonth: Scalars["String"];
  startYear: Scalars["String"];
}>;
export type ApexAccountsGetAccountStatementsQuery = {
  __typename?: "Query";
} & {
  apexAccountsGetAccountStatements?: Maybe<
    {
      __typename?: "GetStatementsResponse";
    } & {
      statements: Array<
        Maybe<
          {
            __typename?: "StatementResponse";
          } & Pick<
            StatementResponse,
            "accountNumber" | "documentType" | "statementURL" | "statmentDate"
          >
        >
      >;
    }
  >;
};
export type ApexAccountsGetAchRelationshipQueryVariables = Exact<{
  accountNumber: Scalars["String"];
}>;
export type ApexAccountsGetAchRelationshipQuery = {
  __typename?: "Query";
} & {
  apexAccountsGetAchRelationship?: Maybe<
    {
      __typename?: "GetAchRelationshipResponse";
    } & {
      achRelationship: {
        __typename?: "AchRelationship";
      } & Pick<
        AchRelationship,
        | "accountNumber"
        | "achRelationshipId"
        | "createdAt"
        | "linkedBankAccountId"
        | "status"
        | "updatedAt"
      >;
    }
  >;
};
export type ApexAccountsGetApexAccountQueryVariables = Exact<{
  accountNumber: Scalars["String"];
}>;
export type ApexAccountsGetApexAccountQuery = {
  __typename?: "Query";
} & {
  apexAccountsGetApexAccount?: Maybe<
    {
      __typename?: "GetApexAccountResponse";
    } & {
      apexAccount: {
        __typename?: "ApexAccount";
      } & Pick<
        ApexAccount,
        | "accountNumber"
        | "accountRequestId"
        | "accountType"
        | "createdAt"
        | "status"
        | "updatedAt"
      >;
    }
  >;
};
export type ApexAccountsGetApexAccountBalanceQueryVariables = Exact<{
  accountNumber: Scalars["String"];
}>;
export type ApexAccountsGetApexAccountBalanceQuery = {
  __typename?: "Query";
} & {
  apexAccountsGetApexAccountBalance?: Maybe<
    {
      __typename?: "GetApexAccountBalanceResponse";
    } & {
      apexBalance: {
        __typename?: "ApexBalance";
      } & Pick<
        ApexBalance,
        | "accountNumber"
        | "amountAvailableForTrading"
        | "amountAvailableForWithdraw"
        | "amountOfPendingWithdrawals"
        | "amountOfUnclearedDeposits"
        | "timestamp"
      >;
    }
  >;
};
export type ApexAccountsGetApexAccountMetadataQueryVariables = Exact<{
  accountNumber: Scalars["String"];
}>;
export type ApexAccountsGetApexAccountMetadataQuery = {
  __typename?: "Query";
} & {
  apexAccountsGetApexAccountMetadata?: Maybe<
    {
      __typename?: "GetApexAccountMetadataResponse";
    } & {
      metadata: Array<
        Maybe<
          {
            __typename?: "ApexAccountMetadata";
          } & Pick<
            ApexAccountMetadata,
            | "accountNumber"
            | "accountRequestId"
            | "aleIds"
            | "createdAt"
            | "reasons"
            | "sketchIds"
            | "updatedAt"
          > & {
              submittedForms: Array<
                Maybe<
                  {
                    __typename?: "FormList2";
                  } & Pick<FormList2, "formId" | "formName">
                >
              >;
            }
        >
      >;
    }
  >;
};
export type ApexAccountsGetApexTransferQueryVariables = Exact<{
  accountNumber: Scalars["String"];
  transferNumber: Scalars["String"];
}>;
export type ApexAccountsGetApexTransferQuery = {
  __typename?: "Query";
} & {
  apexAccountsGetApexTransfer?: Maybe<
    {
      __typename?: "GetApexTransferResponse";
    } & {
      transfer: {
        __typename?: "Transfer";
      } & Pick<
        Transfer,
        | "accountNumber"
        | "amount"
        | "createdAt"
        | "direction"
        | "linkedBankAccountId"
        | "status"
        | "transferId"
        | "transferMethod"
        | "transferNumber"
        | "updatedAt"
      >;
    }
  >;
};
export type ApexAccountsGetApexTransfersQueryVariables = Exact<{
  accountNumber: Scalars["String"];
}>;
export type ApexAccountsGetApexTransfersQuery = {
  __typename?: "Query";
} & {
  apexAccountsGetApexTransfers?: Maybe<
    {
      __typename?: "GetApexTransfersResponse";
    } & {
      transfers: Array<
        Maybe<
          {
            __typename?: "Transfer";
          } & Pick<
            Transfer,
            | "accountNumber"
            | "amount"
            | "createdAt"
            | "direction"
            | "linkedBankAccountId"
            | "status"
            | "transferId"
            | "transferMethod"
            | "transferNumber"
            | "updatedAt"
          >
        >
      >;
    }
  >;
};
export type ApexAccountsGetCorporateAgreementFormQueryVariables = Exact<{
  formId: Scalars["String"];
}>;
export type ApexAccountsGetCorporateAgreementFormQuery = {
  __typename?: "Query";
} & {
  apexAccountsGetCorporateAgreementForm?: Maybe<
    {
      __typename?: "GetCorporateAgreementFormResponse";
    } & {
      corporateAgreementForm: {
        __typename?: "CorporateAgreementForm";
      } & Pick<
        CorporateAgreementForm,
        | "articlesOfIncorporationSnapId"
        | "authorizedOfficerName"
        | "authorizedOfficerTitle"
        | "corporationName"
        | "createdAt"
        | "formId"
        | "isAuthorizedOfficerESigned"
        | "isSecretaryESigned"
        | "secretaryName"
        | "stateOfIncorporation"
        | "updatedAt"
      >;
    }
  >;
};
export type ApexAccountsGetEntityAccountFormQueryVariables = Exact<{
  formId: Scalars["String"];
}>;
export type ApexAccountsGetEntityAccountFormQuery = {
  __typename?: "Query";
} & {
  apexAccountsGetEntityAccountForm?: Maybe<
    {
      __typename?: "GetEntityAccountFormResponse";
    } & {
      entityAccountForm: {
        __typename?: "EntityAccountForm";
      } & Pick<
        EntityAccountForm,
        | "accountNature"
        | "catAccountholderType"
        | "createdAt"
        | "customerType"
        | "formId"
        | "isApplicantESigned"
        | "issuerDirectCommunicationCode"
        | "legalEntityIdentifier"
        | "updatedAt"
      > & {
          accountInformation?: Maybe<
            {
              __typename?: "EntityAccountInformation";
            } & Pick<
              EntityAccountInformation,
              | "businessTelephoneNumber"
              | "entityName"
              | "entityTaxId"
              | "isUSEntity"
            > & {
                accountTradingInformation: {
                  __typename?: "EntityAccountTradingInformation";
                } & Pick<
                  EntityAccountTradingInformation,
                  | "companyTickerSymbols"
                  | "isAffiliatedExchangeOrFINRA"
                  | "isControlPerson"
                  | "memberFirmNames"
                >;
                businessAddress: {
                  __typename?: "PhysicalAddress";
                } & Pick<
                  PhysicalAddress,
                  "city" | "country" | "postalCode" | "state" | "streetAddress"
                >;
              }
          >;
          additionalAccountInformation?: Maybe<
            {
              __typename?: "EntityAdditionalAccountInformation";
            } & Pick<
              EntityAdditionalAccountInformation,
              | "isForeignBank"
              | "isMaintainedForForeignFinancialInstitution"
              | "isPoliticallyExposed"
            > & {
                politicalExposureDetail?: Maybe<
                  {
                    __typename?: "EntityAccountPoliticalExposureDetail";
                  } & Pick<
                    EntityAccountPoliticalExposureDetail,
                    "immediateFamily" | "politicalOrganization"
                  >
                >;
              }
          >;
          authorizedSigner?: Maybe<
            {
              __typename?: "EntityAuthorizedSigner";
            } & Pick<
              EntityAuthorizedSigner,
              | "citizenshipCountry"
              | "dateOfBirth"
              | "emailAddress"
              | "isUsCitizen"
              | "taxId"
              | "title"
            > & {
                name: {
                  __typename?: "PrimaryName";
                } & Pick<PrimaryName, "familyName" | "givenName" | "legalName">;
              }
          >;
          beneficialOwners?: Maybe<
            Array<
              Maybe<
                {
                  __typename?: "OwnerOrOfficer";
                } & Pick<
                  OwnerOrOfficer,
                  | "dateOfBirth"
                  | "identificationNumber"
                  | "socialSecurityNumber"
                > & {
                    address: {
                      __typename?: "PhysicalAddress";
                    } & Pick<
                      PhysicalAddress,
                      | "city"
                      | "country"
                      | "postalCode"
                      | "state"
                      | "streetAddress"
                    >;
                    name: {
                      __typename?: "PrimaryName";
                    } & Pick<
                      PrimaryName,
                      "familyName" | "givenName" | "legalName"
                    >;
                  }
              >
            >
          >;
          entityOfficers?: Maybe<
            Array<
              Maybe<
                {
                  __typename?: "OwnerOrOfficer";
                } & Pick<
                  OwnerOrOfficer,
                  | "dateOfBirth"
                  | "identificationNumber"
                  | "socialSecurityNumber"
                > & {
                    address: {
                      __typename?: "PhysicalAddress";
                    } & Pick<
                      PhysicalAddress,
                      | "city"
                      | "country"
                      | "postalCode"
                      | "state"
                      | "streetAddress"
                    >;
                    name: {
                      __typename?: "PrimaryName";
                    } & Pick<
                      PrimaryName,
                      "familyName" | "givenName" | "legalName"
                    >;
                  }
              >
            >
          >;
          exemptLegalCustomer?: Maybe<
            {
              __typename?: "EntityAccountExemptLegalCustomer";
            } & Pick<
              EntityAccountExemptLegalCustomer,
              "exemption" | "isExemptLegalCustomer"
            >
          >;
          serviceProfile?: Maybe<
            {
              __typename?: "EntityAccountProfile";
            } & Pick<
              EntityAccountProfile,
              "dividendReinvestment" | "sweepInstructions"
            >
          >;
          suitabilityProfile?: Maybe<
            {
              __typename?: "SuitabilityProfile";
            } & Pick<SuitabilityProfile, "liquidityNeeds" | "timeHorizon">
          >;
          w9Certification?: Maybe<
            {
              __typename?: "W9Certification";
            } & Pick<W9Certification, "exemptPayeeCode" | "exemptionFromFatca">
          >;
        };
    }
  >;
};
export type ApexAccountsGetEntityDueDiligenceFormQueryVariables = Exact<{
  formId: Scalars["String"];
}>;
export type ApexAccountsGetEntityDueDiligenceFormQuery = {
  __typename?: "Query";
} & {
  apexAccountsGetEntityDueDiligenceForm?: Maybe<
    {
      __typename?: "GetEntityDueDiligenceFormResponse";
    } & {
      entityDueDiligenceForm: {
        __typename?: "EntityDueDiligenceForm";
      } & Pick<
        EntityDueDiligenceForm,
        | "assessedRiskRating"
        | "createdAt"
        | "entityOrAssociatesHaveNegativeNews"
        | "entityOrAssociatesNegativeNewsInfo"
        | "formId"
        | "principalApproverName"
        | "registeredRepresentativeApproverName"
        | "updatedAt"
      > & {
          accountActivity?: Maybe<
            {
              __typename?: "DueDiligenceAccountActivity";
            } & Pick<
              DueDiligenceAccountActivity,
              | "expectedWithdrawalFrequency"
              | "initialDepositAmount"
              | "initialDepositSource"
              | "lowPricedSecuritiesPercentage"
              | "primaryAccountActivity"
              | "willTransactForeignBonds"
              | "willTransactLowPricedSecurities"
            >
          >;
          accountInformation?: Maybe<
            {
              __typename?: "DueDiligenceAccountInformation";
            } & Pick<
              DueDiligenceAccountInformation,
              | "accountName"
              | "businessLocations"
              | "countryOfIncorporation"
              | "hasAccounts"
            > & {
                relatedAccounts?: Maybe<
                  Array<
                    Maybe<
                      {
                        __typename?: "DueDiligenceRelatedAccounts";
                      } & Pick<
                        DueDiligenceRelatedAccounts,
                        "accountNumber" | "entityName"
                      >
                    >
                  >
                >;
              }
          >;
          additionalAccounts?: Maybe<
            {
              __typename?: "DueDiligenceAdditionalAccounts";
            } & Pick<
              DueDiligenceAdditionalAccounts,
              | "confirmEntityDoesNotIssueBearerShares"
              | "institutionNames"
              | "primaryOngoingFundingSource"
              | "primaryOngoingFundingSourceClarification"
              | "scopeOfBusiness"
              | "scopeOfBusinessClarification"
            >
          >;
          politicallyExposedPersons?: Maybe<
            {
              __typename?: "DueDiligencePoliticallyExposedPersons";
            } & Pick<
              DueDiligencePoliticallyExposedPersons,
              "isPoliticallyExposed"
            > & {
                politicalOfficials?: Maybe<
                  Array<
                    Maybe<
                      {
                        __typename?: "DueDiligencePoliticalOfficials";
                      } & Pick<
                        DueDiligencePoliticalOfficials,
                        | "immediateFamily"
                        | "legalName"
                        | "politicalOrganization"
                        | "politicalTitle"
                        | "role"
                      >
                    >
                  >
                >;
              }
          >;
        };
    }
  >;
};
export type ApexAccountsGetIndividualAccountFormQueryVariables = Exact<{
  formId: Scalars["String"];
}>;
export type ApexAccountsGetIndividualAccountFormQuery = {
  __typename?: "Query";
} & {
  apexAccountsGetIndividualAccountForm?: Maybe<
    {
      __typename?: "GetIndividualAccountFormResponse";
    } & {
      individualAccountForm: {
        __typename?: "IndividualAccountForm";
      } & Pick<
        IndividualAccountForm,
        | "catAccountholderType"
        | "createdAt"
        | "customerType"
        | "formId"
        | "trustedContact"
        | "updatedAt"
      > & {
          applicantSignature?: Maybe<
            {
              __typename?: "ApplicantSignature";
            } & Pick<ApplicantSignature, "eSigned">
          >;
          applicants?: Maybe<
            Array<
              Maybe<
                {
                  __typename?: "Applicant";
                } & {
                  contact?: Maybe<
                    {
                      __typename?: "Contact";
                    } & Pick<Contact, "emailAddresses"> & {
                        homeAddress: {
                          __typename?: "PhysicalAddress";
                        } & Pick<
                          PhysicalAddress,
                          | "city"
                          | "country"
                          | "postalCode"
                          | "state"
                          | "streetAddress"
                        >;
                        phoneNumbers: Array<
                          Maybe<
                            {
                              __typename?: "PhoneNumber";
                            } & Pick<
                              PhoneNumber,
                              "phoneNumber" | "phoneNumberType"
                            >
                          >
                        >;
                      }
                  >;
                  disclosures?: Maybe<
                    {
                      __typename?: "Disclosures";
                    } & Pick<
                      Disclosures,
                      | "affiliatedApproval"
                      | "companySymbols"
                      | "firmName"
                      | "isAffiliatedExchangeOrFINRA"
                      | "isControlPerson"
                      | "isPoliticallyExposed"
                    > & {
                        politicalExposureDetail?: Maybe<
                          {
                            __typename?: "PoliticalExposureDetail";
                          } & Pick<
                            PoliticalExposureDetail,
                            "immediateFamily" | "politicalOrganization"
                          >
                        >;
                      }
                  >;
                  employment?: Maybe<
                    {
                      __typename?: "Employment";
                    } & Pick<
                      Employment,
                      "employer" | "employmentStatus" | "positionEmployed"
                    >
                  >;
                  identity?: Maybe<
                    {
                      __typename?: "Identity";
                    } & Pick<
                      Identity,
                      | "birthCountry"
                      | "citizenshipCountry"
                      | "dateOfBirth"
                      | "permanentResident"
                      | "socialSecurityNumber"
                      | "visaExpirationDate"
                      | "visaType"
                    > & {
                        name: {
                          __typename?: "PrimaryName";
                        } & Pick<
                          PrimaryName,
                          "familyName" | "givenName" | "legalName"
                        >;
                      }
                  >;
                }
              >
            >
          >;
          investmentProfile?: Maybe<
            {
              __typename?: "InvestmentProfile";
            } & Pick<
              InvestmentProfile,
              | "annualIncomeUSD"
              | "federalTaxBracketPercent"
              | "investmentExperience"
              | "investmentObjective"
              | "liquidNetWorthUSD"
              | "riskTolerance"
              | "totalNetWorthUSD"
            >
          >;
          serviceProfile?: Maybe<
            {
              __typename?: "IndividualServiceProfile";
            } & Pick<
              IndividualServiceProfile,
              | "dividendProceeds"
              | "dividendProceedsSendFrequency"
              | "dividendReinvestment"
              | "householdingService"
              | "issuerDirectCommunication"
              | "securitySaleProceeds"
              | "sweepInstructions"
            >
          >;
          suitabilityProfile?: Maybe<
            {
              __typename?: "SuitabilityProfile";
            } & Pick<SuitabilityProfile, "liquidityNeeds" | "timeHorizon">
          >;
        };
    }
  >;
};
export type ApexAccountsGetInterestedPartyFormQueryVariables = Exact<{
  formId: Scalars["String"];
}>;
export type ApexAccountsGetInterestedPartyFormQuery = {
  __typename?: "Query";
} & {
  apexAccountsGetInterestedPartyForm?: Maybe<
    {
      __typename?: "GetInterestedPartyFormResponse";
    } & {
      interestedPartyForm: {
        __typename?: "InterestedPartyForm";
      } & Pick<InterestedPartyForm, "createdAt" | "formId" | "updatedAt"> & {
          interestedParties: Array<
            Maybe<
              {
                __typename?: "InterestedParties2";
              } & {
                mailingAddress: {
                  __typename?: "PhysicalAddress";
                } & Pick<
                  PhysicalAddress,
                  "city" | "country" | "postalCode" | "state" | "streetAddress"
                >;
                name: {
                  __typename?: "InterestedPartyName";
                } & Pick<InterestedPartyName, "companyName">;
              }
            >
          >;
        };
    }
  >;
};
export type ApexAccountsGetLlcAgreementFormQueryVariables = Exact<{
  formId: Scalars["String"];
}>;
export type ApexAccountsGetLlcAgreementFormQuery = {
  __typename?: "Query";
} & {
  apexAccountsGetLlcAgreementForm?: Maybe<
    {
      __typename?: "GetLlcAgreementFormResponse";
    } & {
      llcAgreementForm: {
        __typename?: "LlcAgreementForm";
      } & Pick<
        LlcAgreementForm,
        | "articlesOfIncorporationOrOperatingAgreementSnapId"
        | "authorizedSignerName"
        | "authorizedSignerTitle"
        | "createdAt"
        | "entityName"
        | "formId"
        | "isAuthorizedSignerESigned"
        | "resolutionAdoptionDate"
        | "stateOfOrigin"
        | "updatedAt"
      > & {
          membersAndManagers: Array<
            Maybe<
              {
                __typename?: "MembersAndManagers2";
              } & Pick<
                MembersAndManagers2,
                | "isManager"
                | "isManagerESigned"
                | "legalName"
                | "organizationalRole"
              >
            >
          >;
        };
    }
  >;
};
export type ApexAccountsGetOpenSketchesQueryVariables = Exact<{
  [key: string]: never;
}>;
export type ApexAccountsGetOpenSketchesQuery = {
  __typename?: "Query";
} & {
  apexAccountsGetOpenSketches?: Maybe<
    {
      __typename?: "GetOpenSketchesResponse";
    } & {
      sketches: Array<
        Maybe<
          {
            __typename?: "Sketch";
          } & Pick<
            Sketch,
            | "accountNumber"
            | "accountType"
            | "createdAt"
            | "sketchId"
            | "status"
            | "updatedAt"
          >
        >
      >;
    }
  >;
};
export type ApexAccountsGetTradeConfirmsQueryVariables = Exact<{
  accountNumber: Scalars["String"];
  confirmEndDate: Scalars["String"];
  confirmStartDate: Scalars["String"];
}>;
export type ApexAccountsGetTradeConfirmsQuery = {
  __typename?: "Query";
} & {
  apexAccountsGetTradeConfirms?: Maybe<
    {
      __typename?: "GetTradeConfirmsResponse";
    } & {
      confirmsResponse: {
        __typename?: "ConfirmsResponse";
      } & {
        confirms: Array<
          Maybe<
            {
              __typename?: "ConfirmResponse";
            } & Pick<
              ConfirmResponse,
              "accountNumber" | "confirmURL" | "processDate"
            >
          >
        >;
      };
    }
  >;
};
export type ApexAccountsGetTrustedContactFormQueryVariables = Exact<{
  formId: Scalars["String"];
}>;
export type ApexAccountsGetTrustedContactFormQuery = {
  __typename?: "Query";
} & {
  apexAccountsGetTrustedContactForm?: Maybe<
    {
      __typename?: "GetTrustedContactFormResponse";
    } & {
      trustedContactForm: {
        __typename?: "TrustedContactForm";
      } & Pick<
        TrustedContactForm,
        | "createdAt"
        | "emailAddress"
        | "familyName"
        | "formId"
        | "givenName"
        | "updatedAt"
      > & {
          mailingAddress?: Maybe<
            {
              __typename?: "PhysicalAddress";
            } & Pick<
              PhysicalAddress,
              "city" | "country" | "postalCode" | "state" | "streetAddress"
            >
          >;
          phoneNumber?: Maybe<
            {
              __typename?: "PhoneNumber";
            } & Pick<PhoneNumber, "phoneNumber" | "phoneNumberType">
          >;
        };
    }
  >;
};
export type ApexGetAccountQueryVariables = Exact<{
  id: Scalars["String"];
}>;
export type ApexGetAccountQuery = {
  __typename?: "Query";
} & {
  apexGetAccount?: Maybe<
    {
      __typename?: "InvestorAccount";
    } & {
      apexAccount: {
        __typename?: "ApexAccount2";
      } & Pick<
        ApexAccount2,
        | "apexAccountNumber"
        | "apexRequestId"
        | "createdAt"
        | "id"
        | "investorId"
        | "metadata"
        | "status"
        | "updatedAt"
      >;
    }
  >;
};
export type ApexGetAccountBalanceQueryVariables = Exact<{
  id: Scalars["String"];
}>;
export type ApexGetAccountBalanceQuery = {
  __typename?: "Query";
} & {
  apexGetAccountBalance?: Maybe<
    {
      __typename?: "AccountBalance";
    } & {
      apexBalance: {
        __typename?: "ApexBalance2";
      } & Pick<
        ApexBalance2,
        | "amountAvailableForTrading"
        | "amountAvailableForWithdraw"
        | "amountOfPendingWithdrawals"
        | "amountOfUnclearedDeposits"
        | "id"
        | "timestamp"
      >;
    }
  >;
};
export type ApexGetAccountByAccountNumberQueryVariables = Exact<{
  apexAccountNumber: Scalars["String"];
}>;
export type ApexGetAccountByAccountNumberQuery = {
  __typename?: "Query";
} & {
  apexGetAccountByAccountNumber?: Maybe<
    {
      __typename?: "GetApexAccountByAccountNumberResponse";
    } & {
      apexAccount: {
        __typename?: "ApexAccount2";
      } & Pick<
        ApexAccount2,
        | "apexAccountNumber"
        | "apexRequestId"
        | "createdAt"
        | "id"
        | "investorId"
        | "metadata"
        | "status"
        | "updatedAt"
      >;
    }
  >;
};
export type ApexGetAccountByInvestorIdQueryVariables = Exact<{
  investorId: Scalars["String"];
}>;
export type ApexGetAccountByInvestorIdQuery = {
  __typename?: "Query";
} & {
  apexGetAccountByInvestorId?: Maybe<
    {
      __typename?: "InvestorAccount";
    } & {
      apexAccount: {
        __typename?: "ApexAccount2";
      } & Pick<
        ApexAccount2,
        | "apexAccountNumber"
        | "apexRequestId"
        | "createdAt"
        | "id"
        | "investorId"
        | "metadata"
        | "status"
        | "updatedAt"
      >;
    }
  >;
};
export type ApexGetAccountStatementsQueryVariables = Exact<{
  documentType?: Maybe<Scalars["String"]>;
  endMonth: Scalars["String"];
  endYear: Scalars["String"];
  id: Scalars["String"];
  startMonth: Scalars["String"];
  startYear: Scalars["String"];
}>;
export type ApexGetAccountStatementsQuery = {
  __typename?: "Query";
} & {
  apexGetAccountStatements?: Maybe<
    {
      __typename?: "GetStatementResponse";
    } & {
      statementsResponse: Array<
        Maybe<
          {
            __typename?: "StatementResponse2";
          } & Pick<
            StatementResponse2,
            "apexAccountId" | "documentType" | "statementURL" | "statmentDate"
          >
        >
      >;
    }
  >;
};
export type ApexGetAccountStatementsForInvestorQueryVariables = Exact<{
  documentType?: Maybe<Scalars["String"]>;
  endMonth: Scalars["String"];
  endYear: Scalars["String"];
  investorId: Scalars["String"];
  startMonth: Scalars["String"];
  startYear: Scalars["String"];
}>;
export type ApexGetAccountStatementsForInvestorQuery = {
  __typename?: "Query";
} & {
  apexGetAccountStatementsForInvestor?: Maybe<
    {
      __typename?: "GetStatementResponse";
    } & {
      statementsResponse: Array<
        Maybe<
          {
            __typename?: "StatementResponse2";
          } & Pick<
            StatementResponse2,
            "apexAccountId" | "documentType" | "statementURL" | "statmentDate"
          >
        >
      >;
    }
  >;
};
export type ApexGetAchrelationshipQueryVariables = Exact<{
  accountId: Scalars["String"];
  id: Scalars["String"];
}>;
export type ApexGetAchrelationshipQuery = {
  __typename?: "Query";
} & {
  apexGetAchrelationship?: Maybe<
    {
      __typename?: "GetApexACHRelationshipResponse";
    } & {
      apexAchRelationship: {
        __typename?: "ApexACHRelationship";
      } & Pick<
        ApexAchRelationship,
        | "accountId"
        | "apexRelationshipId"
        | "createdAt"
        | "id"
        | "linkedBankAccountId"
        | "metadata"
        | "status"
        | "updatedAt"
      >;
    }
  >;
};
export type ApexGetAchrelationshipsQueryVariables = Exact<{
  id: Scalars["String"];
}>;
export type ApexGetAchrelationshipsQuery = {
  __typename?: "Query";
} & {
  apexGetAchrelationships?: Maybe<
    {
      __typename?: "GetApexACHRelationshipsResponse";
    } & {
      apexAchRelationships: Array<
        Maybe<
          {
            __typename?: "ApexACHRelationship";
          } & Pick<
            ApexAchRelationship,
            | "accountId"
            | "apexRelationshipId"
            | "createdAt"
            | "id"
            | "linkedBankAccountId"
            | "metadata"
            | "status"
            | "updatedAt"
          >
        >
      >;
    }
  >;
};
export type ApexGetTradeConfirmQueryVariables = Exact<{
  confirmDate: Scalars["String"];
  id: Scalars["String"];
}>;
export type ApexGetTradeConfirmQuery = {
  __typename?: "Query";
} & {
  apexGetTradeConfirm?: Maybe<
    {
      __typename?: "GetTradeConfirmResponse";
    } & {
      confirmResponse: {
        __typename?: "ConfirmResponse2";
      } & Pick<ConfirmResponse2, "apexAccountId" | "confirmURL">;
    }
  >;
};
export type ApexGetTradeConfirmForInvestorQueryVariables = Exact<{
  confirmDate: Scalars["String"];
  investorId: Scalars["String"];
}>;
export type ApexGetTradeConfirmForInvestorQuery = {
  __typename?: "Query";
} & {
  apexGetTradeConfirmForInvestor?: Maybe<
    {
      __typename?: "GetTradeConfirmResponse";
    } & {
      confirmResponse: {
        __typename?: "ConfirmResponse2";
      } & Pick<ConfirmResponse2, "apexAccountId" | "confirmURL">;
    }
  >;
};
export type ApexGetTradeConfirmsQueryVariables = Exact<{
  confirmEndDate: Scalars["String"];
  confirmStartDate: Scalars["String"];
  id: Scalars["String"];
}>;
export type ApexGetTradeConfirmsQuery = {
  __typename?: "Query";
} & {
  apexGetTradeConfirms?: Maybe<
    {
      __typename?: "AccountTradeconfirms";
    } & {
      confirmsResponse: {
        __typename?: "ConfirmsResponse2";
      } & Pick<ConfirmsResponse2, "apexAccountId"> & {
          confirms: Array<
            Maybe<
              {
                __typename?: "DateConfirm";
              } & Pick<DateConfirm, "confirmURL" | "processDate">
            >
          >;
        };
    }
  >;
};
export type ApexGetTradeConfirmsForInvestorQueryVariables = Exact<{
  confirmEndDate: Scalars["String"];
  confirmStartDate: Scalars["String"];
  investorId: Scalars["String"];
}>;
export type ApexGetTradeConfirmsForInvestorQuery = {
  __typename?: "Query";
} & {
  apexGetTradeConfirmsForInvestor?: Maybe<
    {
      __typename?: "AccountTradeconfirms";
    } & {
      confirmsResponse: {
        __typename?: "ConfirmsResponse2";
      } & Pick<ConfirmsResponse2, "apexAccountId"> & {
          confirms: Array<
            Maybe<
              {
                __typename?: "DateConfirm";
              } & Pick<DateConfirm, "confirmURL" | "processDate">
            >
          >;
        };
    }
  >;
};
export type ApexGetTransferQueryVariables = Exact<{
  accountId: Scalars["String"];
  id: Scalars["String"];
}>;
export type ApexGetTransferQuery = {
  __typename?: "Query";
} & {
  apexGetTransfer?: Maybe<
    {
      __typename?: "AccountTransfer";
    } & {
      transfer: {
        __typename?: "ApexTransfer";
      } & Pick<
        ApexTransfer,
        | "accountId"
        | "achRelationshipId"
        | "amount"
        | "apexTransferId"
        | "createdAt"
        | "direction"
        | "id"
        | "metadata"
        | "status"
        | "transferId"
        | "transferMethod"
        | "updatedAt"
      >;
    }
  >;
};
export type ApexGetTransfersQueryVariables = Exact<{
  id: Scalars["String"];
}>;
export type ApexGetTransfersQuery = {
  __typename?: "Query";
} & {
  apexGetTransfers?: Maybe<
    {
      __typename?: "GetApexTransfersResponse2";
    } & {
      transfers: Array<
        Maybe<
          {
            __typename?: "ApexTransfer";
          } & Pick<
            ApexTransfer,
            | "accountId"
            | "achRelationshipId"
            | "amount"
            | "apexTransferId"
            | "createdAt"
            | "direction"
            | "id"
            | "metadata"
            | "status"
            | "transferId"
            | "transferMethod"
            | "updatedAt"
          >
        >
      >;
    }
  >;
};
export type ApexTradingGetTradePostingsQueryVariables = Exact<{
  orderId: Scalars["String"];
}>;
export type ApexTradingGetTradePostingsQuery = {
  __typename?: "Query";
} & {
  apexTradingGetTradePostings?: Maybe<
    {
      __typename?: "GetTradePostingsResponse";
    } & {
      tradePostings: Array<
        Maybe<
          {
            __typename?: "TradePosting";
          } & Pick<
            TradePosting,
            | "aleId"
            | "direction"
            | "errorDetails"
            | "orderId"
            | "price"
            | "quantity"
            | "state"
            | "ticker"
            | "tradePostingId"
            | "tradedAt"
            | "updatedAt"
          >
        >
      >;
    }
  >;
};
export type ApiManagerGetApicallRecordQueryVariables = Exact<{
  institutionId: Scalars["String"];
  recordId: Scalars["String"];
}>;
export type ApiManagerGetApicallRecordQuery = {
  __typename?: "Query";
} & {
  apiManagerGetApicallRecord?: Maybe<
    {
      __typename?: "GetApiCallRecordResponse";
    } & {
      apiCallRecord: {
        __typename?: "ApiCallRecord";
      } & Pick<
        ApiCallRecord,
        | "action"
        | "createdAt"
        | "id"
        | "institutionId"
        | "metadata"
        | "responseStatus"
        | "updatedAt"
        | "url"
      >;
    }
  >;
};
export type ApiManagerGetApicallRecordsQueryVariables = Exact<{
  institutionId: Scalars["String"];
}>;
export type ApiManagerGetApicallRecordsQuery = {
  __typename?: "Query";
} & {
  apiManagerGetApicallRecords?: Maybe<
    {
      __typename?: "GetApiCallRecordsResponse";
    } & {
      apiCallRecords: Array<
        Maybe<
          {
            __typename?: "ApiCallRecord";
          } & Pick<
            ApiCallRecord,
            | "action"
            | "createdAt"
            | "id"
            | "institutionId"
            | "metadata"
            | "responseStatus"
            | "updatedAt"
            | "url"
          >
        >
      >;
    }
  >;
};
export type ApiManagerGetOrderExecutionLogsQueryVariables = Exact<{
  orderId: Scalars["String"];
}>;
export type ApiManagerGetOrderExecutionLogsQuery = {
  __typename?: "Query";
} & {
  apiManagerGetOrderExecutionLogs?: Maybe<
    {
      __typename?: "GetExecutionLogsResponse";
    } & {
      executionLogs: Array<
        Maybe<
          {
            __typename?: "ExecutionLog";
          } & Pick<
            ExecutionLog,
            | "application"
            | "endpoint"
            | "failure"
            | "id"
            | "orderId"
            | "portfolioId"
            | "responseCode"
            | "state"
            | "timestamp"
            | "tradeId"
          >
        >
      >;
    }
  >;
};
export type ApiManagerGetPortfolioExecutionLogsQueryVariables = Exact<{
  portfolioId: Scalars["String"];
}>;
export type ApiManagerGetPortfolioExecutionLogsQuery = {
  __typename?: "Query";
} & {
  apiManagerGetPortfolioExecutionLogs?: Maybe<
    {
      __typename?: "GetExecutionLogsResponse";
    } & {
      executionLogs: Array<
        Maybe<
          {
            __typename?: "ExecutionLog";
          } & Pick<
            ExecutionLog,
            | "application"
            | "endpoint"
            | "failure"
            | "id"
            | "orderId"
            | "portfolioId"
            | "responseCode"
            | "state"
            | "timestamp"
            | "tradeId"
          >
        >
      >;
    }
  >;
};
export type ApiManagerGetTradeExecutionLogsQueryVariables = Exact<{
  tradeId: Scalars["String"];
}>;
export type ApiManagerGetTradeExecutionLogsQuery = {
  __typename?: "Query";
} & {
  apiManagerGetTradeExecutionLogs?: Maybe<
    {
      __typename?: "GetExecutionLogsResponse";
    } & {
      executionLogs: Array<
        Maybe<
          {
            __typename?: "ExecutionLog";
          } & Pick<
            ExecutionLog,
            | "application"
            | "endpoint"
            | "failure"
            | "id"
            | "orderId"
            | "portfolioId"
            | "responseCode"
            | "state"
            | "timestamp"
            | "tradeId"
          >
        >
      >;
    }
  >;
};
export type AwsManagerGetSearchStackQueryVariables = Exact<{
  id: Scalars["String"];
}>;
export type AwsManagerGetSearchStackQuery = {
  __typename?: "Query";
} & {
  awsManagerGetSearchStack?: Maybe<
    {
      __typename?: "GetSearchStackResponse";
    } & {
      searchStack: {
        __typename?: "SearchStack";
      } & Pick<
        SearchStack,
        | "createdAt"
        | "deadLetterQueueUrl"
        | "functionArn"
        | "functionName"
        | "id"
        | "metadata"
        | "tableName"
        | "tableStatus"
        | "updatedAt"
      >;
    }
  >;
};
export type AwsManagerGetSubscriptionQueryVariables = Exact<{
  id: Scalars["String"];
}>;
export type AwsManagerGetSubscriptionQuery = {
  __typename?: "Query";
} & {
  awsManagerGetSubscription?: Maybe<
    {
      __typename?: "GetSubscriptionResponse";
    } & {
      subscription: {
        __typename?: "Subscription2";
      } & Pick<
        Subscription2,
        | "createdAt"
        | "id"
        | "queueArn"
        | "queueUrl"
        | "subscriptionArn"
        | "topicArn"
        | "updatedAt"
      >;
    }
  >;
};
export type AwsManagerGetTopicQueryVariables = Exact<{
  id: Scalars["String"];
}>;
export type AwsManagerGetTopicQuery = {
  __typename?: "Query";
} & {
  awsManagerGetTopic?: Maybe<
    {
      __typename?: "GetTopicResponse";
    } & {
      topic: {
        __typename?: "Topic";
      } & Pick<Topic, "arn" | "createdAt" | "id" | "updatedAt">;
    }
  >;
};
export type BestFitGetPreferencesQueryVariables = Exact<{
  portfolioId: Scalars["String"];
}>;
export type BestFitGetPreferencesQuery = {
  __typename?: "Query";
} & {
  bestFitGetPreferences?: Maybe<
    {
      __typename?: "GetPreferencesResponse";
    } & {
      preferences: {
        __typename?: "Preferences";
      } & Pick<
        Preferences,
        | "assetClass"
        | "count"
        | "creditQualityBuckets"
        | "duration"
        | "excludedSubsectors"
        | "maturity"
        | "yield"
      >;
    }
  >;
};
export type BondviewGetIndexBondsQueryVariables = Exact<{
  date: Scalars["String"];
}>;
export type BondviewGetIndexBondsQuery = {
  __typename?: "Query";
} & {
  bondviewGetIndexBonds?: Maybe<
    {
      __typename?: "GetIndexBondsResponse";
    } & {
      indexBonds: Array<
        Maybe<
          {
            __typename?: "IndexBond";
          } & Pick<
            IndexBond,
            | "amountForSale90Days"
            | "coupon"
            | "cusip"
            | "figi"
            | "fundsHolding"
            | "marketSector"
            | "maturityDate"
            | "percentHeldInFunds"
            | "price"
            | "rank"
            | "securityDescription"
            | "state"
            | "totalSharesHeldInFunds"
            | "tradeVolume90Days"
          >
        >
      >;
    }
  >;
};
export type BondviewLoadAllIndexBondsQueryVariables = Exact<{
  [key: string]: never;
}>;
export type BondviewLoadAllIndexBondsQuery = {
  __typename?: "Query";
} & {
  bondviewLoadAllIndexBonds?: Maybe<
    {
      __typename?: "LoadAllIndexBondsResponse";
    } & Pick<LoadAllIndexBondsResponse, "numLoaded">
  >;
};
export type FileManagementDownloadFileQueryVariables = Exact<{
  fileId: Scalars["String"];
}>;
export type FileManagementDownloadFileQuery = {
  __typename?: "Query";
} & {
  fileManagementDownloadFile?: Maybe<
    {
      __typename?: "DownloadFileResponse";
    } & Pick<DownloadFileResponse, "file">
  >;
};
export type FileManagementListFilesQueryVariables = Exact<{
  affiliatedResource: AffiliatedResource;
  affiliatedResourceId: Scalars["String"];
}>;
export type FileManagementListFilesQuery = {
  __typename?: "Query";
} & {
  fileManagementListFiles?: Maybe<
    {
      __typename?: "ListFilesResponse";
    } & {
      filesList: Array<
        Maybe<
          {
            __typename?: "FileInfo";
          } & Pick<
            FileInfo,
            | "affiliatedResource"
            | "affiliatedResourceId"
            | "createdAt"
            | "documentName"
            | "fileExtension"
            | "fileId"
          >
        >
      >;
    }
  >;
};
export type IamAuthorizerequestQueryVariables = Exact<{
  [key: string]: never;
}>;
export type IamAuthorizerequestQuery = {
  __typename?: "Query";
} & {
  iamAuthorizerequest?: Maybe<
    {
      __typename?: "AuthorizeResponse";
    } & Pick<AuthorizeResponse, "allowed" | "message" | "timestamp">
  >;
};
export type IamGetCurrentUserQueryVariables = Exact<{
  [key: string]: never;
}>;
export type IamGetCurrentUserQuery = {
  __typename?: "Query";
} & {
  iamGetCurrentUser?: Maybe<
    {
      __typename?: "GetCurrentUserResponse";
    } & {
      user: {
        __typename?: "User";
      } & Pick<
        User,
        | "createdAt"
        | "email"
        | "first"
        | "id"
        | "institutionId"
        | "last"
        | "metadata"
        | "status"
        | "terms"
        | "updatedAt"
        | "userType"
      > & {
          policies?: Maybe<
            Array<
              Maybe<
                {
                  __typename?: "Policy";
                } & Pick<Policy, "actions" | "resource">
              >
            >
          >;
        };
    }
  >;
};
export type IamGetInstitutionQueryVariables = Exact<{
  institutionId: Scalars["String"];
}>;
export type IamGetInstitutionQuery = {
  __typename?: "Query";
} & {
  iamGetInstitution?: Maybe<
    {
      __typename?: "GetInstitutionResponse";
    } & {
      institution: {
        __typename?: "Institution";
      } & Pick<
        Institution,
        "createdAt" | "id" | "metadata" | "name" | "updatedAt"
      > & {
          machineUsers: Array<
            Maybe<
              {
                __typename?: "MachineUser";
              } & Pick<MachineUser, "clientId" | "clientSecret">
            >
          >;
          primaryContact: {
            __typename?: "PrimaryContact";
          } & Pick<PrimaryContact, "email" | "first" | "last">;
        };
    }
  >;
};
export type IamGetInstitutionInventoryMappingQueryVariables = Exact<{
  institutionId: Scalars["String"];
}>;
export type IamGetInstitutionInventoryMappingQuery = {
  __typename?: "Query";
} & {
  iamGetInstitutionInventoryMapping?: Maybe<
    {
      __typename?: "GetInventoryMappingResponse";
    } & {
      inventoryMapping: {
        __typename?: "InventoryMapping";
      } & Pick<
        InventoryMapping,
        "assetExplorer" | "bestFit" | "inpaas" | "institutionId" | "muniBestFit"
      >;
    }
  >;
};
export type IamGetInstitutionInvestorMappingQueryVariables = Exact<{
  investorId: Scalars["String"];
}>;
export type IamGetInstitutionInvestorMappingQuery = {
  __typename?: "Query";
} & {
  iamGetInstitutionInvestorMapping?: Maybe<
    {
      __typename?: "GetInvestorMappingResponse";
    } & {
      investorMapping: {
        __typename?: "InvestorMapping";
      } & Pick<InvestorMapping, "institutionId" | "investorId">;
    }
  >;
};
export type IamGetInstitutionPortfolioMappingQueryVariables = Exact<{
  portfolioId: Scalars["String"];
}>;
export type IamGetInstitutionPortfolioMappingQuery = {
  __typename?: "Query";
} & {
  iamGetInstitutionPortfolioMapping?: Maybe<
    {
      __typename?: "GetPortfolioMappingResponse";
    } & {
      portfolioMapping: {
        __typename?: "PortfolioMapping";
      } & Pick<PortfolioMapping, "institutionId" | "portfolioId">;
    }
  >;
};
export type IamGetInstitutionProposalMappingQueryVariables = Exact<{
  proposalId: Scalars["String"];
}>;
export type IamGetInstitutionProposalMappingQuery = {
  __typename?: "Query";
} & {
  iamGetInstitutionProposalMapping?: Maybe<
    {
      __typename?: "GetProposalMappingResponse";
    } & {
      proposalMapping: {
        __typename?: "ProposalMapping";
      } & Pick<ProposalMapping, "institutionId" | "proposalId">;
    }
  >;
};
export type IamGetInstitutionRolesMappingQueryVariables = Exact<{
  institutionId: Scalars["String"];
}>;
export type IamGetInstitutionRolesMappingQuery = {
  __typename?: "Query";
} & {
  iamGetInstitutionRolesMapping?: Maybe<
    {
      __typename?: "GetRolesMappingResponse";
    } & {
      roles: Array<
        Maybe<
          {
            __typename?: "RoleMapping";
          } & Pick<RoleMapping, "institutionId" | "roleId" | "userType">
        >
      >;
    }
  >;
};
export type IamGetInstitutionUserMappingQueryVariables = Exact<{
  userId: Scalars["String"];
}>;
export type IamGetInstitutionUserMappingQuery = {
  __typename?: "Query";
} & {
  iamGetInstitutionUserMapping?: Maybe<
    {
      __typename?: "GetUserMappingResponse";
    } & {
      userMapping: {
        __typename?: "UserMapping";
      } & Pick<
        UserMapping,
        "email" | "institutionId" | "roles" | "userId" | "userType"
      >;
    }
  >;
};
export type IamGetInstitutionUserMappingByEmailQueryVariables = Exact<{
  email: Scalars["String"];
}>;
export type IamGetInstitutionUserMappingByEmailQuery = {
  __typename?: "Query";
} & {
  iamGetInstitutionUserMappingByEmail?: Maybe<
    {
      __typename?: "GetUserMappingResponse";
    } & {
      userMapping: {
        __typename?: "UserMapping";
      } & Pick<
        UserMapping,
        "email" | "institutionId" | "roles" | "userId" | "userType"
      >;
    }
  >;
};
export type IamGetPasswordResetTicketQueryVariables = Exact<{
  ticketId: Scalars["String"];
}>;
export type IamGetPasswordResetTicketQuery = {
  __typename?: "Query";
} & {
  iamGetPasswordResetTicket?: Maybe<
    {
      __typename?: "GetPasswordResetTicketResponse";
    } & Pick<GetPasswordResetTicketResponse, "expired">
  >;
};
export type IamGetRoleQueryVariables = Exact<{
  id: Scalars["String"];
}>;
export type IamGetRoleQuery = {
  __typename?: "Query";
} & {
  iamGetRole?: Maybe<
    {
      __typename?: "GetRoleResponse";
    } & {
      role: {
        __typename?: "Role";
      } & Pick<Role, "id"> & {
          policies: Array<
            Maybe<
              {
                __typename?: "Policy";
              } & Pick<Policy, "actions" | "resource">
            >
          >;
        };
    }
  >;
};
export type IamGetRoleBindingQueryVariables = Exact<{
  id: Scalars["String"];
}>;
export type IamGetRoleBindingQuery = {
  __typename?: "Query";
} & {
  iamGetRoleBinding?: Maybe<
    {
      __typename?: "GetRoleBindingResponse";
    } & {
      roleBinding: {
        __typename?: "RoleBinding";
      } & Pick<RoleBinding, "id" | "principalId" | "principalType" | "roleId">;
    }
  >;
};
export type IamGetRoleBindingsQueryVariables = Exact<{
  roleId: Scalars["String"];
}>;
export type IamGetRoleBindingsQuery = {
  __typename?: "Query";
} & {
  iamGetRoleBindings?: Maybe<
    {
      __typename?: "GetRoleBindingsResponse";
    } & {
      roleBindings: Array<
        Maybe<
          {
            __typename?: "RoleBinding";
          } & Pick<
            RoleBinding,
            "id" | "principalId" | "principalType" | "roleId"
          >
        >
      >;
    }
  >;
};
export type IamGetRoleBindingsForSubjectQueryVariables = Exact<{
  sub: Scalars["String"];
}>;
export type IamGetRoleBindingsForSubjectQuery = {
  __typename?: "Query";
} & {
  iamGetRoleBindingsForSubject?: Maybe<
    {
      __typename?: "GetRoleBindingsForSubjectResponse";
    } & {
      roleBindings: Array<
        Maybe<
          {
            __typename?: "RoleBinding";
          } & Pick<
            RoleBinding,
            "id" | "principalId" | "principalType" | "roleId"
          >
        >
      >;
    }
  >;
};
export type IamGetRolesForSubjectQueryVariables = Exact<{
  sub: Scalars["String"];
}>;
export type IamGetRolesForSubjectQuery = {
  __typename?: "Query";
} & {
  iamGetRolesForSubject?: Maybe<
    {
      __typename?: "GetRolesForSubjectResponse";
    } & {
      roles: Array<
        Maybe<
          {
            __typename?: "Role";
          } & Pick<Role, "id"> & {
              policies: Array<
                Maybe<
                  {
                    __typename?: "Policy";
                  } & Pick<Policy, "actions" | "resource">
                >
              >;
            }
        >
      >;
    }
  >;
};
export type IamGetUserQueryVariables = Exact<{
  id: Scalars["String"];
}>;
export type IamGetUserQuery = {
  __typename?: "Query";
} & {
  iamGetUser?: Maybe<
    {
      __typename?: "GetUserResponse";
    } & {
      user: {
        __typename?: "User";
      } & Pick<
        User,
        | "createdAt"
        | "email"
        | "first"
        | "id"
        | "institutionId"
        | "last"
        | "metadata"
        | "status"
        | "terms"
        | "updatedAt"
        | "userType"
      > & {
          policies?: Maybe<
            Array<
              Maybe<
                {
                  __typename?: "Policy";
                } & Pick<Policy, "actions" | "resource">
              >
            >
          >;
        };
    }
  >;
};
export type IamGetUserInviteQueryVariables = Exact<{
  email: Scalars["String"];
}>;
export type IamGetUserInviteQuery = {
  __typename?: "Query";
} & {
  iamGetUserInvite?: Maybe<
    {
      __typename?: "GetUserInviteResponse";
    } & {
      invitedUser: {
        __typename?: "InvitedUser";
      } & Pick<
        InvitedUser,
        | "createdAt"
        | "email"
        | "firstName"
        | "institutionId"
        | "invitedBy"
        | "lastName"
        | "nonce"
        | "status"
        | "userType"
      >;
    }
  >;
};
export type IamGetUserInviteListQueryVariables = Exact<{
  institutionId: Scalars["String"];
}>;
export type IamGetUserInviteListQuery = {
  __typename?: "Query";
} & {
  iamGetUserInviteList?: Maybe<
    {
      __typename?: "GetUserInviteListResponse";
    } & {
      invitedUsers: Array<
        Maybe<
          {
            __typename?: "InvitedUser";
          } & Pick<
            InvitedUser,
            | "createdAt"
            | "email"
            | "firstName"
            | "institutionId"
            | "invitedBy"
            | "lastName"
            | "nonce"
            | "status"
            | "userType"
          >
        >
      >;
    }
  >;
};
export type IamValidateUserInviteQueryVariables = Exact<{
  email: Scalars["String"];
  state: Scalars["String"];
}>;
export type IamValidateUserInviteQuery = {
  __typename?: "Query";
} & {
  iamValidateUserInvite?: Maybe<
    {
      __typename?: "ValidateUserInviteResponse";
    } & Pick<ValidateUserInviteResponse, "inviteStatus">
  >;
};
export type IceDataGetByCusipQueryVariables = Exact<{
  cusip: Scalars["String"];
  endDate?: Maybe<Scalars["String"]>;
  includeDeleted?: Maybe<Scalars["Boolean"]>;
  startDate?: Maybe<Scalars["String"]>;
}>;
export type IceDataGetByCusipQuery = {
  __typename?: "Query";
} & {
  iceDataGetByCusip?: Maybe<
    {
      __typename?: "GetByCusipResponse";
    } & {
      iceData: Array<
        Maybe<
          {
            __typename?: "IncrementalData";
          } & Pick<
            IncrementalData,
            | "benchmarkCusip"
            | "benchmarkPrice"
            | "benchmarkPriceType"
            | "coverBid"
            | "cusip"
            | "entryDate"
            | "entryPrice"
            | "entrySize"
            | "entryTime"
            | "entryType"
            | "entryUpdateAction"
            | "executionType"
            | "hitOrLiftSide"
            | "id"
            | "impliedSpread"
            | "mineFlag"
            | "minimumBalanceRemaining"
            | "minimumIncrement"
            | "minimumQuantity"
            | "product"
            | "updatedAt"
            | "yieldToMaturity"
            | "yieldToWorst"
          >
        >
      >;
    }
  >;
};
export type IncomePortfoliosGetComparisonsQueryVariables = Exact<{
  getComparisonsRequestInput?: Maybe<GetComparisonsRequestInput>;
}>;
export type IncomePortfoliosGetComparisonsQuery = {
  __typename?: "Query";
} & {
  incomePortfoliosGetComparisons?: Maybe<
    {
      __typename?: "GetComparisonsResponse";
    } & {
      comparisons: Array<
        Maybe<
          {
            __typename?: "Comparison";
          } & Pick<
            Comparison,
            | "average"
            | "comparisonType"
            | "difference"
            | "inpaas"
            | "percentageDifference"
          >
        >
      >;
    }
  >;
};
export type IncomePortfoliosGetMinMaxRiskQueryVariables = Exact<{
  getMinMaxRiskRequestInput?: Maybe<GetMinMaxRiskRequestInput>;
}>;
export type IncomePortfoliosGetMinMaxRiskQuery = {
  __typename?: "Query";
} & {
  incomePortfoliosGetMinMaxRisk?: Maybe<
    {
      __typename?: "GetMinMaxRiskResponse";
    } & Pick<GetMinMaxRiskResponse, "maxRisk" | "minRisk">
  >;
};
export type IncomePortfoliosGetMinMaxYieldQueryVariables = Exact<{
  getMinMaxYieldRequestInput?: Maybe<GetMinMaxYieldRequestInput>;
}>;
export type IncomePortfoliosGetMinMaxYieldQuery = {
  __typename?: "Query";
} & {
  incomePortfoliosGetMinMaxYield?: Maybe<
    {
      __typename?: "GetMinMaxYieldResponse";
    } & Pick<GetMinMaxYieldResponse, "maxYield" | "minYield">
  >;
};
export type IncomePortfoliosGetPortfolioMappingQueryVariables = Exact<{
  portfolioId: Scalars["String"];
}>;
export type IncomePortfoliosGetPortfolioMappingQuery = {
  __typename?: "Query";
} & {
  incomePortfoliosGetPortfolioMapping?: Maybe<
    {
      __typename?: "GetPortfolioMappingResponse2";
    } & {
      portfolioMapping: {
        __typename?: "PortfolioMapping2";
      } & Pick<
        PortfolioMapping2,
        "portfolioId" | "portfolioType" | "proposalId"
      >;
    }
  >;
};
export type IncomePortfoliosGetProposalQueryVariables = Exact<{
  proposalId: Scalars["String"];
}>;
export type IncomePortfoliosGetProposalQuery = {
  __typename?: "Query";
} & {
  incomePortfoliosGetProposal?: Maybe<
    {
      __typename?: "GetProposalResponse";
    } & {
      proposal: {
        __typename?: "Proposal";
      } & Pick<Proposal, "proposalId" | "updatedAt"> & {
          commentary: Array<
            Maybe<
              {
                __typename?: "CommentaryItem";
              } & Pick<CommentaryItem, "content" | "topic">
            >
          >;
          incomePortfoliosAnalysis: {
            __typename?: "IncomePortfoliosAnalysis";
          } & Pick<
            IncomePortfoliosAnalysis,
            | "afterTaxYield"
            | "expenseRatio"
            | "income"
            | "maxDrawdown"
            | "risk"
            | "yield"
          > & {
              commentary?: Maybe<
                Array<
                  Maybe<
                    {
                      __typename?: "CommentaryItem";
                    } & Pick<CommentaryItem, "content" | "topic">
                  >
                >
              >;
              comparisons?: Maybe<
                Array<
                  Maybe<
                    {
                      __typename?: "Comparison";
                    } & Pick<
                      Comparison,
                      | "average"
                      | "comparisonType"
                      | "difference"
                      | "inpaas"
                      | "percentageDifference"
                    >
                  >
                >
              >;
            };
          orders?: Maybe<
            Array<
              Maybe<
                {
                  __typename?: "Order";
                } & Pick<
                  Order,
                  "assetId" | "direction" | "marketValue" | "quantity"
                >
              >
            >
          >;
          originalIncomePortfoliosAnalysis?: Maybe<
            {
              __typename?: "IncomePortfoliosAnalysis";
            } & Pick<
              IncomePortfoliosAnalysis,
              | "afterTaxYield"
              | "expenseRatio"
              | "income"
              | "maxDrawdown"
              | "risk"
              | "yield"
            > & {
                commentary?: Maybe<
                  Array<
                    Maybe<
                      {
                        __typename?: "CommentaryItem";
                      } & Pick<CommentaryItem, "content" | "topic">
                    >
                  >
                >;
                comparisons?: Maybe<
                  Array<
                    Maybe<
                      {
                        __typename?: "Comparison";
                      } & Pick<
                        Comparison,
                        | "average"
                        | "comparisonType"
                        | "difference"
                        | "inpaas"
                        | "percentageDifference"
                      >
                    >
                  >
                >;
              }
          >;
          portfolio: {
            __typename?: "Portfolio";
          } & Pick<
            Portfolio,
            | "accountNumber"
            | "app"
            | "createdAt"
            | "currency"
            | "description"
            | "id"
            | "metadata"
            | "name"
            | "status"
            | "updatedAt"
          > & {
              positions: Array<
                Maybe<
                  {
                    __typename?: "PositionsListItem";
                  } & Pick<
                    PositionsListItem,
                    | "assetId"
                    | "costBasis"
                    | "createdAt"
                    | "id"
                    | "metadata"
                    | "portfolioId"
                    | "quantity"
                    | "settled"
                    | "tradeDate"
                    | "unsettled"
                    | "updatedAt"
                  >
                >
              >;
            };
          proposalRequest: {
            __typename?: "ProposalRequest";
          } & Pick<
            ProposalRequest,
            "investmentAmount" | "portfolioId" | "whitelist"
          > & {
              constraints?: Maybe<
                {
                  __typename?: "Constraints";
                } & Pick<Constraints, "maximumWeight" | "minimumWeight">
              >;
              goal: {
                __typename?: "Goal";
              } & Pick<Goal, "income" | "risk" | "yield">;
              taxBrackets?: Maybe<
                {
                  __typename?: "TaxBrackets";
                } & Pick<TaxBrackets, "federalTaxRate" | "stateTaxRate">
              >;
            };
        };
    }
  >;
};
export type InpaasGetPortfolioQueryVariables = Exact<{
  institution: Scalars["String"];
  portfolioId: Scalars["String"];
}>;
export type InpaasGetPortfolioQuery = {
  __typename?: "Query";
} & {
  inpaasGetPortfolio?: Maybe<
    {
      __typename?: "GetPortfolioResponse";
    } & {
      analysis: {
        __typename?: "Analysis";
      } & Pick<
        Analysis,
        | "afterTaxYield"
        | "expenseRatio"
        | "income"
        | "maxDrawdown"
        | "risk"
        | "yield"
      > & {
          commentary?: Maybe<
            Array<
              Maybe<
                {
                  __typename?: "CommentaryItem";
                } & Pick<CommentaryItem, "content" | "topic">
              >
            >
          >;
          comparisons?: Maybe<
            Array<
              Maybe<
                {
                  __typename?: "Comparison2";
                } & Pick<
                  Comparison2,
                  | "average"
                  | "comparisonType"
                  | "difference"
                  | "inpaas"
                  | "percentageDifference"
                >
              >
            >
          >;
        };
      portfolio: {
        __typename?: "Portfolio2";
      } & Pick<
        Portfolio2,
        "createdAt" | "currency" | "id" | "metadata" | "name" | "updatedAt"
      > & {
          positions: Array<
            Maybe<
              {
                __typename?: "Position";
              } & Pick<
                Position,
                | "assetId"
                | "id"
                | "marketValue"
                | "name"
                | "price"
                | "quantity"
                | "weight"
                | "yield"
              > & {
                  publicIdentifiers: {
                    __typename?: "PublicIdentifiers";
                  } & Pick<
                    PublicIdentifiers,
                    "cusip" | "isin" | "sedol" | "ticker"
                  >;
                }
            >
          >;
        };
      proposalRequest: {
        __typename?: "ProposalRequest2";
      } & Pick<ProposalRequest2, "investmentAmount" | "portfolioId"> & {
          constraints?: Maybe<
            {
              __typename?: "Constraints";
            } & Pick<Constraints, "maximumWeight" | "minimumWeight">
          >;
          goal: {
            __typename?: "Goal";
          } & Pick<Goal, "income" | "risk" | "yield">;
          taxBrackets?: Maybe<
            {
              __typename?: "TaxBrackets2";
            } & Pick<TaxBrackets2, "federalTaxRate" | "stateTaxRate">
          >;
        };
    }
  >;
};
export type InpaasGetPortfolioMappingQueryVariables = Exact<{
  institution: Scalars["String"];
  portfolioId: Scalars["String"];
}>;
export type InpaasGetPortfolioMappingQuery = {
  __typename?: "Query";
} & {
  inpaasGetPortfolioMapping?: Maybe<
    {
      __typename?: "GetPortfolioMappingResponse";
    } & {
      portfolioMapping: {
        __typename?: "PortfolioMapping";
      } & Pick<PortfolioMapping, "institutionId" | "portfolioId">;
    }
  >;
};
export type InpaasGetProposalQueryVariables = Exact<{
  institution: Scalars["String"];
  proposalId: Scalars["String"];
}>;
export type InpaasGetProposalQuery = {
  __typename?: "Query";
} & {
  inpaasGetProposal?: Maybe<
    {
      __typename?: "GetProposalResponse2";
    } & {
      proposal: {
        __typename?: "Proposal2";
      } & Pick<Proposal2, "proposalId" | "updatedAt"> & {
          analysis: {
            __typename?: "Analysis";
          } & Pick<
            Analysis,
            | "afterTaxYield"
            | "expenseRatio"
            | "income"
            | "maxDrawdown"
            | "risk"
            | "yield"
          > & {
              commentary?: Maybe<
                Array<
                  Maybe<
                    {
                      __typename?: "CommentaryItem";
                    } & Pick<CommentaryItem, "content" | "topic">
                  >
                >
              >;
              comparisons?: Maybe<
                Array<
                  Maybe<
                    {
                      __typename?: "Comparison2";
                    } & Pick<
                      Comparison2,
                      | "average"
                      | "comparisonType"
                      | "difference"
                      | "inpaas"
                      | "percentageDifference"
                    >
                  >
                >
              >;
            };
          commentary: Array<
            Maybe<
              {
                __typename?: "CommentaryItem";
              } & Pick<CommentaryItem, "content" | "topic">
            >
          >;
          orders?: Maybe<
            Array<
              Maybe<
                {
                  __typename?: "Order";
                } & Pick<
                  Order,
                  "assetId" | "direction" | "marketValue" | "quantity"
                >
              >
            >
          >;
          originalAnalysis?: Maybe<
            {
              __typename?: "Analysis";
            } & Pick<
              Analysis,
              | "afterTaxYield"
              | "expenseRatio"
              | "income"
              | "maxDrawdown"
              | "risk"
              | "yield"
            > & {
                commentary?: Maybe<
                  Array<
                    Maybe<
                      {
                        __typename?: "CommentaryItem";
                      } & Pick<CommentaryItem, "content" | "topic">
                    >
                  >
                >;
                comparisons?: Maybe<
                  Array<
                    Maybe<
                      {
                        __typename?: "Comparison2";
                      } & Pick<
                        Comparison2,
                        | "average"
                        | "comparisonType"
                        | "difference"
                        | "inpaas"
                        | "percentageDifference"
                      >
                    >
                  >
                >;
              }
          >;
          portfolio: {
            __typename?: "Portfolio2";
          } & Pick<
            Portfolio2,
            "createdAt" | "currency" | "id" | "metadata" | "name" | "updatedAt"
          > & {
              positions: Array<
                Maybe<
                  {
                    __typename?: "Position";
                  } & Pick<
                    Position,
                    | "assetId"
                    | "id"
                    | "marketValue"
                    | "name"
                    | "price"
                    | "quantity"
                    | "weight"
                    | "yield"
                  > & {
                      publicIdentifiers: {
                        __typename?: "PublicIdentifiers";
                      } & Pick<
                        PublicIdentifiers,
                        "cusip" | "isin" | "sedol" | "ticker"
                      >;
                    }
                >
              >;
            };
          proposalRequest: {
            __typename?: "ProposalRequest2";
          } & Pick<ProposalRequest2, "investmentAmount" | "portfolioId"> & {
              constraints?: Maybe<
                {
                  __typename?: "Constraints";
                } & Pick<Constraints, "maximumWeight" | "minimumWeight">
              >;
              goal: {
                __typename?: "Goal";
              } & Pick<Goal, "income" | "risk" | "yield">;
              taxBrackets?: Maybe<
                {
                  __typename?: "TaxBrackets2";
                } & Pick<TaxBrackets2, "federalTaxRate" | "stateTaxRate">
              >;
            };
        };
    }
  >;
};
export type InvestorDownloadFileQueryVariables = Exact<{
  fileId: Scalars["String"];
}>;
export type InvestorDownloadFileQuery = {
  __typename?: "Query";
} & {
  investorDownloadFile?: Maybe<
    {
      __typename?: "DownloadFileResponse";
    } & Pick<DownloadFileResponse, "file">
  >;
};
export type InvestorGetQueryVariables = Exact<{
  investorId: Scalars["String"];
}>;
export type InvestorGetQuery = {
  __typename?: "Query";
} & {
  investorGet?: Maybe<
    {
      __typename?: "GetInvestorResponse";
    } & {
      investor: {
        __typename?: "Investor";
      } & Pick<
        Investor,
        | "createdAt"
        | "id"
        | "investorType"
        | "metadata"
        | "status"
        | "updatedAt"
      > & {
          investorInfo: {
            __typename?: "InvestorInfo";
          } & Pick<
            InvestorInfo,
            | "birthCountry"
            | "catAccountHolderType"
            | "citizenshipCountry"
            | "familyName"
            | "givenName"
            | "investorType"
            | "isPermanentResident"
            | "issuerDirectCommunication"
            | "organizationName"
            | "title"
          > & {
              applicantSignature: {
                __typename?: "ApplicantSignature2";
              } & Pick<ApplicantSignature2, "eSigned">;
              beneficialOwnersAndOfficers?: Maybe<
                {
                  __typename?: "BeneficialOwnersAndOfficers";
                } & Pick<
                  BeneficialOwnersAndOfficers,
                  "businessClassification"
                > & {
                    beneficialOwners: Array<
                      Maybe<
                        {
                          __typename?: "BeneficialOwners3";
                        } & Pick<
                          BeneficialOwners3,
                          | "dateOfBirth"
                          | "identificationNumber"
                          | "socialSecurityNumber"
                        > & {
                            address: {
                              __typename?: "Address";
                            } & Pick<
                              Address,
                              | "city"
                              | "country"
                              | "postalCode"
                              | "state"
                              | "streetAddress"
                            >;
                            name: {
                              __typename?: "Name";
                            } & Pick<
                              Name,
                              "familyName" | "givenName" | "legalName"
                            >;
                          }
                      >
                    >;
                    officers: Array<
                      Maybe<
                        {
                          __typename?: "Officers2";
                        } & Pick<
                          Officers2,
                          | "dateOfBirth"
                          | "identificationNumber"
                          | "socialSecurityNumber"
                        > & {
                            address: {
                              __typename?: "Address";
                            } & Pick<
                              Address,
                              | "city"
                              | "country"
                              | "postalCode"
                              | "state"
                              | "streetAddress"
                            >;
                            name: {
                              __typename?: "Name";
                            } & Pick<
                              Name,
                              "familyName" | "givenName" | "legalName"
                            >;
                          }
                      >
                    >;
                  }
              >;
              cashAccountAgreement?: Maybe<
                {
                  __typename?: "CashAccountAgreement";
                } & Pick<
                  CashAccountAgreement,
                  | "articlesOfIncorporationSnapId"
                  | "authorizedOfficerName"
                  | "authorizedOfficerTitle"
                  | "corporationName"
                  | "isAuthorizedOfficerESigned"
                  | "isSecretaryESigned"
                  | "secretaryName"
                  | "stateOfIncorporation"
                >
              >;
              contactInformation: {
                __typename?: "ContactInformation";
              } & Pick<
                ContactInformation,
                | "city"
                | "country"
                | "emailAddresses"
                | "phone"
                | "phoneType"
                | "postalCode"
                | "state"
                | "streetAddress"
              >;
              disclosures: {
                __typename?: "Disclosures2";
              } & Pick<
                Disclosures2,
                | "affiliatedApproval"
                | "companySymbols"
                | "firmName"
                | "isAffiliatedExchangeOrFINRA"
                | "isControlPerson"
                | "isPoliticallyExposed"
              > & {
                  interestedParties?: Maybe<
                    Array<
                      Maybe<
                        {
                          __typename?: "InterestedParties4";
                        } & {
                          mailingAddress: {
                            __typename?: "InterestedPartyAddress";
                          } & Pick<
                            InterestedPartyAddress,
                            | "city"
                            | "country"
                            | "postalCode"
                            | "state"
                            | "streetAddress"
                          >;
                          name: {
                            __typename?: "InterestedPartyName";
                          } & Pick<InterestedPartyName, "companyName">;
                        }
                      >
                    >
                  >;
                  politicalExposureDetail?: Maybe<
                    {
                      __typename?: "PoliticalExposureDetail2";
                    } & Pick<
                      PoliticalExposureDetail2,
                      "immediateFamily" | "politicalOrganization"
                    >
                  >;
                };
              employment?: Maybe<
                {
                  __typename?: "Employment2";
                } & Pick<
                  Employment2,
                  "employer" | "employmentStatus" | "positionEmployed"
                >
              >;
              entityDueDiligence?: Maybe<
                {
                  __typename?: "EntityDueDiligence";
                } & Pick<
                  EntityDueDiligence,
                  "assessedRiskRating" | "entityOrAssociatesHaveNegativeNews"
                > & {
                    accountActivity: {
                      __typename?: "AccountActivity";
                    } & Pick<
                      AccountActivity,
                      | "expectedWithdrawalFrequency"
                      | "initialDepositAmount"
                      | "initialDepositSource"
                      | "primaryEntityAccountActivity"
                      | "willTransactForeignBonds"
                      | "willTransactLowPricedSecurities"
                    >;
                    accountInformation: {
                      __typename?: "DueDiligenceAccountInformation2";
                    } & Pick<
                      DueDiligenceAccountInformation2,
                      | "accountName"
                      | "businessLocations"
                      | "countryOfIncorporation"
                      | "hasRelatedAccounts"
                    > & {
                        relatedAccountList?: Maybe<
                          Array<
                            Maybe<
                              {
                                __typename?: "RelatedAccounts2";
                              } & Pick<
                                RelatedAccounts2,
                                "accountNumber" | "entityName"
                              >
                            >
                          >
                        >;
                      };
                    additionalAccounts: {
                      __typename?: "AdditionalAccounts";
                    } & Pick<
                      AdditionalAccounts,
                      | "confirmEntityDoesNotIssueBearerShares"
                      | "institutionNames"
                      | "primaryOngoingFundingSource"
                      | "primaryOngoingFundingSourceClarification"
                      | "scopeOfBusiness"
                      | "scopeOfBusinessClarification"
                    >;
                    politicallyExposedPersons: {
                      __typename?: "PoliticallyExposedPersons";
                    } & Pick<
                      PoliticallyExposedPersons,
                      "isPoliticallyExposed"
                    > & {
                        politicalOfficials?: Maybe<
                          Array<
                            Maybe<
                              {
                                __typename?: "PoliticalOfficials3";
                              } & Pick<
                                PoliticalOfficials3,
                                | "immediateFamily"
                                | "legalName"
                                | "politicalOrganization"
                                | "politicalTitle"
                                | "role"
                              >
                            >
                          >
                        >;
                      };
                  }
              >;
              exemptLegalCustomer?: Maybe<
                {
                  __typename?: "ExemptLegalCustomer";
                } & Pick<
                  ExemptLegalCustomer,
                  "exemption" | "isExemptLegalCustomer"
                >
              >;
              investmentProfile?: Maybe<
                {
                  __typename?: "InvestmentProfile2";
                } & Pick<
                  InvestmentProfile2,
                  | "annualIncomeUSD"
                  | "federalTaxBracketPercent"
                  | "investmentExperience"
                  | "investmentObjective"
                  | "liquidNetWorthUSD"
                  | "riskTolerance"
                  | "totalNetWorthUSD"
                >
              >;
              llcAccountAgreement?: Maybe<
                {
                  __typename?: "LlcAccountAgreement";
                } & Pick<
                  LlcAccountAgreement,
                  | "authorizedSignerName"
                  | "authorizedSignerTitle"
                  | "entityName"
                  | "isAuthorizedSignerESigned"
                  | "resolutionAdoptionDate"
                  | "stateOfOrigin"
                > & {
                    membersAndManagers: Array<
                      Maybe<
                        {
                          __typename?: "MembersAndManagers2";
                        } & Pick<
                          MembersAndManagers2,
                          | "isManager"
                          | "isManagerESigned"
                          | "legalName"
                          | "organizationalRole"
                        >
                      >
                    >;
                  }
              >;
              organization?: Maybe<
                {
                  __typename?: "Organization";
                } & Pick<
                  Organization,
                  | "entityType"
                  | "foreignBankUSAgent"
                  | "isForeignBank"
                  | "isMaintainedForForeignFinancialInstitution"
                  | "uploadedWNineForm"
                  | "usEntity"
                >
              >;
              suitabilityProfile: {
                __typename?: "SuitabilityProfile";
              } & Pick<SuitabilityProfile, "liquidityNeeds" | "timeHorizon">;
              trustedContactInfo: {
                __typename?: "TrustedContactInfo";
              } & Pick<TrustedContactInfo, "trustedContact"> & {
                  trustedContactPerson?: Maybe<
                    {
                      __typename?: "TrustedContactPerson";
                    } & Pick<
                      TrustedContactPerson,
                      "emailAddress" | "familyName" | "givenName"
                    >
                  >;
                };
              wnineTaxForm?: Maybe<
                {
                  __typename?: "WNineTaxForm";
                } & Pick<WNineTaxForm, "exemptPayeeCode" | "exemptionFromFatca">
              >;
            };
        };
    }
  >;
};
export type InvestorGetDeliveryInstructionsByIdQueryVariables = Exact<{
  investorId: Scalars["String"];
}>;
export type InvestorGetDeliveryInstructionsByIdQuery = {
  __typename?: "Query";
} & {
  investorGetDeliveryInstructionsById?: Maybe<
    {
      __typename?: "GetDeliveryInstructionsByInvestorIdResponse";
    } & {
      deliveryInstructions: Array<
        Maybe<
          {
            __typename?: "PortfolioDeliveryInstruction";
          } & Pick<
            PortfolioDeliveryInstruction,
            | "cashOnly"
            | "createdAt"
            | "id"
            | "investorId"
            | "metadata"
            | "portfolioId"
            | "updatedAt"
          > & {
              instructions: Array<
                Maybe<
                  {
                    __typename?: "ExternalEntity";
                  } & Pick<
                    ExternalEntity,
                    "externalEntityId" | "externalEntityType"
                  >
                >
              >;
            }
        >
      >;
    }
  >;
};
export type InvestorGetLinkedBankAccountQueryVariables = Exact<{
  investorId: Scalars["String"];
  linkedBankAccountId: Scalars["String"];
}>;
export type InvestorGetLinkedBankAccountQuery = {
  __typename?: "Query";
} & {
  investorGetLinkedBankAccount?: Maybe<
    {
      __typename?: "GetLinkedBankAccountResponse";
    } & {
      linkedBankAccount: {
        __typename?: "LinkedBankAccount";
      } & Pick<
        LinkedBankAccount,
        | "accountType"
        | "bankName"
        | "createdAt"
        | "id"
        | "investorId"
        | "mask"
        | "metadata"
        | "status"
        | "updatedAt"
      >;
    }
  >;
};
export type InvestorGetLinkedBankAccountBalanceQueryVariables = Exact<{
  investorId: Scalars["String"];
  linkedBankAccountId: Scalars["String"];
}>;
export type InvestorGetLinkedBankAccountBalanceQuery = {
  __typename?: "Query";
} & {
  investorGetLinkedBankAccountBalance?: Maybe<
    {
      __typename?: "GetLinkedBankAccountBalanceResponse";
    } & {
      balance: {
        __typename?: "Balance";
      } & Pick<Balance, "availableBalance" | "id" | "timestamp">;
    }
  >;
};
export type InvestorGetLinkedBankAccountsQueryVariables = Exact<{
  investorId: Scalars["String"];
}>;
export type InvestorGetLinkedBankAccountsQuery = {
  __typename?: "Query";
} & {
  investorGetLinkedBankAccounts?: Maybe<
    {
      __typename?: "GetLinkedBankAccountsResponse";
    } & {
      linkedBankAccounts: Array<
        Maybe<
          {
            __typename?: "LinkedBankAccount";
          } & Pick<
            LinkedBankAccount,
            | "accountType"
            | "bankName"
            | "createdAt"
            | "id"
            | "investorId"
            | "mask"
            | "metadata"
            | "status"
            | "updatedAt"
          >
        >
      >;
    }
  >;
};
export type InvestorGetPortfolioDeliveryInstructionQueryVariables = Exact<{
  portfolioId: Scalars["String"];
}>;
export type InvestorGetPortfolioDeliveryInstructionQuery = {
  __typename?: "Query";
} & {
  investorGetPortfolioDeliveryInstruction?: Maybe<
    {
      __typename?: "GetPortfolioDeliveryInstructionResponse";
    } & {
      portfolioDeliveryInstruction: {
        __typename?: "PortfolioDeliveryInstruction";
      } & Pick<
        PortfolioDeliveryInstruction,
        | "cashOnly"
        | "createdAt"
        | "id"
        | "investorId"
        | "metadata"
        | "portfolioId"
        | "updatedAt"
      > & {
          instructions: Array<
            Maybe<
              {
                __typename?: "ExternalEntity";
              } & Pick<
                ExternalEntity,
                "externalEntityId" | "externalEntityType"
              >
            >
          >;
        };
    }
  >;
};
export type InvestorGetTransferQueryVariables = Exact<{
  investorId: Scalars["String"];
  transferId: Scalars["String"];
}>;
export type InvestorGetTransferQuery = {
  __typename?: "Query";
} & {
  investorGetTransfer?: Maybe<
    {
      __typename?: "GetTransferResponse";
    } & {
      transfer: {
        __typename?: "Transfer3";
      } & Pick<
        Transfer3,
        | "amount"
        | "createdAt"
        | "currency"
        | "direction"
        | "id"
        | "investorId"
        | "ledgerId"
        | "linkedBankAccountId"
        | "metadata"
        | "portfolioId"
        | "status"
        | "transferMethod"
        | "updatedAt"
      > & {
          externalEntity?: Maybe<
            {
              __typename?: "ExternalEntity";
            } & Pick<ExternalEntity, "externalEntityId" | "externalEntityType">
          >;
        };
    }
  >;
};
export type InvestorGetTransfersQueryVariables = Exact<{
  investorId: Scalars["String"];
}>;
export type InvestorGetTransfersQuery = {
  __typename?: "Query";
} & {
  investorGetTransfers?: Maybe<
    {
      __typename?: "GetTransfersResponse";
    } & {
      transfers: Array<
        Maybe<
          {
            __typename?: "Transfer";
          } & Pick<
            Transfer,
            | "accountNumber"
            | "amount"
            | "createdAt"
            | "direction"
            | "linkedBankAccountId"
            | "status"
            | "transferId"
            | "transferMethod"
            | "transferNumber"
            | "updatedAt"
          >
        >
      >;
    }
  >;
};
export type InvestorGetsQueryVariables = Exact<{
  [key: string]: never;
}>;
export type InvestorGetsQuery = {
  __typename?: "Query";
} & {
  investorGets?: Maybe<
    {
      __typename?: "GetInvestorsResponse";
    } & {
      investors: Array<
        Maybe<
          {
            __typename?: "InvestorWithApexAccount";
          } & {
            apexAccount?: Maybe<
              {
                __typename?: "ApexAccount3";
              } & Pick<
                ApexAccount3,
                | "apexAccountNumber"
                | "apexRequestId"
                | "createdAt"
                | "id"
                | "investorId"
                | "metadata"
                | "status"
                | "updatedAt"
              >
            >;
            investor: {
              __typename?: "Investor";
            } & Pick<
              Investor,
              | "createdAt"
              | "id"
              | "investorType"
              | "metadata"
              | "status"
              | "updatedAt"
            > & {
                investorInfo: {
                  __typename?: "InvestorInfo";
                } & Pick<
                  InvestorInfo,
                  | "birthCountry"
                  | "catAccountHolderType"
                  | "citizenshipCountry"
                  | "familyName"
                  | "givenName"
                  | "investorType"
                  | "isPermanentResident"
                  | "issuerDirectCommunication"
                  | "organizationName"
                  | "title"
                > & {
                    applicantSignature: {
                      __typename?: "ApplicantSignature2";
                    } & Pick<ApplicantSignature2, "eSigned">;
                    beneficialOwnersAndOfficers?: Maybe<
                      {
                        __typename?: "BeneficialOwnersAndOfficers";
                      } & Pick<
                        BeneficialOwnersAndOfficers,
                        "businessClassification"
                      > & {
                          beneficialOwners: Array<
                            Maybe<
                              {
                                __typename?: "BeneficialOwners3";
                              } & Pick<
                                BeneficialOwners3,
                                | "dateOfBirth"
                                | "identificationNumber"
                                | "socialSecurityNumber"
                              >
                            >
                          >;
                          officers: Array<
                            Maybe<
                              {
                                __typename?: "Officers2";
                              } & Pick<
                                Officers2,
                                | "dateOfBirth"
                                | "identificationNumber"
                                | "socialSecurityNumber"
                              >
                            >
                          >;
                        }
                    >;
                    cashAccountAgreement?: Maybe<
                      {
                        __typename?: "CashAccountAgreement";
                      } & Pick<
                        CashAccountAgreement,
                        | "articlesOfIncorporationSnapId"
                        | "authorizedOfficerName"
                        | "authorizedOfficerTitle"
                        | "corporationName"
                        | "isAuthorizedOfficerESigned"
                        | "isSecretaryESigned"
                        | "secretaryName"
                        | "stateOfIncorporation"
                      >
                    >;
                    contactInformation: {
                      __typename?: "ContactInformation";
                    } & Pick<
                      ContactInformation,
                      | "city"
                      | "country"
                      | "emailAddresses"
                      | "phone"
                      | "phoneType"
                      | "postalCode"
                      | "state"
                      | "streetAddress"
                    >;
                    disclosures: {
                      __typename?: "Disclosures2";
                    } & Pick<
                      Disclosures2,
                      | "affiliatedApproval"
                      | "companySymbols"
                      | "firmName"
                      | "isAffiliatedExchangeOrFINRA"
                      | "isControlPerson"
                      | "isPoliticallyExposed"
                    > & {
                        politicalExposureDetail?: Maybe<
                          {
                            __typename?: "PoliticalExposureDetail2";
                          } & Pick<
                            PoliticalExposureDetail2,
                            "immediateFamily" | "politicalOrganization"
                          >
                        >;
                      };
                    employment?: Maybe<
                      {
                        __typename?: "Employment2";
                      } & Pick<
                        Employment2,
                        "employer" | "employmentStatus" | "positionEmployed"
                      >
                    >;
                    entityDueDiligence?: Maybe<
                      {
                        __typename?: "EntityDueDiligence";
                      } & Pick<
                        EntityDueDiligence,
                        | "assessedRiskRating"
                        | "entityOrAssociatesHaveNegativeNews"
                      > & {
                          accountActivity: {
                            __typename?: "AccountActivity";
                          } & Pick<
                            AccountActivity,
                            | "expectedWithdrawalFrequency"
                            | "initialDepositAmount"
                            | "initialDepositSource"
                            | "primaryEntityAccountActivity"
                            | "willTransactForeignBonds"
                            | "willTransactLowPricedSecurities"
                          >;
                          accountInformation: {
                            __typename?: "DueDiligenceAccountInformation2";
                          } & Pick<
                            DueDiligenceAccountInformation2,
                            | "accountName"
                            | "businessLocations"
                            | "countryOfIncorporation"
                            | "hasRelatedAccounts"
                          >;
                          additionalAccounts: {
                            __typename?: "AdditionalAccounts";
                          } & Pick<
                            AdditionalAccounts,
                            | "confirmEntityDoesNotIssueBearerShares"
                            | "institutionNames"
                            | "primaryOngoingFundingSource"
                            | "primaryOngoingFundingSourceClarification"
                            | "scopeOfBusiness"
                            | "scopeOfBusinessClarification"
                          >;
                          politicallyExposedPersons: {
                            __typename?: "PoliticallyExposedPersons";
                          } & Pick<
                            PoliticallyExposedPersons,
                            "isPoliticallyExposed"
                          >;
                        }
                    >;
                    exemptLegalCustomer?: Maybe<
                      {
                        __typename?: "ExemptLegalCustomer";
                      } & Pick<
                        ExemptLegalCustomer,
                        "exemption" | "isExemptLegalCustomer"
                      >
                    >;
                    investmentProfile?: Maybe<
                      {
                        __typename?: "InvestmentProfile2";
                      } & Pick<
                        InvestmentProfile2,
                        | "annualIncomeUSD"
                        | "federalTaxBracketPercent"
                        | "investmentExperience"
                        | "investmentObjective"
                        | "liquidNetWorthUSD"
                        | "riskTolerance"
                        | "totalNetWorthUSD"
                      >
                    >;
                    llcAccountAgreement?: Maybe<
                      {
                        __typename?: "LlcAccountAgreement";
                      } & Pick<
                        LlcAccountAgreement,
                        | "authorizedSignerName"
                        | "authorizedSignerTitle"
                        | "entityName"
                        | "isAuthorizedSignerESigned"
                        | "resolutionAdoptionDate"
                        | "stateOfOrigin"
                      > & {
                          membersAndManagers: Array<
                            Maybe<
                              {
                                __typename?: "MembersAndManagers2";
                              } & Pick<
                                MembersAndManagers2,
                                | "isManager"
                                | "isManagerESigned"
                                | "legalName"
                                | "organizationalRole"
                              >
                            >
                          >;
                        }
                    >;
                    organization?: Maybe<
                      {
                        __typename?: "Organization";
                      } & Pick<
                        Organization,
                        | "entityType"
                        | "foreignBankUSAgent"
                        | "isForeignBank"
                        | "isMaintainedForForeignFinancialInstitution"
                        | "uploadedWNineForm"
                        | "usEntity"
                      >
                    >;
                    suitabilityProfile: {
                      __typename?: "SuitabilityProfile";
                    } & Pick<
                      SuitabilityProfile,
                      "liquidityNeeds" | "timeHorizon"
                    >;
                    trustedContactInfo: {
                      __typename?: "TrustedContactInfo";
                    } & Pick<TrustedContactInfo, "trustedContact"> & {
                        trustedContactPerson?: Maybe<
                          {
                            __typename?: "TrustedContactPerson";
                          } & Pick<
                            TrustedContactPerson,
                            "emailAddress" | "familyName" | "givenName"
                          >
                        >;
                      };
                    wnineTaxForm?: Maybe<
                      {
                        __typename?: "WNineTaxForm";
                      } & Pick<
                        WNineTaxForm,
                        "exemptPayeeCode" | "exemptionFromFatca"
                      >
                    >;
                  };
              };
          }
        >
      >;
    }
  >;
};
export type InvestorInteralGetQueryVariables = Exact<{
  investorId: Scalars["String"];
}>;
export type InvestorInteralGetQuery = {
  __typename?: "Query";
} & {
  investorInteralGet?: Maybe<
    {
      __typename?: "InternalGetInvestorResponse";
    } & {
      investor: {
        __typename?: "InternalInvestor";
      } & Pick<
        InternalInvestor,
        "createdAt" | "id" | "investorType" | "metadata" | "updatedAt"
      > & {
          investorInfo: {
            __typename?: "InternalInvestorInfo";
          } & Pick<
            InternalInvestorInfo,
            | "birthCountry"
            | "catAccountHolderType"
            | "citizenshipCountry"
            | "dateOfBirth"
            | "familyName"
            | "givenName"
            | "investorType"
            | "isPermanentResident"
            | "issuerDirectCommunication"
            | "organizationName"
            | "organizationTaxId"
            | "socialSecurityNumber"
            | "title"
          > & {
              applicantSignature: {
                __typename?: "ApplicantSignature2";
              } & Pick<ApplicantSignature2, "eSigned">;
              beneficialOwnersAndOfficers?: Maybe<
                {
                  __typename?: "BeneficialOwnersAndOfficers";
                } & Pick<
                  BeneficialOwnersAndOfficers,
                  "businessClassification"
                > & {
                    beneficialOwners: Array<
                      Maybe<
                        {
                          __typename?: "BeneficialOwners3";
                        } & Pick<
                          BeneficialOwners3,
                          | "dateOfBirth"
                          | "identificationNumber"
                          | "socialSecurityNumber"
                        > & {
                            address: {
                              __typename?: "Address";
                            } & Pick<
                              Address,
                              | "city"
                              | "country"
                              | "postalCode"
                              | "state"
                              | "streetAddress"
                            >;
                            name: {
                              __typename?: "Name";
                            } & Pick<
                              Name,
                              "familyName" | "givenName" | "legalName"
                            >;
                          }
                      >
                    >;
                    officers: Array<
                      Maybe<
                        {
                          __typename?: "Officers2";
                        } & Pick<
                          Officers2,
                          | "dateOfBirth"
                          | "identificationNumber"
                          | "socialSecurityNumber"
                        > & {
                            address: {
                              __typename?: "Address";
                            } & Pick<
                              Address,
                              | "city"
                              | "country"
                              | "postalCode"
                              | "state"
                              | "streetAddress"
                            >;
                            name: {
                              __typename?: "Name";
                            } & Pick<
                              Name,
                              "familyName" | "givenName" | "legalName"
                            >;
                          }
                      >
                    >;
                  }
              >;
              cashAccountAgreement?: Maybe<
                {
                  __typename?: "CashAccountAgreement";
                } & Pick<
                  CashAccountAgreement,
                  | "articlesOfIncorporationSnapId"
                  | "authorizedOfficerName"
                  | "authorizedOfficerTitle"
                  | "corporationName"
                  | "isAuthorizedOfficerESigned"
                  | "isSecretaryESigned"
                  | "secretaryName"
                  | "stateOfIncorporation"
                >
              >;
              contactInformation: {
                __typename?: "ContactInformation";
              } & Pick<
                ContactInformation,
                | "city"
                | "country"
                | "emailAddresses"
                | "phone"
                | "phoneType"
                | "postalCode"
                | "state"
                | "streetAddress"
              >;
              disclosures: {
                __typename?: "Disclosures2";
              } & Pick<
                Disclosures2,
                | "affiliatedApproval"
                | "companySymbols"
                | "firmName"
                | "isAffiliatedExchangeOrFINRA"
                | "isControlPerson"
                | "isPoliticallyExposed"
              > & {
                  interestedParties?: Maybe<
                    Array<
                      Maybe<
                        {
                          __typename?: "InterestedParties4";
                        } & {
                          mailingAddress: {
                            __typename?: "InterestedPartyAddress";
                          } & Pick<
                            InterestedPartyAddress,
                            | "city"
                            | "country"
                            | "postalCode"
                            | "state"
                            | "streetAddress"
                          >;
                          name: {
                            __typename?: "InterestedPartyName";
                          } & Pick<InterestedPartyName, "companyName">;
                        }
                      >
                    >
                  >;
                  politicalExposureDetail?: Maybe<
                    {
                      __typename?: "PoliticalExposureDetail2";
                    } & Pick<
                      PoliticalExposureDetail2,
                      "immediateFamily" | "politicalOrganization"
                    >
                  >;
                };
              employment?: Maybe<
                {
                  __typename?: "Employment2";
                } & Pick<
                  Employment2,
                  "employer" | "employmentStatus" | "positionEmployed"
                >
              >;
              entityDueDiligence?: Maybe<
                {
                  __typename?: "EntityDueDiligence";
                } & Pick<
                  EntityDueDiligence,
                  "assessedRiskRating" | "entityOrAssociatesHaveNegativeNews"
                > & {
                    accountActivity: {
                      __typename?: "AccountActivity";
                    } & Pick<
                      AccountActivity,
                      | "expectedWithdrawalFrequency"
                      | "initialDepositAmount"
                      | "initialDepositSource"
                      | "primaryEntityAccountActivity"
                      | "willTransactForeignBonds"
                      | "willTransactLowPricedSecurities"
                    >;
                    accountInformation: {
                      __typename?: "DueDiligenceAccountInformation2";
                    } & Pick<
                      DueDiligenceAccountInformation2,
                      | "accountName"
                      | "businessLocations"
                      | "countryOfIncorporation"
                      | "hasRelatedAccounts"
                    > & {
                        relatedAccountList?: Maybe<
                          Array<
                            Maybe<
                              {
                                __typename?: "RelatedAccounts2";
                              } & Pick<
                                RelatedAccounts2,
                                "accountNumber" | "entityName"
                              >
                            >
                          >
                        >;
                      };
                    additionalAccounts: {
                      __typename?: "AdditionalAccounts";
                    } & Pick<
                      AdditionalAccounts,
                      | "confirmEntityDoesNotIssueBearerShares"
                      | "institutionNames"
                      | "primaryOngoingFundingSource"
                      | "primaryOngoingFundingSourceClarification"
                      | "scopeOfBusiness"
                      | "scopeOfBusinessClarification"
                    >;
                    politicallyExposedPersons: {
                      __typename?: "PoliticallyExposedPersons";
                    } & Pick<
                      PoliticallyExposedPersons,
                      "isPoliticallyExposed"
                    > & {
                        politicalOfficials?: Maybe<
                          Array<
                            Maybe<
                              {
                                __typename?: "PoliticalOfficials3";
                              } & Pick<
                                PoliticalOfficials3,
                                | "immediateFamily"
                                | "legalName"
                                | "politicalOrganization"
                                | "politicalTitle"
                                | "role"
                              >
                            >
                          >
                        >;
                      };
                  }
              >;
              exemptLegalCustomer?: Maybe<
                {
                  __typename?: "ExemptLegalCustomer";
                } & Pick<
                  ExemptLegalCustomer,
                  "exemption" | "isExemptLegalCustomer"
                >
              >;
              investmentProfile?: Maybe<
                {
                  __typename?: "InvestmentProfile2";
                } & Pick<
                  InvestmentProfile2,
                  | "annualIncomeUSD"
                  | "federalTaxBracketPercent"
                  | "investmentExperience"
                  | "investmentObjective"
                  | "liquidNetWorthUSD"
                  | "riskTolerance"
                  | "totalNetWorthUSD"
                >
              >;
              llcAccountAgreement?: Maybe<
                {
                  __typename?: "LlcAccountAgreement";
                } & Pick<
                  LlcAccountAgreement,
                  | "authorizedSignerName"
                  | "authorizedSignerTitle"
                  | "entityName"
                  | "isAuthorizedSignerESigned"
                  | "resolutionAdoptionDate"
                  | "stateOfOrigin"
                > & {
                    membersAndManagers: Array<
                      Maybe<
                        {
                          __typename?: "MembersAndManagers2";
                        } & Pick<
                          MembersAndManagers2,
                          | "isManager"
                          | "isManagerESigned"
                          | "legalName"
                          | "organizationalRole"
                        >
                      >
                    >;
                  }
              >;
              organization?: Maybe<
                {
                  __typename?: "Organization";
                } & Pick<
                  Organization,
                  | "entityType"
                  | "foreignBankUSAgent"
                  | "isForeignBank"
                  | "isMaintainedForForeignFinancialInstitution"
                  | "uploadedWNineForm"
                  | "usEntity"
                >
              >;
              suitabilityProfile: {
                __typename?: "SuitabilityProfile";
              } & Pick<SuitabilityProfile, "liquidityNeeds" | "timeHorizon">;
              trustedContactInfo: {
                __typename?: "TrustedContactInfo";
              } & Pick<TrustedContactInfo, "trustedContact"> & {
                  trustedContactPerson?: Maybe<
                    {
                      __typename?: "TrustedContactPerson";
                    } & Pick<
                      TrustedContactPerson,
                      "emailAddress" | "familyName" | "givenName"
                    >
                  >;
                };
              wnineTaxForm?: Maybe<
                {
                  __typename?: "WNineTaxForm";
                } & Pick<WNineTaxForm, "exemptPayeeCode" | "exemptionFromFatca">
              >;
            };
        };
    }
  >;
};
export type InvestorInternalGetLinkedBankAccountQueryVariables = Exact<{
  investorId: Scalars["String"];
  linkedBankAccountId: Scalars["String"];
}>;
export type InvestorInternalGetLinkedBankAccountQuery = {
  __typename?: "Query";
} & {
  investorInternalGetLinkedBankAccount?: Maybe<
    {
      __typename?: "InternalGetLinkedBankAccountResponse";
    } & {
      linkedBankAccount: {
        __typename?: "InternalLinkedBankAccount";
      } & Pick<
        InternalLinkedBankAccount,
        | "accountNumber"
        | "accountType"
        | "bankName"
        | "createdAt"
        | "id"
        | "investorId"
        | "mask"
        | "metadata"
        | "routing"
        | "status"
        | "updatedAt"
        | "wire"
      >;
    }
  >;
};
export type LinkBankAccountGetLinkedBankAccountQueryVariables = Exact<{
  accountNumber: Scalars["String"];
  linkedBankAccountId: Scalars["String"];
}>;
export type LinkBankAccountGetLinkedBankAccountQuery = {
  __typename?: "Query";
} & {
  linkBankAccountGetLinkedBankAccount?: Maybe<
    {
      __typename?: "GetLinkedBankAccountResponse";
    } & {
      linkedBankAccount: {
        __typename?: "LinkedBankAccount";
      } & Pick<
        LinkedBankAccount,
        | "accountType"
        | "bankName"
        | "createdAt"
        | "id"
        | "investorId"
        | "mask"
        | "metadata"
        | "status"
        | "updatedAt"
      >;
    }
  >;
};
export type LinkBankAccountGetLinkedBankAccountBalanceQueryVariables = Exact<{
  accountNumber: Scalars["String"];
  linkedBankAccountId: Scalars["String"];
}>;
export type LinkBankAccountGetLinkedBankAccountBalanceQuery = {
  __typename?: "Query";
} & {
  linkBankAccountGetLinkedBankAccountBalance?: Maybe<
    {
      __typename?: "GetLinkedBankAccountBalanceResponse";
    } & {
      balance: {
        __typename?: "Balance";
      } & Pick<Balance, "availableBalance" | "id" | "timestamp">;
    }
  >;
};
export type LinkBankAccountGetLinkedBankAccountsQueryVariables = Exact<{
  accountNumber: Scalars["String"];
}>;
export type LinkBankAccountGetLinkedBankAccountsQuery = {
  __typename?: "Query";
} & {
  linkBankAccountGetLinkedBankAccounts?: Maybe<
    {
      __typename?: "GetLinkedBankAccountsResponse";
    } & {
      linkedBankAccounts: Array<
        Maybe<
          {
            __typename?: "LinkedBankAccount";
          } & Pick<
            LinkedBankAccount,
            | "accountType"
            | "bankName"
            | "createdAt"
            | "id"
            | "investorId"
            | "mask"
            | "metadata"
            | "status"
            | "updatedAt"
          >
        >
      >;
    }
  >;
};
export type LinkBankAccountInternalGetLinkedBankAccountQueryVariables = Exact<{
  linkedBankAccountId: Scalars["String"];
}>;
export type LinkBankAccountInternalGetLinkedBankAccountQuery = {
  __typename?: "Query";
} & {
  linkBankAccountInternalGetLinkedBankAccount?: Maybe<
    {
      __typename?: "InternalGetLinkedBankAccountResponse";
    } & {
      linkedBankAccount: {
        __typename?: "InternalLinkedBankAccount";
      } & Pick<
        InternalLinkedBankAccount,
        | "accountNumber"
        | "accountType"
        | "bankName"
        | "createdAt"
        | "id"
        | "investorId"
        | "mask"
        | "metadata"
        | "routing"
        | "status"
        | "updatedAt"
        | "wire"
      >;
    }
  >;
};
export type OrderManagementGetOrderQueryVariables = Exact<{
  id: Scalars["String"];
  portfolioId: Scalars["String"];
}>;
export type OrderManagementGetOrderQuery = {
  __typename?: "Query";
} & {
  orderManagementGetOrder?: Maybe<
    {
      __typename?: "GetOrderResponse";
    } & {
      order: {
        __typename?: "Order2";
      } & Pick<
        Order2,
        | "assetId"
        | "assignedTo"
        | "comment"
        | "createdAt"
        | "filled"
        | "fullFillRequired"
        | "goodTillCancel"
        | "id"
        | "metadata"
        | "portfolioId"
        | "priceLimit"
        | "quantity"
        | "spotPrice"
        | "status"
        | "updatedAt"
      >;
    }
  >;
};
export type OrderManagementGetOrdersQueryVariables = Exact<{
  portfolioId: Scalars["String"];
}>;
export type OrderManagementGetOrdersQuery = {
  __typename?: "Query";
} & {
  orderManagementGetOrders?: Maybe<
    {
      __typename?: "GetOrdersResponse";
    } & {
      orders: Array<
        Maybe<
          {
            __typename?: "Order2";
          } & Pick<
            Order2,
            | "assetId"
            | "assignedTo"
            | "comment"
            | "createdAt"
            | "filled"
            | "fullFillRequired"
            | "goodTillCancel"
            | "id"
            | "metadata"
            | "portfolioId"
            | "priceLimit"
            | "quantity"
            | "spotPrice"
            | "status"
            | "updatedAt"
          >
        >
      >;
    }
  >;
};
export type PositionManagementGetCashBalanceQueryVariables = Exact<{
  accountNumber: Scalars["String"];
}>;
export type PositionManagementGetCashBalanceQuery = {
  __typename?: "Query";
} & {
  positionManagementGetCashBalance?: Maybe<
    {
      __typename?: "GetCashBalanceResponse";
    } & {
      balance: {
        __typename?: "CashBalance";
      } & Pick<
        CashBalance,
        "accountNumber" | "quantity" | "settled" | "unsettled"
      >;
    }
  >;
};
export type PositionManagementGetExternalPortfolioQueryVariables = Exact<{
  id: Scalars["String"];
}>;
export type PositionManagementGetExternalPortfolioQuery = {
  __typename?: "Query";
} & {
  positionManagementGetExternalPortfolio?: Maybe<
    {
      __typename?: "GetExternalPortfolioResponse";
    } & {
      portfolio: {
        __typename?: "Portfolio3";
      } & Pick<
        Portfolio3,
        | "accountNumber"
        | "app"
        | "createdAt"
        | "currency"
        | "description"
        | "id"
        | "metadata"
        | "name"
        | "status"
        | "updatedAt"
      > & {
          positions: Array<
            Maybe<
              {
                __typename?: "Position2";
              } & Pick<
                Position2,
                | "assetId"
                | "costBasis"
                | "createdAt"
                | "id"
                | "metadata"
                | "portfolioId"
                | "quantity"
                | "settled"
                | "tradeDate"
                | "unsettled"
                | "updatedAt"
              >
            >
          >;
        };
    }
  >;
};
export type PositionManagementGetExternalPortfoliosQueryVariables = Exact<{
  [key: string]: never;
}>;
export type PositionManagementGetExternalPortfoliosQuery = {
  __typename?: "Query";
} & {
  positionManagementGetExternalPortfolios?: Maybe<
    {
      __typename?: "GetExternalPortfoliosResponse";
    } & {
      portfolios: Array<
        Maybe<
          {
            __typename?: "Portfolio3";
          } & Pick<
            Portfolio3,
            | "accountNumber"
            | "app"
            | "createdAt"
            | "currency"
            | "description"
            | "id"
            | "metadata"
            | "name"
            | "status"
            | "updatedAt"
          > & {
              positions: Array<
                Maybe<
                  {
                    __typename?: "Position2";
                  } & Pick<
                    Position2,
                    | "assetId"
                    | "costBasis"
                    | "createdAt"
                    | "id"
                    | "metadata"
                    | "portfolioId"
                    | "quantity"
                    | "settled"
                    | "tradeDate"
                    | "unsettled"
                    | "updatedAt"
                  >
                >
              >;
            }
        >
      >;
    }
  >;
};
export type PositionManagementGetPortfolioQueryVariables = Exact<{
  id: Scalars["String"];
}>;
export type PositionManagementGetPortfolioQuery = {
  __typename?: "Query";
} & {
  positionManagementGetPortfolio?: Maybe<
    {
      __typename?: "GetPortfolioResponse2";
    } & {
      portfolio: {
        __typename?: "Portfolio3";
      } & Pick<
        Portfolio3,
        | "accountNumber"
        | "app"
        | "createdAt"
        | "currency"
        | "description"
        | "id"
        | "metadata"
        | "name"
        | "status"
        | "updatedAt"
      > & {
          positions: Array<
            Maybe<
              {
                __typename?: "Position2";
              } & Pick<
                Position2,
                | "assetId"
                | "costBasis"
                | "createdAt"
                | "id"
                | "metadata"
                | "portfolioId"
                | "quantity"
                | "settled"
                | "tradeDate"
                | "unsettled"
                | "updatedAt"
              >
            >
          >;
        };
    }
  >;
};
export type PositionManagementGetPortfoliosQueryVariables = Exact<{
  [key: string]: never;
}>;
export type PositionManagementGetPortfoliosQuery = {
  __typename?: "Query";
} & {
  positionManagementGetPortfolios?: Maybe<
    {
      __typename?: "GetPortfoliosResponse";
    } & {
      portfolios: Array<
        Maybe<
          {
            __typename?: "Portfolio3";
          } & Pick<
            Portfolio3,
            | "accountNumber"
            | "app"
            | "createdAt"
            | "currency"
            | "description"
            | "id"
            | "metadata"
            | "name"
            | "status"
            | "updatedAt"
          > & {
              positions: Array<
                Maybe<
                  {
                    __typename?: "Position2";
                  } & Pick<
                    Position2,
                    | "assetId"
                    | "costBasis"
                    | "createdAt"
                    | "id"
                    | "metadata"
                    | "portfolioId"
                    | "quantity"
                    | "settled"
                    | "tradeDate"
                    | "unsettled"
                    | "updatedAt"
                  >
                >
              >;
            }
        >
      >;
    }
  >;
};
export type PositionManagementGetPortfoliosByAccountQueryVariables = Exact<{
  accountNumber: Scalars["String"];
}>;
export type PositionManagementGetPortfoliosByAccountQuery = {
  __typename?: "Query";
} & {
  positionManagementGetPortfoliosByAccount?: Maybe<
    {
      __typename?: "GetPortfoliosByAccountResponse";
    } & {
      portfolios: Array<
        Maybe<
          {
            __typename?: "Portfolio3";
          } & Pick<
            Portfolio3,
            | "accountNumber"
            | "app"
            | "createdAt"
            | "currency"
            | "description"
            | "id"
            | "metadata"
            | "name"
            | "status"
            | "updatedAt"
          > & {
              positions: Array<
                Maybe<
                  {
                    __typename?: "Position2";
                  } & Pick<
                    Position2,
                    | "assetId"
                    | "costBasis"
                    | "createdAt"
                    | "id"
                    | "metadata"
                    | "portfolioId"
                    | "quantity"
                    | "settled"
                    | "tradeDate"
                    | "unsettled"
                    | "updatedAt"
                  >
                >
              >;
            }
        >
      >;
    }
  >;
};
export type PositionManagementGetPositionsByAccountQueryVariables = Exact<{
  accountNumber: Scalars["String"];
}>;
export type PositionManagementGetPositionsByAccountQuery = {
  __typename?: "Query";
} & {
  positionManagementGetPositionsByAccount?: Maybe<
    {
      __typename?: "GetPositionsByAccountResponse";
    } & {
      positions: Array<
        Maybe<
          {
            __typename?: "AccountPosition";
          } & Pick<
            AccountPosition,
            "assetId" | "quantity" | "settled" | "unsettled"
          >
        >
      >;
    }
  >;
};
export type PositionManagementGetTemporaryPortfolioQueryVariables = Exact<{
  id: Scalars["String"];
}>;
export type PositionManagementGetTemporaryPortfolioQuery = {
  __typename?: "Query";
} & {
  positionManagementGetTemporaryPortfolio?: Maybe<
    {
      __typename?: "GetTemporaryPortfolioResponse";
    } & {
      portfolio: {
        __typename?: "Portfolio3";
      } & Pick<
        Portfolio3,
        | "accountNumber"
        | "app"
        | "createdAt"
        | "currency"
        | "description"
        | "id"
        | "metadata"
        | "name"
        | "status"
        | "updatedAt"
      > & {
          positions: Array<
            Maybe<
              {
                __typename?: "Position2";
              } & Pick<
                Position2,
                | "assetId"
                | "costBasis"
                | "createdAt"
                | "id"
                | "metadata"
                | "portfolioId"
                | "quantity"
                | "settled"
                | "tradeDate"
                | "unsettled"
                | "updatedAt"
              >
            >
          >;
        };
    }
  >;
};
export type PositionManagementGetTradeQueryVariables = Exact<{
  id: Scalars["String"];
  portfolioId: Scalars["String"];
}>;
export type PositionManagementGetTradeQuery = {
  __typename?: "Query";
} & {
  positionManagementGetTrade?: Maybe<
    {
      __typename?: "GetTradeResponse";
    } & {
      ledgerEntries: Array<
        Maybe<
          {
            __typename?: "LedgerEntry";
          } & Pick<
            LedgerEntry,
            | "accountNumber"
            | "assetId"
            | "comment"
            | "counterPartyId"
            | "createdAt"
            | "fee"
            | "id"
            | "metadata"
            | "orderId"
            | "portfolioId"
            | "quantity"
            | "status"
            | "tradeId"
            | "tradePrice"
            | "updatedAt"
          > & {
              relatedPositions: Array<
                Maybe<
                  {
                    __typename?: "RelatedPosition";
                  } & Pick<RelatedPosition, "positionId" | "quantity">
                >
              >;
            }
        >
      >;
    }
  >;
};
export type PositionManagementGetTradesQueryVariables = Exact<{
  portfolioId: Scalars["String"];
}>;
export type PositionManagementGetTradesQuery = {
  __typename?: "Query";
} & {
  positionManagementGetTrades?: Maybe<
    {
      __typename?: "GetTradesResponse";
    } & {
      ledgerEntries: Array<
        Maybe<
          {
            __typename?: "LedgerEntry";
          } & Pick<
            LedgerEntry,
            | "accountNumber"
            | "assetId"
            | "comment"
            | "counterPartyId"
            | "createdAt"
            | "fee"
            | "id"
            | "metadata"
            | "orderId"
            | "portfolioId"
            | "quantity"
            | "status"
            | "tradeId"
            | "tradePrice"
            | "updatedAt"
          > & {
              relatedPositions: Array<
                Maybe<
                  {
                    __typename?: "RelatedPosition";
                  } & Pick<RelatedPosition, "positionId" | "quantity">
                >
              >;
            }
        >
      >;
    }
  >;
};
export type PositionManagementGetTradesByAccountQueryVariables = Exact<{
  accountNumber: Scalars["String"];
}>;
export type PositionManagementGetTradesByAccountQuery = {
  __typename?: "Query";
} & {
  positionManagementGetTradesByAccount?: Maybe<
    {
      __typename?: "GetTradesByAccountResponse";
    } & {
      trades: Array<
        Maybe<
          {
            __typename?: "LedgerEntry";
          } & Pick<
            LedgerEntry,
            | "accountNumber"
            | "assetId"
            | "comment"
            | "counterPartyId"
            | "createdAt"
            | "fee"
            | "id"
            | "metadata"
            | "orderId"
            | "portfolioId"
            | "quantity"
            | "status"
            | "tradeId"
            | "tradePrice"
            | "updatedAt"
          > & {
              relatedPositions: Array<
                Maybe<
                  {
                    __typename?: "RelatedPosition";
                  } & Pick<RelatedPosition, "positionId" | "quantity">
                >
              >;
            }
        >
      >;
    }
  >;
};
export type PositionManagementGetTransferQueryVariables = Exact<{
  accountNumber: Scalars["String"];
  transferId: Scalars["String"];
}>;
export type PositionManagementGetTransferQuery = {
  __typename?: "Query";
} & {
  positionManagementGetTransfer?: Maybe<
    {
      __typename?: "GetTransferResponse";
    } & {
      transfer: {
        __typename?: "Transfer3";
      } & Pick<
        Transfer3,
        | "amount"
        | "createdAt"
        | "currency"
        | "direction"
        | "id"
        | "investorId"
        | "ledgerId"
        | "linkedBankAccountId"
        | "metadata"
        | "portfolioId"
        | "status"
        | "transferMethod"
        | "updatedAt"
      > & {
          externalEntity?: Maybe<
            {
              __typename?: "ExternalEntity";
            } & Pick<ExternalEntity, "externalEntityId" | "externalEntityType">
          >;
        };
    }
  >;
};
export type PositionManagementGetTransfersQueryVariables = Exact<{
  accountNumber: Scalars["String"];
}>;
export type PositionManagementGetTransfersQuery = {
  __typename?: "Query";
} & {
  positionManagementGetTransfers?: Maybe<
    {
      __typename?: "GetTransfersResponse";
    } & {
      transfers: Array<
        Maybe<
          {
            __typename?: "Transfer";
          } & Pick<
            Transfer,
            | "accountNumber"
            | "amount"
            | "createdAt"
            | "direction"
            | "linkedBankAccountId"
            | "status"
            | "transferId"
            | "transferMethod"
            | "transferNumber"
            | "updatedAt"
          >
        >
      >;
    }
  >;
};
export type PricesPriceAssetQueryVariables = Exact<{
  priceAssetRequestInput?: Maybe<PriceAssetRequestInput>;
}>;
export type PricesPriceAssetQuery = {
  __typename?: "Query";
} & {
  pricesPriceAsset?: Maybe<
    {
      __typename?: "PriceAssetResponse";
    } & {
      prices: Array<
        Maybe<
          {
            __typename?: "Price";
          } & Pick<
            Price,
            | "dateTime"
            | "denominationIncrement"
            | "minimumBalanceRemaining"
            | "minimumDenomination"
            | "price"
            | "priceType"
            | "size"
            | "yieldToMaturity"
            | "yieldToWorst"
          >
        >
      >;
    }
  >;
};
export type RoverPortfolioAnalyzerAnalyzePortfolioQueryVariables = Exact<{
  analyzePortfolioRequestInput?: Maybe<AnalyzePortfolioRequestInput>;
  enableEstimatedPerformance?: Maybe<Scalars["Boolean"]>;
  saveAs?: Maybe<Scalars["String"]>;
}>;
export type RoverPortfolioAnalyzerAnalyzePortfolioQuery = {
  __typename?: "Query";
} & {
  roverPortfolioAnalyzerAnalyzePortfolio?: Maybe<
    {
      __typename?: "AnalyzePortfolioResponse";
    } & {
      analysis: {
        __typename?: "Analysis2";
      } & Pick<
        Analysis2,
        | "createdAt"
        | "currentCoupon"
        | "duration"
        | "expenseRatio"
        | "id"
        | "issuerConcentration"
        | "metadata"
        | "netAssetValue"
        | "portfolioId"
        | "risk"
        | "spread"
        | "updatedAt"
        | "yearsToMaturity"
        | "yield"
      > & {
          allocations?: Maybe<
            {
              __typename?: "Allocations2";
            } & Pick<Allocations2, "country" | "currency"> & {
                datastreamSubtype?: Maybe<
                  {
                    __typename?: "Allocation4";
                  } & {
                    buckets: Array<
                      Maybe<
                        {
                          __typename?: "Bucket";
                        } & Pick<Bucket, "name" | "percentOfNetAssetValue"> & {
                            contributors?: Maybe<
                              Array<
                                Maybe<
                                  {
                                    __typename?: "Contributor";
                                  } & Pick<
                                    Contributor,
                                    | "assetId"
                                    | "percentOfNetAssetValue"
                                    | "positionId"
                                  >
                                >
                              >
                            >;
                          }
                      >
                    >;
                  }
                >;
                datastreamType?: Maybe<
                  {
                    __typename?: "Allocation4";
                  } & {
                    buckets: Array<
                      Maybe<
                        {
                          __typename?: "Bucket";
                        } & Pick<Bucket, "name" | "percentOfNetAssetValue">
                      >
                    >;
                  }
                >;
                debtType?: Maybe<
                  {
                    __typename?: "DebtTypeAllocation";
                  } & {
                    buckets: Array<
                      Maybe<
                        {
                          __typename?: "Bucket";
                        } & Pick<Bucket, "name" | "percentOfNetAssetValue">
                      >
                    >;
                  }
                >;
                maturity?: Maybe<
                  {
                    __typename?: "Maturity";
                  } & Pick<
                    Maturity,
                    | "fiveToTenYears"
                    | "greaterThanThirtyYears"
                    | "lessThanOneYear"
                    | "oneToThreeYears"
                    | "other"
                    | "tenToTwentyYears"
                    | "threeToFiveYears"
                    | "twentyToThirtyYears"
                  >
                >;
                rating?: Maybe<
                  {
                    __typename?: "RatingAllocation";
                  } & {
                    investmentGrade?: Maybe<
                      {
                        __typename?: "InvestmentGradeRatingAllocation";
                      } & Pick<
                        InvestmentGradeRatingAllocation,
                        "a" | "aa" | "aaa" | "bbb" | "total"
                      >
                    >;
                    nonInvestmentGrade?: Maybe<
                      {
                        __typename?: "NonInvestmentGradeRatingAllocation";
                      } & Pick<
                        NonInvestmentGradeRatingAllocation,
                        "b" | "bb" | "c" | "d" | "nr" | "total"
                      >
                    >;
                  }
                >;
                region?: Maybe<
                  {
                    __typename?: "Region";
                  } & Pick<
                    Region,
                    | "africaExNorthAfrica"
                    | "asiaPacificExJapan"
                    | "emergingMarketsAsia"
                    | "emergingMarketsEurope"
                    | "europeExUnitedKingdom"
                    | "japan"
                    | "latinAmerica"
                    | "middleEastNorthAfrica"
                    | "northAmericaExUnitedStates"
                    | "other"
                    | "unitedKingdom"
                    | "unitedStates"
                  >
                >;
                sector?: Maybe<
                  {
                    __typename?: "Sector";
                  } & Pick<
                    Sector,
                    | "agency"
                    | "communications"
                    | "consumerGoods"
                    | "energy"
                    | "financials"
                    | "manufacturing"
                    | "municipal"
                    | "other"
                    | "services"
                    | "sovereign"
                    | "supranational"
                    | "transportation"
                  >
                >;
              }
          >;
          esgScores?: Maybe<
            {
              __typename?: "EsgScores";
            } & Pick<
              EsgScores,
              "environmental" | "governance" | "social" | "total"
            >
          >;
          estimatedPerformance?: Maybe<
            {
              __typename?: "EstimatedPerformance2";
            } & Pick<EstimatedPerformance2, "endDate" | "startDate"> & {
                averageMaximumDrawdown?: Maybe<
                  {
                    __typename?: "AverageMaximumDrawdown2";
                  } & Pick<AverageMaximumDrawdown2, "averageValue"> & {
                      rankedMaximumDrawdowns: Array<
                        Maybe<
                          {
                            __typename?: "RankedMaximumDrawdown";
                          } & Pick<
                            RankedMaximumDrawdown,
                            "endDate" | "rank" | "startDate" | "value"
                          >
                        >
                      >;
                    }
                >;
                estimatedMaximumDrawdown: {
                  __typename?: "EstimatedMaximumDrawdown";
                } & Pick<
                  EstimatedMaximumDrawdown,
                  "endDate" | "startDate" | "value"
                >;
                timeSeries: Array<
                  Maybe<
                    {
                      __typename?: "SinglePeriodPerformance";
                    } & Pick<
                      SinglePeriodPerformance,
                      | "cumulativeReturn"
                      | "endDate"
                      | "periodReturn"
                      | "startDate"
                    >
                  >
                >;
              }
          >;
          wealthProjections?: Maybe<
            Array<
              Maybe<
                {
                  __typename?: "WealthProjection";
                } & Pick<WealthProjection, "date"> & {
                    percentiles: Array<
                      Maybe<
                        {
                          __typename?: "WealthProjectionPercentile";
                        } & Pick<
                          WealthProjectionPercentile,
                          "cumulativeReturn" | "nav" | "percentile"
                        >
                      >
                    >;
                  }
              >
            >
          >;
          yieldContributions?: Maybe<
            Array<
              Maybe<
                {
                  __typename?: "YieldContribution";
                } & Pick<YieldContribution, "assetId" | "percentContribution">
              >
            >
          >;
        };
    }
  >;
};
export type RoverPortfolioAnalyzerCalculateIntradayReturnQueryVariables = Exact<{
  calculateIntradayReturnRequestInput?: Maybe<
    CalculateIntradayReturnRequestInput
  >;
}>;
export type RoverPortfolioAnalyzerCalculateIntradayReturnQuery = {
  __typename?: "Query";
} & {
  roverPortfolioAnalyzerCalculateIntradayReturn?: Maybe<
    {
      __typename?: "CalculateIntradayReturnResponse";
    } & Pick<
      CalculateIntradayReturnResponse,
      "marketValueReturn" | "percentReturn" | "totalReturn"
    >
  >;
};
export type RoverPortfolioAnalyzerCalculateReturnsQueryVariables = Exact<{
  calculateReturnsRequestInput?: Maybe<CalculateReturnsRequestInput>;
}>;
export type RoverPortfolioAnalyzerCalculateReturnsQuery = {
  __typename?: "Query";
} & {
  roverPortfolioAnalyzerCalculateReturns?: Maybe<
    {
      __typename?: "CalculateReturnsResponse";
    } & {
      estimatedPerformance: {
        __typename?: "EstimatedPerformance2";
      } & Pick<EstimatedPerformance2, "endDate" | "startDate"> & {
          averageMaximumDrawdown?: Maybe<
            {
              __typename?: "AverageMaximumDrawdown2";
            } & Pick<AverageMaximumDrawdown2, "averageValue"> & {
                rankedMaximumDrawdowns: Array<
                  Maybe<
                    {
                      __typename?: "RankedMaximumDrawdown";
                    } & Pick<
                      RankedMaximumDrawdown,
                      "endDate" | "rank" | "startDate" | "value"
                    >
                  >
                >;
              }
          >;
          estimatedMaximumDrawdown: {
            __typename?: "EstimatedMaximumDrawdown";
          } & Pick<EstimatedMaximumDrawdown, "endDate" | "startDate" | "value">;
          timeSeries: Array<
            Maybe<
              {
                __typename?: "SinglePeriodPerformance";
              } & Pick<
                SinglePeriodPerformance,
                "cumulativeReturn" | "endDate" | "periodReturn" | "startDate"
              >
            >
          >;
        };
    }
  >;
};
export type RoverPortfolioAnalyzerGetAnalysisQueryVariables = Exact<{
  analysisId: Scalars["String"];
}>;
export type RoverPortfolioAnalyzerGetAnalysisQuery = {
  __typename?: "Query";
} & {
  roverPortfolioAnalyzerGetAnalysis?: Maybe<
    {
      __typename?: "GetAnalysisResponse";
    } & {
      analysis: {
        __typename?: "Analysis2";
      } & Pick<
        Analysis2,
        | "createdAt"
        | "currentCoupon"
        | "duration"
        | "expenseRatio"
        | "id"
        | "issuerConcentration"
        | "metadata"
        | "netAssetValue"
        | "portfolioId"
        | "risk"
        | "spread"
        | "updatedAt"
        | "yearsToMaturity"
        | "yield"
      > & {
          allocations?: Maybe<
            {
              __typename?: "Allocations2";
            } & Pick<Allocations2, "country" | "currency"> & {
                datastreamSubtype?: Maybe<
                  {
                    __typename?: "Allocation4";
                  } & {
                    buckets: Array<
                      Maybe<
                        {
                          __typename?: "Bucket";
                        } & Pick<Bucket, "name" | "percentOfNetAssetValue"> & {
                            contributors?: Maybe<
                              Array<
                                Maybe<
                                  {
                                    __typename?: "Contributor";
                                  } & Pick<
                                    Contributor,
                                    | "assetId"
                                    | "percentOfNetAssetValue"
                                    | "positionId"
                                  >
                                >
                              >
                            >;
                          }
                      >
                    >;
                  }
                >;
                datastreamType?: Maybe<
                  {
                    __typename?: "Allocation4";
                  } & {
                    buckets: Array<
                      Maybe<
                        {
                          __typename?: "Bucket";
                        } & Pick<Bucket, "name" | "percentOfNetAssetValue">
                      >
                    >;
                  }
                >;
                debtType?: Maybe<
                  {
                    __typename?: "DebtTypeAllocation";
                  } & {
                    buckets: Array<
                      Maybe<
                        {
                          __typename?: "Bucket";
                        } & Pick<Bucket, "name" | "percentOfNetAssetValue">
                      >
                    >;
                  }
                >;
                maturity?: Maybe<
                  {
                    __typename?: "Maturity";
                  } & Pick<
                    Maturity,
                    | "fiveToTenYears"
                    | "greaterThanThirtyYears"
                    | "lessThanOneYear"
                    | "oneToThreeYears"
                    | "other"
                    | "tenToTwentyYears"
                    | "threeToFiveYears"
                    | "twentyToThirtyYears"
                  >
                >;
                rating?: Maybe<
                  {
                    __typename?: "RatingAllocation";
                  } & {
                    investmentGrade?: Maybe<
                      {
                        __typename?: "InvestmentGradeRatingAllocation";
                      } & Pick<
                        InvestmentGradeRatingAllocation,
                        "a" | "aa" | "aaa" | "bbb" | "total"
                      >
                    >;
                    nonInvestmentGrade?: Maybe<
                      {
                        __typename?: "NonInvestmentGradeRatingAllocation";
                      } & Pick<
                        NonInvestmentGradeRatingAllocation,
                        "b" | "bb" | "c" | "d" | "nr" | "total"
                      >
                    >;
                  }
                >;
                region?: Maybe<
                  {
                    __typename?: "Region";
                  } & Pick<
                    Region,
                    | "africaExNorthAfrica"
                    | "asiaPacificExJapan"
                    | "emergingMarketsAsia"
                    | "emergingMarketsEurope"
                    | "europeExUnitedKingdom"
                    | "japan"
                    | "latinAmerica"
                    | "middleEastNorthAfrica"
                    | "northAmericaExUnitedStates"
                    | "other"
                    | "unitedKingdom"
                    | "unitedStates"
                  >
                >;
                sector?: Maybe<
                  {
                    __typename?: "Sector";
                  } & Pick<
                    Sector,
                    | "agency"
                    | "communications"
                    | "consumerGoods"
                    | "energy"
                    | "financials"
                    | "manufacturing"
                    | "municipal"
                    | "other"
                    | "services"
                    | "sovereign"
                    | "supranational"
                    | "transportation"
                  >
                >;
              }
          >;
          esgScores?: Maybe<
            {
              __typename?: "EsgScores";
            } & Pick<
              EsgScores,
              "environmental" | "governance" | "social" | "total"
            >
          >;
          estimatedPerformance?: Maybe<
            {
              __typename?: "EstimatedPerformance2";
            } & Pick<EstimatedPerformance2, "endDate" | "startDate"> & {
                averageMaximumDrawdown?: Maybe<
                  {
                    __typename?: "AverageMaximumDrawdown2";
                  } & Pick<AverageMaximumDrawdown2, "averageValue"> & {
                      rankedMaximumDrawdowns: Array<
                        Maybe<
                          {
                            __typename?: "RankedMaximumDrawdown";
                          } & Pick<
                            RankedMaximumDrawdown,
                            "endDate" | "rank" | "startDate" | "value"
                          >
                        >
                      >;
                    }
                >;
                estimatedMaximumDrawdown: {
                  __typename?: "EstimatedMaximumDrawdown";
                } & Pick<
                  EstimatedMaximumDrawdown,
                  "endDate" | "startDate" | "value"
                >;
                timeSeries: Array<
                  Maybe<
                    {
                      __typename?: "SinglePeriodPerformance";
                    } & Pick<
                      SinglePeriodPerformance,
                      | "cumulativeReturn"
                      | "endDate"
                      | "periodReturn"
                      | "startDate"
                    >
                  >
                >;
              }
          >;
          wealthProjections?: Maybe<
            Array<
              Maybe<
                {
                  __typename?: "WealthProjection";
                } & Pick<WealthProjection, "date"> & {
                    percentiles: Array<
                      Maybe<
                        {
                          __typename?: "WealthProjectionPercentile";
                        } & Pick<
                          WealthProjectionPercentile,
                          "cumulativeReturn" | "nav" | "percentile"
                        >
                      >
                    >;
                  }
              >
            >
          >;
          yieldContributions?: Maybe<
            Array<
              Maybe<
                {
                  __typename?: "YieldContribution";
                } & Pick<YieldContribution, "assetId" | "percentContribution">
              >
            >
          >;
        };
    }
  >;
};
export type RoverPortfolioAnalyzerProjectCashFlowsQueryVariables = Exact<{
  projectCashFlowsInput?: Maybe<ProjectCashFlowsInput>;
}>;
export type RoverPortfolioAnalyzerProjectCashFlowsQuery = {
  __typename?: "Query";
} & {
  roverPortfolioAnalyzerProjectCashFlows?: Maybe<
    {
      __typename?: "ProjectCashFlowsResponse";
    } & {
      cashFlows: Array<
        Maybe<
          {
            __typename?: "CashFlow";
          } & Pick<CashFlow, "cashFlow" | "date" | "interest" | "principal">
        >
      >;
    }
  >;
};
export type RoverPreferencesGetCartQueryVariables = Exact<{
  userId: Scalars["String"];
}>;
export type RoverPreferencesGetCartQuery = {
  __typename?: "Query";
} & {
  roverPreferencesGetCart?: Maybe<
    {
      __typename?: "GetCartResponse";
    } & {
      cart: {
        __typename?: "Cart";
      } & Pick<Cart, "id"> & {
          items: Array<
            Maybe<
              {
                __typename?: "CartItem";
              } & Pick<CartItem, "assetId" | "quantity">
            >
          >;
        };
    }
  >;
};
export type RoverPreferencesGetPreferencesQueryVariables = Exact<{
  portfolioId: Scalars["String"];
}>;
export type RoverPreferencesGetPreferencesQuery = {
  __typename?: "Query";
} & {
  roverPreferencesGetPreferences?: Maybe<
    {
      __typename?: "GetPreferencesResponse2";
    } & Pick<GetPreferencesResponse2, "preference">
  >;
};
export type RoverPreferencesGetWatchListQueryVariables = Exact<{
  userId: Scalars["String"];
}>;
export type RoverPreferencesGetWatchListQuery = {
  __typename?: "Query";
} & {
  roverPreferencesGetWatchList?: Maybe<
    {
      __typename?: "GetWatchListResponse";
    } & {
      watchList: {
        __typename?: "WatchList";
      } & Pick<WatchList, "id"> & {
          items: Array<
            Maybe<
              {
                __typename?: "WatchListItem";
              } & Pick<WatchListItem, "assetId">
            >
          >;
        };
    }
  >;
};
export type RoverRiskModelGetAllFactorsQueryVariables = Exact<{
  [key: string]: never;
}>;
export type RoverRiskModelGetAllFactorsQuery = {
  __typename?: "Query";
} & {
  roverRiskModelGetAllFactors?: Maybe<
    Array<
      Maybe<
        {
          __typename?: "Factor";
        } & Pick<
          Factor,
          | "description"
          | "id"
          | "levelUnits"
          | "name"
          | "returnsCalculationMethod"
        >
      >
    >
  >;
};
export type RoverRiskModelGetAssetRiskQueryVariables = Exact<{
  assetId: Scalars["String"];
  date?: Maybe<Scalars["String"]>;
  frequency?: Maybe<Frequency2>;
  halfLifeAmount?: Maybe<Scalars["Int"]>;
  halfLifeUnits?: Maybe<HalfLifeUnits2>;
  lookbackPeriodAmount?: Maybe<Scalars["Int"]>;
  lookbackPeriodUnits?: Maybe<LookbackPeriodUnits2>;
  refresh?: Maybe<Scalars["Boolean"]>;
}>;
export type RoverRiskModelGetAssetRiskQuery = {
  __typename?: "Query";
} & {
  roverRiskModelGetAssetRisk?: Maybe<
    {
      __typename?: "GetAssetRiskResponse";
    } & Pick<GetAssetRiskResponse, "risk">
  >;
};
export type RoverRiskModelGetFactorQueryVariables = Exact<{
  id: Scalars["String"];
}>;
export type RoverRiskModelGetFactorQuery = {
  __typename?: "Query";
} & {
  roverRiskModelGetFactor?: Maybe<
    {
      __typename?: "Factor";
    } & Pick<
      Factor,
      "description" | "id" | "levelUnits" | "name" | "returnsCalculationMethod"
    >
  >;
};
export type RoverRiskModelGetFactorTimeSeriesQueryVariables = Exact<{
  from: Scalars["String"];
  id: Scalars["String"];
  to: Scalars["String"];
}>;
export type RoverRiskModelGetFactorTimeSeriesQuery = {
  __typename?: "Query";
} & {
  roverRiskModelGetFactorTimeSeries?: Maybe<
    {
      __typename?: "FactorTimeSeries";
    } & Pick<FactorTimeSeries, "factorId"> & {
        timeSeries: Array<
          Maybe<
            {
              __typename?: "FactorTimeSeriesDatum";
            } & Pick<FactorTimeSeriesDatum, "date" | "level">
          >
        >;
      }
  >;
};
export type RoverScoreGetAssetScoresQueryVariables = Exact<{
  assetId: Scalars["String"];
}>;
export type RoverScoreGetAssetScoresQuery = {
  __typename?: "Query";
} & {
  roverScoreGetAssetScores?: Maybe<
    {
      __typename?: "GetAssetScoresResponse";
    } & Pick<
      GetAssetScoresResponse,
      "attractiveness" | "credit" | "efficiency" | "liquidity" | "risk"
    >
  >;
};
export type RoverUniverseGetAllInventoriesQueryVariables = Exact<{
  institutionId: Scalars["String"];
}>;
export type RoverUniverseGetAllInventoriesQuery = {
  __typename?: "Query";
} & {
  roverUniverseGetAllInventories?: Maybe<
    {
      __typename?: "GetAllInventoriesResponse";
    } & {
      inventories: Array<
        Maybe<
          {
            __typename?: "InventoryMetadata";
          } & Pick<InventoryMetadata, "app" | "id" | "name" | "updatedAt">
        >
      >;
    }
  >;
};
export type RoverUniverseGetAssetQueryVariables = Exact<{
  date?: Maybe<Scalars["String"]>;
  id: Scalars["String"];
}>;
export type RoverUniverseGetAssetQuery = {
  __typename?: "Query";
} & {
  roverUniverseGetAsset?: Maybe<
    {
      __typename?: "GetAssetResponse";
    } & {
      asset: {
        __typename?: "Asset5";
      } & Pick<
        Asset5,
        | "assetSubtype"
        | "assetType"
        | "country"
        | "createdAt"
        | "createdBy"
        | "currency"
        | "description"
        | "displayId"
        | "id"
        | "liquid"
        | "market"
        | "metadata"
        | "name"
        | "price"
        | "priceDate"
        | "primaryExchange"
        | "primaryExchangeMic"
        | "rating"
        | "ticker"
        | "unit"
        | "updatedAt"
        | "updatedBy"
      > & {
          allocation?: Maybe<
            {
              __typename?: "Allocation7";
            } & Pick<Allocation7, "country" | "currency"> & {
                debtType?: Maybe<
                  {
                    __typename?: "DebtTypeAllocation2";
                  } & Pick<
                    DebtTypeAllocation2,
                    | "assetBackedSecurities"
                    | "bonds"
                    | "debentures"
                    | "mortgageBackedSecurities"
                    | "municipalBonds"
                    | "notes"
                    | "other"
                    | "preferredStock"
                    | "supranationalBonds"
                  >
                >;
                maturity?: Maybe<
                  {
                    __typename?: "MaturityAllocation";
                  } & Pick<
                    MaturityAllocation,
                    | "fiveToTenYears"
                    | "greaterThanThirtyYears"
                    | "lessThanOneYear"
                    | "oneToThreeYears"
                    | "other"
                    | "tenToTwentyYears"
                    | "threeToFiveYears"
                    | "twentyToThirtyYears"
                  >
                >;
                rating?: Maybe<
                  {
                    __typename?: "RatingAllocation2";
                  } & Pick<
                    RatingAllocation2,
                    | "a"
                    | "aa"
                    | "aaa"
                    | "b"
                    | "bb"
                    | "bbb"
                    | "c"
                    | "cc"
                    | "ccc"
                    | "d"
                    | "nr"
                  >
                >;
                region?: Maybe<
                  {
                    __typename?: "RegionAllocation";
                  } & Pick<
                    RegionAllocation,
                    | "africaExNorthAfrica"
                    | "asiaPacificExJapan"
                    | "emergingMarketsAsia"
                    | "emergingMarketsEurope"
                    | "europeExUnitedKingdom"
                    | "japan"
                    | "latinAmerica"
                    | "middleEastNorthAfrica"
                    | "northAmericaExUnitedStates"
                    | "other"
                    | "unitedKingdom"
                    | "unitedStates"
                  >
                >;
                sector?: Maybe<
                  {
                    __typename?: "SectorAllocation";
                  } & Pick<
                    SectorAllocation,
                    | "agency"
                    | "communications"
                    | "consumerGoods"
                    | "energy"
                    | "financials"
                    | "manufacturing"
                    | "municipal"
                    | "other"
                    | "services"
                    | "sovereign"
                    | "supranational"
                    | "transportation"
                  >
                >;
              }
          >;
          analytics?: Maybe<
            {
              __typename?: "Analytics";
            } & Pick<
              Analytics,
              | "convexity"
              | "creditBeta"
              | "currentYield"
              | "date"
              | "defaultAdjustedYield"
              | "distributionYield"
              | "dividendYield"
              | "duration"
              | "effectiveDuration"
              | "gSpread"
              | "optionAdjustedSpread"
              | "recoveryRate"
              | "secYield"
              | "source"
              | "spreadDuration"
              | "standaloneRisk"
              | "yearsToMaturity"
              | "yield"
              | "yieldToCall"
              | "yieldToMaturity"
              | "yieldToWorst"
              | "zSpread"
            >
          >;
          bond?: Maybe<
            {
              __typename?: "Bond4";
            } & Pick<
              Bond4,
              | "accruedInterest"
              | "active"
              | "amountOutstanding"
              | "amountOutstandingDate"
              | "annuity"
              | "assetStatus"
              | "callType"
              | "callable"
              | "capType"
              | "cleanPrice"
              | "cleanUpCallable"
              | "convertible"
              | "countryOfIssue"
              | "couponClass"
              | "couponType"
              | "covered"
              | "creationUnit"
              | "currentCoupon"
              | "datedDate"
              | "dayCount"
              | "debtServiceType"
              | "defeasable"
              | "denominationIncrement"
              | "dirtyPrice"
              | "dualCurrency"
              | "exDividendCalendarAdjustment"
              | "exDividendCalendarAdjustmentValue"
              | "exchangeListed"
              | "firstCouponDate"
              | "floating"
              | "green"
              | "guaranteed"
              | "hasWarrantsAttached"
              | "inflationProtected"
              | "instrumentType"
              | "issueCurrency"
              | "issueDate"
              | "lastCouponDate"
              | "lastLiquidEtfConstituentDate"
              | "maturityDate"
              | "mediumTermNote"
              | "minimumDenomination"
              | "nearestCallPeriodEndDate"
              | "nearestCallPeriodStartDate"
              | "nearestCallPrice"
              | "nextResetDate"
              | "ordinaryCallNoticePeriodMaximumAmount"
              | "ordinaryCallNoticePeriodMinimumAmount"
              | "ordinaryCallNoticePeriodUnits"
              | "ordinaryCallOptionType"
              | "ordinaryCallable"
              | "originalAmountIssued"
              | "originalBenchmark"
              | "originalIssuePrice"
              | "originalIssueSpread"
              | "originalYieldToMaturity"
              | "parValue"
              | "partlyPaid"
              | "payableInKind"
              | "performing"
              | "perpetual"
              | "priceQuoteConvention"
              | "priceQuoteMethod"
              | "priceQuoteRoundingMethod"
              | "principalCurrency"
              | "private144a"
              | "privatePlacement"
              | "puttable"
              | "quotedDirty"
              | "recordDateCalendarAdjustment"
              | "recordDateCalendarAdjustmentValue"
              | "redemptionValue"
              | "seniority"
              | "series"
              | "sinkingOrAmortizing"
              | "sovereignClass"
              | "state"
              | "stateTaxExempt"
              | "straight"
              | "strippable"
              | "subjectToAlternativeMinimumTax"
              | "totalAmountIssued"
              | "unitedStatesTaxExempt"
              | "useOfProceeds"
              | "withholdingTax"
            > & {
                classifications?: Maybe<
                  {
                    __typename?: "Classifications";
                  } & Pick<
                    Classifications,
                    | "barclaysLevel1"
                    | "barclaysLevel2"
                    | "barclaysLevel3"
                    | "barclaysLevel4"
                    | "bondhouse"
                    | "datastreamSubtype"
                    | "datastreamType"
                    | "gics"
                  >
                >;
                couponResetHistory?: Maybe<
                  Array<
                    Maybe<
                      {
                        __typename?: "CouponResetPeriod";
                      } & Pick<
                        CouponResetPeriod,
                        "effectiveDate" | "rate" | "rateNonAnnual"
                      >
                    >
                  >
                >;
                couponSchedule?: Maybe<
                  Array<
                    Maybe<
                      {
                        __typename?: "CouponPeriod";
                      } & Pick<
                        CouponPeriod,
                        | "cap"
                        | "couponClass"
                        | "couponFormula"
                        | "couponRateRoundingMethod"
                        | "dayCount"
                        | "effectiveDate"
                        | "floor"
                        | "indexDescription"
                        | "indexHolidayCalendar"
                        | "numberCutOffDays"
                        | "paymentBusinessDayRule"
                        | "paymentCalendarAdjustment"
                        | "paymentCalendarAdjustmentValue"
                        | "paymentCurrency"
                        | "paymentFrequency"
                        | "paymentHolidayCalendar"
                        | "resetBusinessDayRule"
                        | "resetCalendarAdjustment"
                        | "resetCalendarAdjustmentValue"
                        | "resetFrequency"
                        | "resetHolidayCalendar"
                      >
                    >
                  >
                >;
                creditEnhancement?: Maybe<
                  {
                    __typename?: "CreditEnhancement";
                  } & Pick<
                    CreditEnhancement,
                    | "additionalCreditType"
                    | "crossDefaultForGuarantor"
                    | "enhancementEffectiveDate"
                    | "enhancementEndDate"
                    | "enhancementLegNumber"
                    | "escrowAccount"
                    | "eventsofDefaultforGuarantor"
                    | "guarantee"
                    | "guarantorPermId"
                    | "guarantorProgram"
                    | "insurance"
                    | "interestCollateralType"
                    | "letterOfCreditExpirationDate"
                    | "negativePledgeForGuarantor"
                    | "otherCovenantsForGuarantor"
                    | "percentInterestCollateralized"
                    | "percentPrincipalCollateralized"
                    | "principalCollateralType"
                  >
                >;
                issue?: Maybe<
                  {
                    __typename?: "Issue";
                  } & Pick<
                    Issue,
                    | "active"
                    | "id"
                    | "issueDescription"
                    | "issueIdentifier"
                    | "issuerIdentifier"
                    | "offeringDate"
                    | "offeringDescription"
                    | "private144a"
                    | "privatePlacement"
                    | "totalProgramAmount"
                  >
                >;
                issuer?: Maybe<
                  {
                    __typename?: "Issuer4";
                  } & Pick<
                    Issuer4,
                    | "active"
                    | "bankrupt"
                    | "country"
                    | "id"
                    | "immediateParentId"
                    | "legalName"
                    | "longName"
                    | "sector"
                    | "shortName"
                    | "sovereignClass"
                    | "subsector"
                    | "ticker"
                    | "ultimateParentId"
                    | "url"
                  > & {
                      headquartersAddress?: Maybe<
                        {
                          __typename?: "Address2";
                        } & Pick<
                          Address2,
                          | "cityOrTown"
                          | "country"
                          | "stateOrCountyOrRegion"
                          | "street1"
                          | "street2"
                          | "street3"
                          | "zipCode"
                        >
                      >;
                      ratings?: Maybe<
                        {
                          __typename?: "IssuerRatings";
                        } & {
                          snpLongTerm?: Maybe<
                            {
                              __typename?: "Rating3";
                            } & Pick<
                              Rating3,
                              "effectiveDate" | "rank" | "rating"
                            >
                          >;
                          snpSeniorSecured?: Maybe<
                            {
                              __typename?: "Rating3";
                            } & Pick<
                              Rating3,
                              "effectiveDate" | "rank" | "rating"
                            >
                          >;
                          snpSeniorUnsecured?: Maybe<
                            {
                              __typename?: "Rating3";
                            } & Pick<
                              Rating3,
                              "effectiveDate" | "rank" | "rating"
                            >
                          >;
                          snpShortTerm?: Maybe<
                            {
                              __typename?: "Rating3";
                            } & Pick<
                              Rating3,
                              "effectiveDate" | "rank" | "rating"
                            >
                          >;
                          snpSubordinated?: Maybe<
                            {
                              __typename?: "Rating3";
                            } & Pick<
                              Rating3,
                              "effectiveDate" | "rank" | "rating"
                            >
                          >;
                        }
                      >;
                      registeredAddress?: Maybe<
                        {
                          __typename?: "Address2";
                        } & Pick<
                          Address2,
                          | "cityOrTown"
                          | "country"
                          | "stateOrCountyOrRegion"
                          | "street1"
                          | "street2"
                          | "street3"
                          | "zipCode"
                        >
                      >;
                    }
                >;
                liquidityCriteria?: Maybe<
                  {
                    __typename?: "BondLiquidityCriteria";
                  } & Pick<
                    BondLiquidityCriteria,
                    "hasAdequateQuotes" | "liquidityCriteriaDate"
                  >
                >;
                marketData?: Maybe<
                  {
                    __typename?: "MarketData2";
                  } & {
                    ejv?: Maybe<
                      {
                        __typename?: "MarketQuote";
                      } & Pick<
                        MarketQuote,
                        | "accruedInterest"
                        | "askPrice"
                        | "askYield"
                        | "assetSwapSpread"
                        | "benchmarkSpread"
                        | "bidPrice"
                        | "bidYield"
                        | "cbeYieldToMaturity"
                        | "cbeYieldToWorst"
                        | "closePrice"
                        | "date"
                        | "highPrice"
                        | "lowPrice"
                        | "openPrice"
                        | "price"
                        | "source"
                        | "swapSpread"
                        | "volume"
                        | "yieldToMaturity"
                        | "yieldToWorst"
                        | "zSpread"
                      >
                    >;
                  }
                >;
                richCheap?: Maybe<
                  {
                    __typename?: "RichCheap";
                  } & Pick<
                    RichCheap,
                    "effectiveDate" | "interquartileRange" | "richCheapBps"
                  >
                >;
              }
          >;
          equity?: Maybe<
            {
              __typename?: "Equity";
            } & Pick<
              Equity,
              | "eps"
              | "marketCap"
              | "peRatio"
              | "shareClass"
              | "tradeLotRoundSize"
              | "tradeLotSize"
            >
          >;
          esgScores?: Maybe<
            {
              __typename?: "EsgScores2";
            } & Pick<
              EsgScores2,
              "environmental" | "governance" | "social" | "timestamp" | "total"
            >
          >;
          fund?: Maybe<
            {
              __typename?: "Fund4";
            } & Pick<
              Fund4,
              | "assetStatus"
              | "benchmark"
              | "classification"
              | "fundType"
              | "inceptionDate"
              | "institutional"
              | "managementCompany"
              | "midPrice"
              | "netAssetValuePerShare"
              | "netAssets"
              | "netAssetsDate"
              | "priceDate"
              | "regulatoryStructure"
              | "replicationStrategy"
              | "tradeLotSize"
            > & {
                allocation?: Maybe<
                  {
                    __typename?: "FundAllocation";
                  } & Pick<
                    FundAllocation,
                    "currency" | "equityCountry" | "fixedIncomeCountry"
                  > & {
                      asset?: Maybe<
                        {
                          __typename?: "AssetAllocation";
                        } & Pick<
                          AssetAllocation,
                          "cash" | "equity" | "fixedIncome" | "other"
                        >
                      >;
                      equityRegion?: Maybe<
                        {
                          __typename?: "RegionAllocation";
                        } & Pick<
                          RegionAllocation,
                          | "africaExNorthAfrica"
                          | "asiaPacificExJapan"
                          | "emergingMarketsAsia"
                          | "emergingMarketsEurope"
                          | "europeExUnitedKingdom"
                          | "japan"
                          | "latinAmerica"
                          | "middleEastNorthAfrica"
                          | "northAmericaExUnitedStates"
                          | "other"
                          | "unitedKingdom"
                          | "unitedStates"
                        >
                      >;
                      fixedIncomeRegion?: Maybe<
                        {
                          __typename?: "RegionAllocation";
                        } & Pick<
                          RegionAllocation,
                          | "africaExNorthAfrica"
                          | "asiaPacificExJapan"
                          | "emergingMarketsAsia"
                          | "emergingMarketsEurope"
                          | "europeExUnitedKingdom"
                          | "japan"
                          | "latinAmerica"
                          | "middleEastNorthAfrica"
                          | "northAmericaExUnitedStates"
                          | "other"
                          | "unitedKingdom"
                          | "unitedStates"
                        >
                      >;
                      gicsSubIndustry?: Maybe<
                        {
                          __typename?: "GicsSubIndustryAllocation";
                        } & Pick<
                          GicsSubIndustryAllocation,
                          | "communicationServices"
                          | "consumerDiscretionary"
                          | "consumerStaples"
                          | "energy"
                          | "financials"
                          | "healthCare"
                          | "industrials"
                          | "informationTechnology"
                          | "materials"
                          | "other"
                          | "realEstate"
                          | "utilities"
                        >
                      >;
                      trbcIndustry?: Maybe<
                        {
                          __typename?: "TrbcIndustryAllocation";
                        } & Pick<
                          TrbcIndustryAllocation,
                          | "basicMaterials"
                          | "consumerCyclicals"
                          | "consumerNonCyclicals"
                          | "energy"
                          | "financials"
                          | "healthcare"
                          | "industrials"
                          | "other"
                          | "technology"
                          | "telecommunicationsServices"
                          | "utilities"
                        >
                      >;
                    }
                >;
                apexSupport?: Maybe<
                  {
                    __typename?: "ApexSupport";
                  } & Pick<ApexSupport, "supportDate" | "supported">
                >;
                distributions?: Maybe<
                  {
                    __typename?: "FundDistributions";
                  } & {
                    capitalGain?: Maybe<
                      {
                        __typename?: "CapitalGainDistributions";
                      } & {
                        capitalGain?: Maybe<
                          {
                            __typename?: "FundDistribution";
                          } & Pick<
                            FundDistribution,
                            | "accountingDate"
                            | "exDate"
                            | "exValue"
                            | "paymentDate"
                            | "recordDate"
                            | "reinvestmentDate"
                            | "reinvestmentType"
                            | "reinvestmentValue"
                            | "taxableInterestIncome"
                          >
                        >;
                        collectibles?: Maybe<
                          {
                            __typename?: "FundDistribution";
                          } & Pick<
                            FundDistribution,
                            | "accountingDate"
                            | "exDate"
                            | "exValue"
                            | "paymentDate"
                            | "recordDate"
                            | "reinvestmentDate"
                            | "reinvestmentType"
                            | "reinvestmentValue"
                            | "taxableInterestIncome"
                          >
                        >;
                        longTermCapitalGain?: Maybe<
                          {
                            __typename?: "FundDistribution";
                          } & Pick<
                            FundDistribution,
                            | "accountingDate"
                            | "exDate"
                            | "exValue"
                            | "paymentDate"
                            | "recordDate"
                            | "reinvestmentDate"
                            | "reinvestmentType"
                            | "reinvestmentValue"
                            | "taxableInterestIncome"
                          >
                        >;
                        mediumTermCapitalGain?: Maybe<
                          {
                            __typename?: "FundDistribution";
                          } & Pick<
                            FundDistribution,
                            | "accountingDate"
                            | "exDate"
                            | "exValue"
                            | "paymentDate"
                            | "recordDate"
                            | "reinvestmentDate"
                            | "reinvestmentType"
                            | "reinvestmentValue"
                            | "taxableInterestIncome"
                          >
                        >;
                        nonQualifiedShortTermCapitalGain?: Maybe<
                          {
                            __typename?: "FundDistribution";
                          } & Pick<
                            FundDistribution,
                            | "accountingDate"
                            | "exDate"
                            | "exValue"
                            | "paymentDate"
                            | "recordDate"
                            | "reinvestmentDate"
                            | "reinvestmentType"
                            | "reinvestmentValue"
                            | "taxableInterestIncome"
                          >
                        >;
                        qualifiedShortTermCapitalGain?: Maybe<
                          {
                            __typename?: "FundDistribution";
                          } & Pick<
                            FundDistribution,
                            | "accountingDate"
                            | "exDate"
                            | "exValue"
                            | "paymentDate"
                            | "recordDate"
                            | "reinvestmentDate"
                            | "reinvestmentType"
                            | "reinvestmentValue"
                            | "taxableInterestIncome"
                          >
                        >;
                        returnOfCapital?: Maybe<
                          {
                            __typename?: "FundDistribution";
                          } & Pick<
                            FundDistribution,
                            | "accountingDate"
                            | "exDate"
                            | "exValue"
                            | "paymentDate"
                            | "recordDate"
                            | "reinvestmentDate"
                            | "reinvestmentType"
                            | "reinvestmentValue"
                            | "taxableInterestIncome"
                          >
                        >;
                        shortTermCapitalGain?: Maybe<
                          {
                            __typename?: "FundDistribution";
                          } & Pick<
                            FundDistribution,
                            | "accountingDate"
                            | "exDate"
                            | "exValue"
                            | "paymentDate"
                            | "recordDate"
                            | "reinvestmentDate"
                            | "reinvestmentType"
                            | "reinvestmentValue"
                            | "taxableInterestIncome"
                          >
                        >;
                        superLongTermCapitalGain?: Maybe<
                          {
                            __typename?: "FundDistribution";
                          } & Pick<
                            FundDistribution,
                            | "accountingDate"
                            | "exDate"
                            | "exValue"
                            | "paymentDate"
                            | "recordDate"
                            | "reinvestmentDate"
                            | "reinvestmentType"
                            | "reinvestmentValue"
                            | "taxableInterestIncome"
                          >
                        >;
                      }
                    >;
                    foreignTaxCredit?: Maybe<
                      {
                        __typename?: "ForeignTaxCreditDistributions";
                      } & {
                        foreignTaxCredit?: Maybe<
                          {
                            __typename?: "FundDistribution";
                          } & Pick<
                            FundDistribution,
                            | "accountingDate"
                            | "exDate"
                            | "exValue"
                            | "paymentDate"
                            | "recordDate"
                            | "reinvestmentDate"
                            | "reinvestmentType"
                            | "reinvestmentValue"
                            | "taxableInterestIncome"
                          >
                        >;
                        nonQualifiedForeignTaxPaid?: Maybe<
                          {
                            __typename?: "FundDistribution";
                          } & Pick<
                            FundDistribution,
                            | "accountingDate"
                            | "exDate"
                            | "exValue"
                            | "paymentDate"
                            | "recordDate"
                            | "reinvestmentDate"
                            | "reinvestmentType"
                            | "reinvestmentValue"
                            | "taxableInterestIncome"
                          >
                        >;
                        qualifiedForeignTaxPaid?: Maybe<
                          {
                            __typename?: "FundDistribution";
                          } & Pick<
                            FundDistribution,
                            | "accountingDate"
                            | "exDate"
                            | "exValue"
                            | "paymentDate"
                            | "recordDate"
                            | "reinvestmentDate"
                            | "reinvestmentType"
                            | "reinvestmentValue"
                            | "taxableInterestIncome"
                          >
                        >;
                      }
                    >;
                    income?: Maybe<
                      {
                        __typename?: "IncomeDistributions";
                      } & {
                        aggregateAccrual?: Maybe<
                          {
                            __typename?: "FundDistribution";
                          } & Pick<
                            FundDistribution,
                            | "accountingDate"
                            | "exDate"
                            | "exValue"
                            | "paymentDate"
                            | "recordDate"
                            | "reinvestmentDate"
                            | "reinvestmentType"
                            | "reinvestmentValue"
                            | "taxableInterestIncome"
                          >
                        >;
                        exemptIncome?: Maybe<
                          {
                            __typename?: "FundDistribution";
                          } & Pick<
                            FundDistribution,
                            | "accountingDate"
                            | "exDate"
                            | "exValue"
                            | "paymentDate"
                            | "recordDate"
                            | "reinvestmentDate"
                            | "reinvestmentType"
                            | "reinvestmentValue"
                            | "taxableInterestIncome"
                          >
                        >;
                        incomeDividend?: Maybe<
                          {
                            __typename?: "FundDistribution";
                          } & Pick<
                            FundDistribution,
                            | "accountingDate"
                            | "exDate"
                            | "exValue"
                            | "paymentDate"
                            | "recordDate"
                            | "reinvestmentDate"
                            | "reinvestmentType"
                            | "reinvestmentValue"
                            | "taxableInterestIncome"
                          >
                        >;
                        interestIncome?: Maybe<
                          {
                            __typename?: "FundDistribution";
                          } & Pick<
                            FundDistribution,
                            | "accountingDate"
                            | "exDate"
                            | "exValue"
                            | "paymentDate"
                            | "recordDate"
                            | "reinvestmentDate"
                            | "reinvestmentType"
                            | "reinvestmentValue"
                            | "taxableInterestIncome"
                          >
                        >;
                        nonQualifiedIncomeDividend?: Maybe<
                          {
                            __typename?: "FundDistribution";
                          } & Pick<
                            FundDistribution,
                            | "accountingDate"
                            | "exDate"
                            | "exValue"
                            | "paymentDate"
                            | "recordDate"
                            | "reinvestmentDate"
                            | "reinvestmentType"
                            | "reinvestmentValue"
                            | "taxableInterestIncome"
                          >
                        >;
                        qualifiedIncomeDividend?: Maybe<
                          {
                            __typename?: "FundDistribution";
                          } & Pick<
                            FundDistribution,
                            | "accountingDate"
                            | "exDate"
                            | "exValue"
                            | "paymentDate"
                            | "recordDate"
                            | "reinvestmentDate"
                            | "reinvestmentType"
                            | "reinvestmentValue"
                            | "taxableInterestIncome"
                          >
                        >;
                      }
                    >;
                    repaymentCategory?: Maybe<
                      {
                        __typename?: "RepaymentCategoryDistributions";
                      } & {
                        bonusIssue?: Maybe<
                          {
                            __typename?: "FundDistribution";
                          } & Pick<
                            FundDistribution,
                            | "accountingDate"
                            | "exDate"
                            | "exValue"
                            | "paymentDate"
                            | "recordDate"
                            | "reinvestmentDate"
                            | "reinvestmentType"
                            | "reinvestmentValue"
                            | "taxableInterestIncome"
                          >
                        >;
                        factor?: Maybe<
                          {
                            __typename?: "FundDistribution";
                          } & Pick<
                            FundDistribution,
                            | "accountingDate"
                            | "exDate"
                            | "exValue"
                            | "paymentDate"
                            | "recordDate"
                            | "reinvestmentDate"
                            | "reinvestmentType"
                            | "reinvestmentValue"
                            | "taxableInterestIncome"
                          >
                        >;
                        repayment?: Maybe<
                          {
                            __typename?: "FundDistribution";
                          } & Pick<
                            FundDistribution,
                            | "accountingDate"
                            | "exDate"
                            | "exValue"
                            | "paymentDate"
                            | "recordDate"
                            | "reinvestmentDate"
                            | "reinvestmentType"
                            | "reinvestmentValue"
                            | "taxableInterestIncome"
                          >
                        >;
                        rightsIssue?: Maybe<
                          {
                            __typename?: "FundDistribution";
                          } & Pick<
                            FundDistribution,
                            | "accountingDate"
                            | "exDate"
                            | "exValue"
                            | "paymentDate"
                            | "recordDate"
                            | "reinvestmentDate"
                            | "reinvestmentType"
                            | "reinvestmentValue"
                            | "taxableInterestIncome"
                          >
                        >;
                        split?: Maybe<
                          {
                            __typename?: "FundDistribution";
                          } & Pick<
                            FundDistribution,
                            | "accountingDate"
                            | "exDate"
                            | "exValue"
                            | "paymentDate"
                            | "recordDate"
                            | "reinvestmentDate"
                            | "reinvestmentType"
                            | "reinvestmentValue"
                            | "taxableInterestIncome"
                          >
                        >;
                      }
                    >;
                  }
                >;
                fees?: Maybe<
                  {
                    __typename?: "Fees";
                  } & Pick<
                    Fees,
                    | "backLoad"
                    | "frontLoad"
                    | "fundExpenseRatio"
                    | "managementFee"
                    | "marketing12b1Fee"
                    | "performanceFee"
                  >
                >;
                focus?: Maybe<
                  {
                    __typename?: "Focus";
                  } & Pick<Focus, "assetClassFocus" | "geoFocus">
                >;
                scores?: Maybe<
                  {
                    __typename?: "Scores6";
                  } & {
                    consistentReturn?: Maybe<
                      {
                        __typename?: "Score";
                      } & Pick<
                        Score,
                        "fiveYear" | "overall" | "tenYear" | "threeYear"
                      >
                    >;
                    expense?: Maybe<
                      {
                        __typename?: "Score";
                      } & Pick<
                        Score,
                        "fiveYear" | "overall" | "tenYear" | "threeYear"
                      >
                    >;
                    preservation?: Maybe<
                      {
                        __typename?: "Score";
                      } & Pick<
                        Score,
                        "fiveYear" | "overall" | "tenYear" | "threeYear"
                      >
                    >;
                    taxEfficiency?: Maybe<
                      {
                        __typename?: "Score";
                      } & Pick<
                        Score,
                        "fiveYear" | "overall" | "tenYear" | "threeYear"
                      >
                    >;
                    totalReturn?: Maybe<
                      {
                        __typename?: "Score";
                      } & Pick<
                        Score,
                        "fiveYear" | "overall" | "tenYear" | "threeYear"
                      >
                    >;
                  }
                >;
                yields?: Maybe<
                  {
                    __typename?: "FundYields";
                  } & Pick<
                    FundYields,
                    | "dailySecYield"
                    | "dailySecYieldDate"
                    | "distributionYield"
                    | "dividendYield"
                    | "lipperDistributionYield"
                    | "projectedYield"
                    | "secYield"
                    | "simpleYieldBegin"
                    | "simpleYieldEnd"
                    | "thirtyDayYield"
                    | "trailingTwelveMonthYield"
                  >
                >;
              }
          >;
          identifiers?: Maybe<
            {
              __typename?: "Identifiers";
            } & Pick<
              Identifiers,
              | "apex"
              | "bbGlobal"
              | "cik"
              | "cins"
              | "cusip"
              | "isin"
              | "primaryTicker"
              | "refinitivAssetId"
              | "refinitivIssuePermId"
              | "refinitivLipperId"
              | "refinitivLipperParentId"
              | "refinitivLipperPermId"
              | "sedol"
              | "valoren"
            >
          >;
          legalEntity?: Maybe<
            {
              __typename?: "LegalEntity";
            } & Pick<
              LegalEntity,
              | "issuingLegalEntityId"
              | "ultimateObligor"
              | "ultimateObligorId"
              | "ultimateParent"
              | "ultimateParentId"
              | "ultimateParentTickerExchange"
            >
          >;
          priceQuotes?: Maybe<
            Array<
              Maybe<
                {
                  __typename?: "PriceQuote";
                } & Pick<
                  PriceQuote,
                  | "accruedInterest"
                  | "askPrice"
                  | "askYield"
                  | "assetSwapSpread"
                  | "benchmarkSpread"
                  | "bidPrice"
                  | "bidYield"
                  | "cbeYieldToMaturity"
                  | "cbeYieldToWorst"
                  | "closePrice"
                  | "date"
                  | "highPrice"
                  | "lowPrice"
                  | "openPrice"
                  | "price"
                  | "source"
                  | "swapSpread"
                  | "volume"
                  | "yieldToMaturity"
                  | "yieldToWorst"
                  | "zSpread"
                >
              >
            >
          >;
          scores?: Maybe<
            {
              __typename?: "RoverScores";
            } & Pick<
              RoverScores,
              | "attractiveness"
              | "credit"
              | "efficiency"
              | "liquidity"
              | "risk"
              | "timestamp"
            >
          >;
          universes?: Maybe<
            {
              __typename?: "Universes";
            } & Pick<
              Universes,
              "custom" | "general" | "liquid" | "search" | "timestamp"
            >
          >;
        };
    }
  >;
};
export type RoverUniverseGetAssetByExternalIdQueryVariables = Exact<{
  date?: Maybe<Scalars["String"]>;
  externalId: Scalars["String"];
  sourceName: Scalars["String"];
}>;
export type RoverUniverseGetAssetByExternalIdQuery = {
  __typename?: "Query";
} & {
  roverUniverseGetAssetByExternalId?: Maybe<
    {
      __typename?: "GetAssetByExternalIdResponse";
    } & {
      asset?: Maybe<
        {
          __typename?: "Asset5";
        } & Pick<
          Asset5,
          | "assetSubtype"
          | "assetType"
          | "country"
          | "createdAt"
          | "createdBy"
          | "currency"
          | "description"
          | "displayId"
          | "id"
          | "liquid"
          | "market"
          | "metadata"
          | "name"
          | "price"
          | "priceDate"
          | "primaryExchange"
          | "primaryExchangeMic"
          | "rating"
          | "ticker"
          | "unit"
          | "updatedAt"
          | "updatedBy"
        > & {
            allocation?: Maybe<
              {
                __typename?: "Allocation7";
              } & Pick<Allocation7, "country" | "currency"> & {
                  debtType?: Maybe<
                    {
                      __typename?: "DebtTypeAllocation2";
                    } & Pick<
                      DebtTypeAllocation2,
                      | "assetBackedSecurities"
                      | "bonds"
                      | "debentures"
                      | "mortgageBackedSecurities"
                      | "municipalBonds"
                      | "notes"
                      | "other"
                      | "preferredStock"
                      | "supranationalBonds"
                    >
                  >;
                  maturity?: Maybe<
                    {
                      __typename?: "MaturityAllocation";
                    } & Pick<
                      MaturityAllocation,
                      | "fiveToTenYears"
                      | "greaterThanThirtyYears"
                      | "lessThanOneYear"
                      | "oneToThreeYears"
                      | "other"
                      | "tenToTwentyYears"
                      | "threeToFiveYears"
                      | "twentyToThirtyYears"
                    >
                  >;
                  rating?: Maybe<
                    {
                      __typename?: "RatingAllocation2";
                    } & Pick<
                      RatingAllocation2,
                      | "a"
                      | "aa"
                      | "aaa"
                      | "b"
                      | "bb"
                      | "bbb"
                      | "c"
                      | "cc"
                      | "ccc"
                      | "d"
                      | "nr"
                    >
                  >;
                  region?: Maybe<
                    {
                      __typename?: "RegionAllocation";
                    } & Pick<
                      RegionAllocation,
                      | "africaExNorthAfrica"
                      | "asiaPacificExJapan"
                      | "emergingMarketsAsia"
                      | "emergingMarketsEurope"
                      | "europeExUnitedKingdom"
                      | "japan"
                      | "latinAmerica"
                      | "middleEastNorthAfrica"
                      | "northAmericaExUnitedStates"
                      | "other"
                      | "unitedKingdom"
                      | "unitedStates"
                    >
                  >;
                  sector?: Maybe<
                    {
                      __typename?: "SectorAllocation";
                    } & Pick<
                      SectorAllocation,
                      | "agency"
                      | "communications"
                      | "consumerGoods"
                      | "energy"
                      | "financials"
                      | "manufacturing"
                      | "municipal"
                      | "other"
                      | "services"
                      | "sovereign"
                      | "supranational"
                      | "transportation"
                    >
                  >;
                }
            >;
            analytics?: Maybe<
              {
                __typename?: "Analytics";
              } & Pick<
                Analytics,
                | "convexity"
                | "creditBeta"
                | "currentYield"
                | "date"
                | "defaultAdjustedYield"
                | "distributionYield"
                | "dividendYield"
                | "duration"
                | "effectiveDuration"
                | "gSpread"
                | "optionAdjustedSpread"
                | "recoveryRate"
                | "secYield"
                | "source"
                | "spreadDuration"
                | "standaloneRisk"
                | "yearsToMaturity"
                | "yield"
                | "yieldToCall"
                | "yieldToMaturity"
                | "yieldToWorst"
                | "zSpread"
              >
            >;
            bond?: Maybe<
              {
                __typename?: "Bond4";
              } & Pick<
                Bond4,
                | "accruedInterest"
                | "active"
                | "amountOutstanding"
                | "amountOutstandingDate"
                | "annuity"
                | "assetStatus"
                | "callType"
                | "callable"
                | "capType"
                | "cleanPrice"
                | "cleanUpCallable"
                | "convertible"
                | "countryOfIssue"
                | "couponClass"
                | "couponType"
                | "covered"
                | "creationUnit"
                | "currentCoupon"
                | "datedDate"
                | "dayCount"
                | "debtServiceType"
                | "defeasable"
                | "denominationIncrement"
                | "dirtyPrice"
                | "dualCurrency"
                | "exDividendCalendarAdjustment"
                | "exDividendCalendarAdjustmentValue"
                | "exchangeListed"
                | "firstCouponDate"
                | "floating"
                | "green"
                | "guaranteed"
                | "hasWarrantsAttached"
                | "inflationProtected"
                | "instrumentType"
                | "issueCurrency"
                | "issueDate"
                | "lastCouponDate"
                | "lastLiquidEtfConstituentDate"
                | "maturityDate"
                | "mediumTermNote"
                | "minimumDenomination"
                | "nearestCallPeriodEndDate"
                | "nearestCallPeriodStartDate"
                | "nearestCallPrice"
                | "nextResetDate"
                | "ordinaryCallNoticePeriodMaximumAmount"
                | "ordinaryCallNoticePeriodMinimumAmount"
                | "ordinaryCallNoticePeriodUnits"
                | "ordinaryCallOptionType"
                | "ordinaryCallable"
                | "originalAmountIssued"
                | "originalBenchmark"
                | "originalIssuePrice"
                | "originalIssueSpread"
                | "originalYieldToMaturity"
                | "parValue"
                | "partlyPaid"
                | "payableInKind"
                | "performing"
                | "perpetual"
                | "priceQuoteConvention"
                | "priceQuoteMethod"
                | "priceQuoteRoundingMethod"
                | "principalCurrency"
                | "private144a"
                | "privatePlacement"
                | "puttable"
                | "quotedDirty"
                | "recordDateCalendarAdjustment"
                | "recordDateCalendarAdjustmentValue"
                | "redemptionValue"
                | "seniority"
                | "series"
                | "sinkingOrAmortizing"
                | "sovereignClass"
                | "state"
                | "stateTaxExempt"
                | "straight"
                | "strippable"
                | "subjectToAlternativeMinimumTax"
                | "totalAmountIssued"
                | "unitedStatesTaxExempt"
                | "useOfProceeds"
                | "withholdingTax"
              > & {
                  classifications?: Maybe<
                    {
                      __typename?: "Classifications";
                    } & Pick<
                      Classifications,
                      | "barclaysLevel1"
                      | "barclaysLevel2"
                      | "barclaysLevel3"
                      | "barclaysLevel4"
                      | "bondhouse"
                      | "datastreamSubtype"
                      | "datastreamType"
                      | "gics"
                    >
                  >;
                  couponResetHistory?: Maybe<
                    Array<
                      Maybe<
                        {
                          __typename?: "CouponResetPeriod";
                        } & Pick<
                          CouponResetPeriod,
                          "effectiveDate" | "rate" | "rateNonAnnual"
                        >
                      >
                    >
                  >;
                  couponSchedule?: Maybe<
                    Array<
                      Maybe<
                        {
                          __typename?: "CouponPeriod";
                        } & Pick<
                          CouponPeriod,
                          | "cap"
                          | "couponClass"
                          | "couponFormula"
                          | "couponRateRoundingMethod"
                          | "dayCount"
                          | "effectiveDate"
                          | "floor"
                          | "indexDescription"
                          | "indexHolidayCalendar"
                          | "numberCutOffDays"
                          | "paymentBusinessDayRule"
                          | "paymentCalendarAdjustment"
                          | "paymentCalendarAdjustmentValue"
                          | "paymentCurrency"
                          | "paymentFrequency"
                          | "paymentHolidayCalendar"
                          | "resetBusinessDayRule"
                          | "resetCalendarAdjustment"
                          | "resetCalendarAdjustmentValue"
                          | "resetFrequency"
                          | "resetHolidayCalendar"
                        >
                      >
                    >
                  >;
                  creditEnhancement?: Maybe<
                    {
                      __typename?: "CreditEnhancement";
                    } & Pick<
                      CreditEnhancement,
                      | "additionalCreditType"
                      | "crossDefaultForGuarantor"
                      | "enhancementEffectiveDate"
                      | "enhancementEndDate"
                      | "enhancementLegNumber"
                      | "escrowAccount"
                      | "eventsofDefaultforGuarantor"
                      | "guarantee"
                      | "guarantorPermId"
                      | "guarantorProgram"
                      | "insurance"
                      | "interestCollateralType"
                      | "letterOfCreditExpirationDate"
                      | "negativePledgeForGuarantor"
                      | "otherCovenantsForGuarantor"
                      | "percentInterestCollateralized"
                      | "percentPrincipalCollateralized"
                      | "principalCollateralType"
                    >
                  >;
                  issue?: Maybe<
                    {
                      __typename?: "Issue";
                    } & Pick<
                      Issue,
                      | "active"
                      | "id"
                      | "issueDescription"
                      | "issueIdentifier"
                      | "issuerIdentifier"
                      | "offeringDate"
                      | "offeringDescription"
                      | "private144a"
                      | "privatePlacement"
                      | "totalProgramAmount"
                    >
                  >;
                  issuer?: Maybe<
                    {
                      __typename?: "Issuer4";
                    } & Pick<
                      Issuer4,
                      | "active"
                      | "bankrupt"
                      | "country"
                      | "id"
                      | "immediateParentId"
                      | "legalName"
                      | "longName"
                      | "sector"
                      | "shortName"
                      | "sovereignClass"
                      | "subsector"
                      | "ticker"
                      | "ultimateParentId"
                      | "url"
                    > & {
                        headquartersAddress?: Maybe<
                          {
                            __typename?: "Address2";
                          } & Pick<
                            Address2,
                            | "cityOrTown"
                            | "country"
                            | "stateOrCountyOrRegion"
                            | "street1"
                            | "street2"
                            | "street3"
                            | "zipCode"
                          >
                        >;
                        ratings?: Maybe<
                          {
                            __typename?: "IssuerRatings";
                          } & {
                            snpLongTerm?: Maybe<
                              {
                                __typename?: "Rating3";
                              } & Pick<
                                Rating3,
                                "effectiveDate" | "rank" | "rating"
                              >
                            >;
                            snpSeniorSecured?: Maybe<
                              {
                                __typename?: "Rating3";
                              } & Pick<
                                Rating3,
                                "effectiveDate" | "rank" | "rating"
                              >
                            >;
                            snpSeniorUnsecured?: Maybe<
                              {
                                __typename?: "Rating3";
                              } & Pick<
                                Rating3,
                                "effectiveDate" | "rank" | "rating"
                              >
                            >;
                            snpShortTerm?: Maybe<
                              {
                                __typename?: "Rating3";
                              } & Pick<
                                Rating3,
                                "effectiveDate" | "rank" | "rating"
                              >
                            >;
                            snpSubordinated?: Maybe<
                              {
                                __typename?: "Rating3";
                              } & Pick<
                                Rating3,
                                "effectiveDate" | "rank" | "rating"
                              >
                            >;
                          }
                        >;
                        registeredAddress?: Maybe<
                          {
                            __typename?: "Address2";
                          } & Pick<
                            Address2,
                            | "cityOrTown"
                            | "country"
                            | "stateOrCountyOrRegion"
                            | "street1"
                            | "street2"
                            | "street3"
                            | "zipCode"
                          >
                        >;
                      }
                  >;
                  liquidityCriteria?: Maybe<
                    {
                      __typename?: "BondLiquidityCriteria";
                    } & Pick<
                      BondLiquidityCriteria,
                      "hasAdequateQuotes" | "liquidityCriteriaDate"
                    >
                  >;
                  marketData?: Maybe<
                    {
                      __typename?: "MarketData2";
                    } & {
                      ejv?: Maybe<
                        {
                          __typename?: "MarketQuote";
                        } & Pick<
                          MarketQuote,
                          | "accruedInterest"
                          | "askPrice"
                          | "askYield"
                          | "assetSwapSpread"
                          | "benchmarkSpread"
                          | "bidPrice"
                          | "bidYield"
                          | "cbeYieldToMaturity"
                          | "cbeYieldToWorst"
                          | "closePrice"
                          | "date"
                          | "highPrice"
                          | "lowPrice"
                          | "openPrice"
                          | "price"
                          | "source"
                          | "swapSpread"
                          | "volume"
                          | "yieldToMaturity"
                          | "yieldToWorst"
                          | "zSpread"
                        >
                      >;
                    }
                  >;
                  richCheap?: Maybe<
                    {
                      __typename?: "RichCheap";
                    } & Pick<
                      RichCheap,
                      "effectiveDate" | "interquartileRange" | "richCheapBps"
                    >
                  >;
                }
            >;
            equity?: Maybe<
              {
                __typename?: "Equity";
              } & Pick<
                Equity,
                | "eps"
                | "marketCap"
                | "peRatio"
                | "shareClass"
                | "tradeLotRoundSize"
                | "tradeLotSize"
              >
            >;
            esgScores?: Maybe<
              {
                __typename?: "EsgScores2";
              } & Pick<
                EsgScores2,
                | "environmental"
                | "governance"
                | "social"
                | "timestamp"
                | "total"
              >
            >;
            fund?: Maybe<
              {
                __typename?: "Fund4";
              } & Pick<
                Fund4,
                | "assetStatus"
                | "benchmark"
                | "classification"
                | "fundType"
                | "inceptionDate"
                | "institutional"
                | "managementCompany"
                | "midPrice"
                | "netAssetValuePerShare"
                | "netAssets"
                | "netAssetsDate"
                | "priceDate"
                | "regulatoryStructure"
                | "replicationStrategy"
                | "tradeLotSize"
              > & {
                  allocation?: Maybe<
                    {
                      __typename?: "FundAllocation";
                    } & Pick<
                      FundAllocation,
                      "currency" | "equityCountry" | "fixedIncomeCountry"
                    > & {
                        asset?: Maybe<
                          {
                            __typename?: "AssetAllocation";
                          } & Pick<
                            AssetAllocation,
                            "cash" | "equity" | "fixedIncome" | "other"
                          >
                        >;
                        equityRegion?: Maybe<
                          {
                            __typename?: "RegionAllocation";
                          } & Pick<
                            RegionAllocation,
                            | "africaExNorthAfrica"
                            | "asiaPacificExJapan"
                            | "emergingMarketsAsia"
                            | "emergingMarketsEurope"
                            | "europeExUnitedKingdom"
                            | "japan"
                            | "latinAmerica"
                            | "middleEastNorthAfrica"
                            | "northAmericaExUnitedStates"
                            | "other"
                            | "unitedKingdom"
                            | "unitedStates"
                          >
                        >;
                        fixedIncomeRegion?: Maybe<
                          {
                            __typename?: "RegionAllocation";
                          } & Pick<
                            RegionAllocation,
                            | "africaExNorthAfrica"
                            | "asiaPacificExJapan"
                            | "emergingMarketsAsia"
                            | "emergingMarketsEurope"
                            | "europeExUnitedKingdom"
                            | "japan"
                            | "latinAmerica"
                            | "middleEastNorthAfrica"
                            | "northAmericaExUnitedStates"
                            | "other"
                            | "unitedKingdom"
                            | "unitedStates"
                          >
                        >;
                        gicsSubIndustry?: Maybe<
                          {
                            __typename?: "GicsSubIndustryAllocation";
                          } & Pick<
                            GicsSubIndustryAllocation,
                            | "communicationServices"
                            | "consumerDiscretionary"
                            | "consumerStaples"
                            | "energy"
                            | "financials"
                            | "healthCare"
                            | "industrials"
                            | "informationTechnology"
                            | "materials"
                            | "other"
                            | "realEstate"
                            | "utilities"
                          >
                        >;
                        trbcIndustry?: Maybe<
                          {
                            __typename?: "TrbcIndustryAllocation";
                          } & Pick<
                            TrbcIndustryAllocation,
                            | "basicMaterials"
                            | "consumerCyclicals"
                            | "consumerNonCyclicals"
                            | "energy"
                            | "financials"
                            | "healthcare"
                            | "industrials"
                            | "other"
                            | "technology"
                            | "telecommunicationsServices"
                            | "utilities"
                          >
                        >;
                      }
                  >;
                  apexSupport?: Maybe<
                    {
                      __typename?: "ApexSupport";
                    } & Pick<ApexSupport, "supportDate" | "supported">
                  >;
                  distributions?: Maybe<
                    {
                      __typename?: "FundDistributions";
                    } & {
                      capitalGain?: Maybe<
                        {
                          __typename?: "CapitalGainDistributions";
                        } & {
                          capitalGain?: Maybe<
                            {
                              __typename?: "FundDistribution";
                            } & Pick<
                              FundDistribution,
                              | "accountingDate"
                              | "exDate"
                              | "exValue"
                              | "paymentDate"
                              | "recordDate"
                              | "reinvestmentDate"
                              | "reinvestmentType"
                              | "reinvestmentValue"
                              | "taxableInterestIncome"
                            >
                          >;
                          collectibles?: Maybe<
                            {
                              __typename?: "FundDistribution";
                            } & Pick<
                              FundDistribution,
                              | "accountingDate"
                              | "exDate"
                              | "exValue"
                              | "paymentDate"
                              | "recordDate"
                              | "reinvestmentDate"
                              | "reinvestmentType"
                              | "reinvestmentValue"
                              | "taxableInterestIncome"
                            >
                          >;
                          longTermCapitalGain?: Maybe<
                            {
                              __typename?: "FundDistribution";
                            } & Pick<
                              FundDistribution,
                              | "accountingDate"
                              | "exDate"
                              | "exValue"
                              | "paymentDate"
                              | "recordDate"
                              | "reinvestmentDate"
                              | "reinvestmentType"
                              | "reinvestmentValue"
                              | "taxableInterestIncome"
                            >
                          >;
                          mediumTermCapitalGain?: Maybe<
                            {
                              __typename?: "FundDistribution";
                            } & Pick<
                              FundDistribution,
                              | "accountingDate"
                              | "exDate"
                              | "exValue"
                              | "paymentDate"
                              | "recordDate"
                              | "reinvestmentDate"
                              | "reinvestmentType"
                              | "reinvestmentValue"
                              | "taxableInterestIncome"
                            >
                          >;
                          nonQualifiedShortTermCapitalGain?: Maybe<
                            {
                              __typename?: "FundDistribution";
                            } & Pick<
                              FundDistribution,
                              | "accountingDate"
                              | "exDate"
                              | "exValue"
                              | "paymentDate"
                              | "recordDate"
                              | "reinvestmentDate"
                              | "reinvestmentType"
                              | "reinvestmentValue"
                              | "taxableInterestIncome"
                            >
                          >;
                          qualifiedShortTermCapitalGain?: Maybe<
                            {
                              __typename?: "FundDistribution";
                            } & Pick<
                              FundDistribution,
                              | "accountingDate"
                              | "exDate"
                              | "exValue"
                              | "paymentDate"
                              | "recordDate"
                              | "reinvestmentDate"
                              | "reinvestmentType"
                              | "reinvestmentValue"
                              | "taxableInterestIncome"
                            >
                          >;
                          returnOfCapital?: Maybe<
                            {
                              __typename?: "FundDistribution";
                            } & Pick<
                              FundDistribution,
                              | "accountingDate"
                              | "exDate"
                              | "exValue"
                              | "paymentDate"
                              | "recordDate"
                              | "reinvestmentDate"
                              | "reinvestmentType"
                              | "reinvestmentValue"
                              | "taxableInterestIncome"
                            >
                          >;
                          shortTermCapitalGain?: Maybe<
                            {
                              __typename?: "FundDistribution";
                            } & Pick<
                              FundDistribution,
                              | "accountingDate"
                              | "exDate"
                              | "exValue"
                              | "paymentDate"
                              | "recordDate"
                              | "reinvestmentDate"
                              | "reinvestmentType"
                              | "reinvestmentValue"
                              | "taxableInterestIncome"
                            >
                          >;
                          superLongTermCapitalGain?: Maybe<
                            {
                              __typename?: "FundDistribution";
                            } & Pick<
                              FundDistribution,
                              | "accountingDate"
                              | "exDate"
                              | "exValue"
                              | "paymentDate"
                              | "recordDate"
                              | "reinvestmentDate"
                              | "reinvestmentType"
                              | "reinvestmentValue"
                              | "taxableInterestIncome"
                            >
                          >;
                        }
                      >;
                      foreignTaxCredit?: Maybe<
                        {
                          __typename?: "ForeignTaxCreditDistributions";
                        } & {
                          foreignTaxCredit?: Maybe<
                            {
                              __typename?: "FundDistribution";
                            } & Pick<
                              FundDistribution,
                              | "accountingDate"
                              | "exDate"
                              | "exValue"
                              | "paymentDate"
                              | "recordDate"
                              | "reinvestmentDate"
                              | "reinvestmentType"
                              | "reinvestmentValue"
                              | "taxableInterestIncome"
                            >
                          >;
                          nonQualifiedForeignTaxPaid?: Maybe<
                            {
                              __typename?: "FundDistribution";
                            } & Pick<
                              FundDistribution,
                              | "accountingDate"
                              | "exDate"
                              | "exValue"
                              | "paymentDate"
                              | "recordDate"
                              | "reinvestmentDate"
                              | "reinvestmentType"
                              | "reinvestmentValue"
                              | "taxableInterestIncome"
                            >
                          >;
                          qualifiedForeignTaxPaid?: Maybe<
                            {
                              __typename?: "FundDistribution";
                            } & Pick<
                              FundDistribution,
                              | "accountingDate"
                              | "exDate"
                              | "exValue"
                              | "paymentDate"
                              | "recordDate"
                              | "reinvestmentDate"
                              | "reinvestmentType"
                              | "reinvestmentValue"
                              | "taxableInterestIncome"
                            >
                          >;
                        }
                      >;
                      income?: Maybe<
                        {
                          __typename?: "IncomeDistributions";
                        } & {
                          aggregateAccrual?: Maybe<
                            {
                              __typename?: "FundDistribution";
                            } & Pick<
                              FundDistribution,
                              | "accountingDate"
                              | "exDate"
                              | "exValue"
                              | "paymentDate"
                              | "recordDate"
                              | "reinvestmentDate"
                              | "reinvestmentType"
                              | "reinvestmentValue"
                              | "taxableInterestIncome"
                            >
                          >;
                          exemptIncome?: Maybe<
                            {
                              __typename?: "FundDistribution";
                            } & Pick<
                              FundDistribution,
                              | "accountingDate"
                              | "exDate"
                              | "exValue"
                              | "paymentDate"
                              | "recordDate"
                              | "reinvestmentDate"
                              | "reinvestmentType"
                              | "reinvestmentValue"
                              | "taxableInterestIncome"
                            >
                          >;
                          incomeDividend?: Maybe<
                            {
                              __typename?: "FundDistribution";
                            } & Pick<
                              FundDistribution,
                              | "accountingDate"
                              | "exDate"
                              | "exValue"
                              | "paymentDate"
                              | "recordDate"
                              | "reinvestmentDate"
                              | "reinvestmentType"
                              | "reinvestmentValue"
                              | "taxableInterestIncome"
                            >
                          >;
                          interestIncome?: Maybe<
                            {
                              __typename?: "FundDistribution";
                            } & Pick<
                              FundDistribution,
                              | "accountingDate"
                              | "exDate"
                              | "exValue"
                              | "paymentDate"
                              | "recordDate"
                              | "reinvestmentDate"
                              | "reinvestmentType"
                              | "reinvestmentValue"
                              | "taxableInterestIncome"
                            >
                          >;
                          nonQualifiedIncomeDividend?: Maybe<
                            {
                              __typename?: "FundDistribution";
                            } & Pick<
                              FundDistribution,
                              | "accountingDate"
                              | "exDate"
                              | "exValue"
                              | "paymentDate"
                              | "recordDate"
                              | "reinvestmentDate"
                              | "reinvestmentType"
                              | "reinvestmentValue"
                              | "taxableInterestIncome"
                            >
                          >;
                          qualifiedIncomeDividend?: Maybe<
                            {
                              __typename?: "FundDistribution";
                            } & Pick<
                              FundDistribution,
                              | "accountingDate"
                              | "exDate"
                              | "exValue"
                              | "paymentDate"
                              | "recordDate"
                              | "reinvestmentDate"
                              | "reinvestmentType"
                              | "reinvestmentValue"
                              | "taxableInterestIncome"
                            >
                          >;
                        }
                      >;
                      repaymentCategory?: Maybe<
                        {
                          __typename?: "RepaymentCategoryDistributions";
                        } & {
                          bonusIssue?: Maybe<
                            {
                              __typename?: "FundDistribution";
                            } & Pick<
                              FundDistribution,
                              | "accountingDate"
                              | "exDate"
                              | "exValue"
                              | "paymentDate"
                              | "recordDate"
                              | "reinvestmentDate"
                              | "reinvestmentType"
                              | "reinvestmentValue"
                              | "taxableInterestIncome"
                            >
                          >;
                          factor?: Maybe<
                            {
                              __typename?: "FundDistribution";
                            } & Pick<
                              FundDistribution,
                              | "accountingDate"
                              | "exDate"
                              | "exValue"
                              | "paymentDate"
                              | "recordDate"
                              | "reinvestmentDate"
                              | "reinvestmentType"
                              | "reinvestmentValue"
                              | "taxableInterestIncome"
                            >
                          >;
                          repayment?: Maybe<
                            {
                              __typename?: "FundDistribution";
                            } & Pick<
                              FundDistribution,
                              | "accountingDate"
                              | "exDate"
                              | "exValue"
                              | "paymentDate"
                              | "recordDate"
                              | "reinvestmentDate"
                              | "reinvestmentType"
                              | "reinvestmentValue"
                              | "taxableInterestIncome"
                            >
                          >;
                          rightsIssue?: Maybe<
                            {
                              __typename?: "FundDistribution";
                            } & Pick<
                              FundDistribution,
                              | "accountingDate"
                              | "exDate"
                              | "exValue"
                              | "paymentDate"
                              | "recordDate"
                              | "reinvestmentDate"
                              | "reinvestmentType"
                              | "reinvestmentValue"
                              | "taxableInterestIncome"
                            >
                          >;
                          split?: Maybe<
                            {
                              __typename?: "FundDistribution";
                            } & Pick<
                              FundDistribution,
                              | "accountingDate"
                              | "exDate"
                              | "exValue"
                              | "paymentDate"
                              | "recordDate"
                              | "reinvestmentDate"
                              | "reinvestmentType"
                              | "reinvestmentValue"
                              | "taxableInterestIncome"
                            >
                          >;
                        }
                      >;
                    }
                  >;
                  fees?: Maybe<
                    {
                      __typename?: "Fees";
                    } & Pick<
                      Fees,
                      | "backLoad"
                      | "frontLoad"
                      | "fundExpenseRatio"
                      | "managementFee"
                      | "marketing12b1Fee"
                      | "performanceFee"
                    >
                  >;
                  focus?: Maybe<
                    {
                      __typename?: "Focus";
                    } & Pick<Focus, "assetClassFocus" | "geoFocus">
                  >;
                  scores?: Maybe<
                    {
                      __typename?: "Scores6";
                    } & {
                      consistentReturn?: Maybe<
                        {
                          __typename?: "Score";
                        } & Pick<
                          Score,
                          "fiveYear" | "overall" | "tenYear" | "threeYear"
                        >
                      >;
                      expense?: Maybe<
                        {
                          __typename?: "Score";
                        } & Pick<
                          Score,
                          "fiveYear" | "overall" | "tenYear" | "threeYear"
                        >
                      >;
                      preservation?: Maybe<
                        {
                          __typename?: "Score";
                        } & Pick<
                          Score,
                          "fiveYear" | "overall" | "tenYear" | "threeYear"
                        >
                      >;
                      taxEfficiency?: Maybe<
                        {
                          __typename?: "Score";
                        } & Pick<
                          Score,
                          "fiveYear" | "overall" | "tenYear" | "threeYear"
                        >
                      >;
                      totalReturn?: Maybe<
                        {
                          __typename?: "Score";
                        } & Pick<
                          Score,
                          "fiveYear" | "overall" | "tenYear" | "threeYear"
                        >
                      >;
                    }
                  >;
                  yields?: Maybe<
                    {
                      __typename?: "FundYields";
                    } & Pick<
                      FundYields,
                      | "dailySecYield"
                      | "dailySecYieldDate"
                      | "distributionYield"
                      | "dividendYield"
                      | "lipperDistributionYield"
                      | "projectedYield"
                      | "secYield"
                      | "simpleYieldBegin"
                      | "simpleYieldEnd"
                      | "thirtyDayYield"
                      | "trailingTwelveMonthYield"
                    >
                  >;
                }
            >;
            identifiers?: Maybe<
              {
                __typename?: "Identifiers";
              } & Pick<
                Identifiers,
                | "apex"
                | "bbGlobal"
                | "cik"
                | "cins"
                | "cusip"
                | "isin"
                | "primaryTicker"
                | "refinitivAssetId"
                | "refinitivIssuePermId"
                | "refinitivLipperId"
                | "refinitivLipperParentId"
                | "refinitivLipperPermId"
                | "sedol"
                | "valoren"
              >
            >;
            legalEntity?: Maybe<
              {
                __typename?: "LegalEntity";
              } & Pick<
                LegalEntity,
                | "issuingLegalEntityId"
                | "ultimateObligor"
                | "ultimateObligorId"
                | "ultimateParent"
                | "ultimateParentId"
                | "ultimateParentTickerExchange"
              >
            >;
            priceQuotes?: Maybe<
              Array<
                Maybe<
                  {
                    __typename?: "PriceQuote";
                  } & Pick<
                    PriceQuote,
                    | "accruedInterest"
                    | "askPrice"
                    | "askYield"
                    | "assetSwapSpread"
                    | "benchmarkSpread"
                    | "bidPrice"
                    | "bidYield"
                    | "cbeYieldToMaturity"
                    | "cbeYieldToWorst"
                    | "closePrice"
                    | "date"
                    | "highPrice"
                    | "lowPrice"
                    | "openPrice"
                    | "price"
                    | "source"
                    | "swapSpread"
                    | "volume"
                    | "yieldToMaturity"
                    | "yieldToWorst"
                    | "zSpread"
                  >
                >
              >
            >;
            scores?: Maybe<
              {
                __typename?: "RoverScores";
              } & Pick<
                RoverScores,
                | "attractiveness"
                | "credit"
                | "efficiency"
                | "liquidity"
                | "risk"
                | "timestamp"
              >
            >;
            universes?: Maybe<
              {
                __typename?: "Universes";
              } & Pick<
                Universes,
                "custom" | "general" | "liquid" | "search" | "timestamp"
              >
            >;
          }
      >;
    }
  >;
};
export type RoverUniverseGetAssetTimeSeriesQueryVariables = Exact<{
  endDate: Scalars["String"];
  field: Scalars["String"];
  id: Scalars["String"];
  startDate: Scalars["String"];
}>;
export type RoverUniverseGetAssetTimeSeriesQuery = {
  __typename?: "Query";
} & {
  roverUniverseGetAssetTimeSeries?: Maybe<
    {
      __typename?: "GetAssetTimeSeriesResponse";
    } & Pick<GetAssetTimeSeriesResponse, "assetId" | "field"> & {
        data: Array<
          Maybe<
            {
              __typename?: "TimeSeriesDatum";
            } & Pick<TimeSeriesDatum, "timestamp" | "value">
          >
        >;
      }
  >;
};
export type RoverUniverseGetAssetsQueryVariables = Exact<{
  getAssetsRequestInput?: Maybe<GetAssetsRequestInput>;
}>;
export type RoverUniverseGetAssetsQuery = {
  __typename?: "Query";
} & {
  roverUniverseGetAssets?: Maybe<
    {
      __typename?: "GetAssetsResponse";
    } & {
      assets: Array<
        Maybe<
          {
            __typename?: "Asset5";
          } & Pick<
            Asset5,
            | "assetSubtype"
            | "assetType"
            | "country"
            | "createdAt"
            | "createdBy"
            | "currency"
            | "description"
            | "displayId"
            | "id"
            | "liquid"
            | "market"
            | "metadata"
            | "name"
            | "price"
            | "priceDate"
            | "primaryExchange"
            | "primaryExchangeMic"
            | "rating"
            | "ticker"
            | "unit"
            | "updatedAt"
            | "updatedBy"
          > & {
              allocation?: Maybe<
                {
                  __typename?: "Allocation7";
                } & Pick<Allocation7, "country" | "currency"> & {
                    debtType?: Maybe<
                      {
                        __typename?: "DebtTypeAllocation2";
                      } & Pick<
                        DebtTypeAllocation2,
                        | "assetBackedSecurities"
                        | "bonds"
                        | "debentures"
                        | "mortgageBackedSecurities"
                        | "municipalBonds"
                        | "notes"
                        | "other"
                        | "preferredStock"
                        | "supranationalBonds"
                      >
                    >;
                    maturity?: Maybe<
                      {
                        __typename?: "MaturityAllocation";
                      } & Pick<
                        MaturityAllocation,
                        | "fiveToTenYears"
                        | "greaterThanThirtyYears"
                        | "lessThanOneYear"
                        | "oneToThreeYears"
                        | "other"
                        | "tenToTwentyYears"
                        | "threeToFiveYears"
                        | "twentyToThirtyYears"
                      >
                    >;
                    rating?: Maybe<
                      {
                        __typename?: "RatingAllocation2";
                      } & Pick<
                        RatingAllocation2,
                        | "a"
                        | "aa"
                        | "aaa"
                        | "b"
                        | "bb"
                        | "bbb"
                        | "c"
                        | "cc"
                        | "ccc"
                        | "d"
                        | "nr"
                      >
                    >;
                    region?: Maybe<
                      {
                        __typename?: "RegionAllocation";
                      } & Pick<
                        RegionAllocation,
                        | "africaExNorthAfrica"
                        | "asiaPacificExJapan"
                        | "emergingMarketsAsia"
                        | "emergingMarketsEurope"
                        | "europeExUnitedKingdom"
                        | "japan"
                        | "latinAmerica"
                        | "middleEastNorthAfrica"
                        | "northAmericaExUnitedStates"
                        | "other"
                        | "unitedKingdom"
                        | "unitedStates"
                      >
                    >;
                    sector?: Maybe<
                      {
                        __typename?: "SectorAllocation";
                      } & Pick<
                        SectorAllocation,
                        | "agency"
                        | "communications"
                        | "consumerGoods"
                        | "energy"
                        | "financials"
                        | "manufacturing"
                        | "municipal"
                        | "other"
                        | "services"
                        | "sovereign"
                        | "supranational"
                        | "transportation"
                      >
                    >;
                  }
              >;
              analytics?: Maybe<
                {
                  __typename?: "Analytics";
                } & Pick<
                  Analytics,
                  | "convexity"
                  | "creditBeta"
                  | "currentYield"
                  | "date"
                  | "defaultAdjustedYield"
                  | "distributionYield"
                  | "dividendYield"
                  | "duration"
                  | "effectiveDuration"
                  | "gSpread"
                  | "optionAdjustedSpread"
                  | "recoveryRate"
                  | "secYield"
                  | "source"
                  | "spreadDuration"
                  | "standaloneRisk"
                  | "yearsToMaturity"
                  | "yield"
                  | "yieldToCall"
                  | "yieldToMaturity"
                  | "yieldToWorst"
                  | "zSpread"
                >
              >;
              bond?: Maybe<
                {
                  __typename?: "Bond4";
                } & Pick<
                  Bond4,
                  | "accruedInterest"
                  | "active"
                  | "amountOutstanding"
                  | "amountOutstandingDate"
                  | "annuity"
                  | "assetStatus"
                  | "callType"
                  | "callable"
                  | "capType"
                  | "cleanPrice"
                  | "cleanUpCallable"
                  | "convertible"
                  | "countryOfIssue"
                  | "couponClass"
                  | "couponType"
                  | "covered"
                  | "creationUnit"
                  | "currentCoupon"
                  | "datedDate"
                  | "dayCount"
                  | "debtServiceType"
                  | "defeasable"
                  | "denominationIncrement"
                  | "dirtyPrice"
                  | "dualCurrency"
                  | "exDividendCalendarAdjustment"
                  | "exDividendCalendarAdjustmentValue"
                  | "exchangeListed"
                  | "firstCouponDate"
                  | "floating"
                  | "green"
                  | "guaranteed"
                  | "hasWarrantsAttached"
                  | "inflationProtected"
                  | "instrumentType"
                  | "issueCurrency"
                  | "issueDate"
                  | "lastCouponDate"
                  | "lastLiquidEtfConstituentDate"
                  | "maturityDate"
                  | "mediumTermNote"
                  | "minimumDenomination"
                  | "nearestCallPeriodEndDate"
                  | "nearestCallPeriodStartDate"
                  | "nearestCallPrice"
                  | "nextResetDate"
                  | "ordinaryCallNoticePeriodMaximumAmount"
                  | "ordinaryCallNoticePeriodMinimumAmount"
                  | "ordinaryCallNoticePeriodUnits"
                  | "ordinaryCallOptionType"
                  | "ordinaryCallable"
                  | "originalAmountIssued"
                  | "originalBenchmark"
                  | "originalIssuePrice"
                  | "originalIssueSpread"
                  | "originalYieldToMaturity"
                  | "parValue"
                  | "partlyPaid"
                  | "payableInKind"
                  | "performing"
                  | "perpetual"
                  | "priceQuoteConvention"
                  | "priceQuoteMethod"
                  | "priceQuoteRoundingMethod"
                  | "principalCurrency"
                  | "private144a"
                  | "privatePlacement"
                  | "puttable"
                  | "quotedDirty"
                  | "recordDateCalendarAdjustment"
                  | "recordDateCalendarAdjustmentValue"
                  | "redemptionValue"
                  | "seniority"
                  | "series"
                  | "sinkingOrAmortizing"
                  | "sovereignClass"
                  | "state"
                  | "stateTaxExempt"
                  | "straight"
                  | "strippable"
                  | "subjectToAlternativeMinimumTax"
                  | "totalAmountIssued"
                  | "unitedStatesTaxExempt"
                  | "useOfProceeds"
                  | "withholdingTax"
                > & {
                    classifications?: Maybe<
                      {
                        __typename?: "Classifications";
                      } & Pick<
                        Classifications,
                        | "barclaysLevel1"
                        | "barclaysLevel2"
                        | "barclaysLevel3"
                        | "barclaysLevel4"
                        | "bondhouse"
                        | "datastreamSubtype"
                        | "datastreamType"
                        | "gics"
                      >
                    >;
                    couponResetHistory?: Maybe<
                      Array<
                        Maybe<
                          {
                            __typename?: "CouponResetPeriod";
                          } & Pick<
                            CouponResetPeriod,
                            "effectiveDate" | "rate" | "rateNonAnnual"
                          >
                        >
                      >
                    >;
                    couponSchedule?: Maybe<
                      Array<
                        Maybe<
                          {
                            __typename?: "CouponPeriod";
                          } & Pick<
                            CouponPeriod,
                            | "cap"
                            | "couponClass"
                            | "couponFormula"
                            | "couponRateRoundingMethod"
                            | "dayCount"
                            | "effectiveDate"
                            | "floor"
                            | "indexDescription"
                            | "indexHolidayCalendar"
                            | "numberCutOffDays"
                            | "paymentBusinessDayRule"
                            | "paymentCalendarAdjustment"
                            | "paymentCalendarAdjustmentValue"
                            | "paymentCurrency"
                            | "paymentFrequency"
                            | "paymentHolidayCalendar"
                            | "resetBusinessDayRule"
                            | "resetCalendarAdjustment"
                            | "resetCalendarAdjustmentValue"
                            | "resetFrequency"
                            | "resetHolidayCalendar"
                          >
                        >
                      >
                    >;
                    creditEnhancement?: Maybe<
                      {
                        __typename?: "CreditEnhancement";
                      } & Pick<
                        CreditEnhancement,
                        | "additionalCreditType"
                        | "crossDefaultForGuarantor"
                        | "enhancementEffectiveDate"
                        | "enhancementEndDate"
                        | "enhancementLegNumber"
                        | "escrowAccount"
                        | "eventsofDefaultforGuarantor"
                        | "guarantee"
                        | "guarantorPermId"
                        | "guarantorProgram"
                        | "insurance"
                        | "interestCollateralType"
                        | "letterOfCreditExpirationDate"
                        | "negativePledgeForGuarantor"
                        | "otherCovenantsForGuarantor"
                        | "percentInterestCollateralized"
                        | "percentPrincipalCollateralized"
                        | "principalCollateralType"
                      >
                    >;
                    issue?: Maybe<
                      {
                        __typename?: "Issue";
                      } & Pick<
                        Issue,
                        | "active"
                        | "id"
                        | "issueDescription"
                        | "issueIdentifier"
                        | "issuerIdentifier"
                        | "offeringDate"
                        | "offeringDescription"
                        | "private144a"
                        | "privatePlacement"
                        | "totalProgramAmount"
                      >
                    >;
                    issuer?: Maybe<
                      {
                        __typename?: "Issuer4";
                      } & Pick<
                        Issuer4,
                        | "active"
                        | "bankrupt"
                        | "country"
                        | "id"
                        | "immediateParentId"
                        | "legalName"
                        | "longName"
                        | "sector"
                        | "shortName"
                        | "sovereignClass"
                        | "subsector"
                        | "ticker"
                        | "ultimateParentId"
                        | "url"
                      > & {
                          headquartersAddress?: Maybe<
                            {
                              __typename?: "Address2";
                            } & Pick<
                              Address2,
                              | "cityOrTown"
                              | "country"
                              | "stateOrCountyOrRegion"
                              | "street1"
                              | "street2"
                              | "street3"
                              | "zipCode"
                            >
                          >;
                          ratings?: Maybe<
                            {
                              __typename?: "IssuerRatings";
                            } & {
                              snpLongTerm?: Maybe<
                                {
                                  __typename?: "Rating3";
                                } & Pick<
                                  Rating3,
                                  "effectiveDate" | "rank" | "rating"
                                >
                              >;
                              snpSeniorSecured?: Maybe<
                                {
                                  __typename?: "Rating3";
                                } & Pick<
                                  Rating3,
                                  "effectiveDate" | "rank" | "rating"
                                >
                              >;
                              snpSeniorUnsecured?: Maybe<
                                {
                                  __typename?: "Rating3";
                                } & Pick<
                                  Rating3,
                                  "effectiveDate" | "rank" | "rating"
                                >
                              >;
                              snpShortTerm?: Maybe<
                                {
                                  __typename?: "Rating3";
                                } & Pick<
                                  Rating3,
                                  "effectiveDate" | "rank" | "rating"
                                >
                              >;
                              snpSubordinated?: Maybe<
                                {
                                  __typename?: "Rating3";
                                } & Pick<
                                  Rating3,
                                  "effectiveDate" | "rank" | "rating"
                                >
                              >;
                            }
                          >;
                          registeredAddress?: Maybe<
                            {
                              __typename?: "Address2";
                            } & Pick<
                              Address2,
                              | "cityOrTown"
                              | "country"
                              | "stateOrCountyOrRegion"
                              | "street1"
                              | "street2"
                              | "street3"
                              | "zipCode"
                            >
                          >;
                        }
                    >;
                    liquidityCriteria?: Maybe<
                      {
                        __typename?: "BondLiquidityCriteria";
                      } & Pick<
                        BondLiquidityCriteria,
                        "hasAdequateQuotes" | "liquidityCriteriaDate"
                      >
                    >;
                    marketData?: Maybe<
                      {
                        __typename?: "MarketData2";
                      } & {
                        ejv?: Maybe<
                          {
                            __typename?: "MarketQuote";
                          } & Pick<
                            MarketQuote,
                            | "accruedInterest"
                            | "askPrice"
                            | "askYield"
                            | "assetSwapSpread"
                            | "benchmarkSpread"
                            | "bidPrice"
                            | "bidYield"
                            | "cbeYieldToMaturity"
                            | "cbeYieldToWorst"
                            | "closePrice"
                            | "date"
                            | "highPrice"
                            | "lowPrice"
                            | "openPrice"
                            | "price"
                            | "source"
                            | "swapSpread"
                            | "volume"
                            | "yieldToMaturity"
                            | "yieldToWorst"
                            | "zSpread"
                          >
                        >;
                      }
                    >;
                    richCheap?: Maybe<
                      {
                        __typename?: "RichCheap";
                      } & Pick<
                        RichCheap,
                        "effectiveDate" | "interquartileRange" | "richCheapBps"
                      >
                    >;
                  }
              >;
              equity?: Maybe<
                {
                  __typename?: "Equity";
                } & Pick<
                  Equity,
                  | "eps"
                  | "marketCap"
                  | "peRatio"
                  | "shareClass"
                  | "tradeLotRoundSize"
                  | "tradeLotSize"
                >
              >;
              esgScores?: Maybe<
                {
                  __typename?: "EsgScores2";
                } & Pick<
                  EsgScores2,
                  | "environmental"
                  | "governance"
                  | "social"
                  | "timestamp"
                  | "total"
                >
              >;
              fund?: Maybe<
                {
                  __typename?: "Fund4";
                } & Pick<
                  Fund4,
                  | "assetStatus"
                  | "benchmark"
                  | "classification"
                  | "fundType"
                  | "inceptionDate"
                  | "institutional"
                  | "managementCompany"
                  | "midPrice"
                  | "netAssetValuePerShare"
                  | "netAssets"
                  | "netAssetsDate"
                  | "priceDate"
                  | "regulatoryStructure"
                  | "replicationStrategy"
                  | "tradeLotSize"
                > & {
                    allocation?: Maybe<
                      {
                        __typename?: "FundAllocation";
                      } & Pick<
                        FundAllocation,
                        "currency" | "equityCountry" | "fixedIncomeCountry"
                      > & {
                          asset?: Maybe<
                            {
                              __typename?: "AssetAllocation";
                            } & Pick<
                              AssetAllocation,
                              "cash" | "equity" | "fixedIncome" | "other"
                            >
                          >;
                          equityRegion?: Maybe<
                            {
                              __typename?: "RegionAllocation";
                            } & Pick<
                              RegionAllocation,
                              | "africaExNorthAfrica"
                              | "asiaPacificExJapan"
                              | "emergingMarketsAsia"
                              | "emergingMarketsEurope"
                              | "europeExUnitedKingdom"
                              | "japan"
                              | "latinAmerica"
                              | "middleEastNorthAfrica"
                              | "northAmericaExUnitedStates"
                              | "other"
                              | "unitedKingdom"
                              | "unitedStates"
                            >
                          >;
                          fixedIncomeRegion?: Maybe<
                            {
                              __typename?: "RegionAllocation";
                            } & Pick<
                              RegionAllocation,
                              | "africaExNorthAfrica"
                              | "asiaPacificExJapan"
                              | "emergingMarketsAsia"
                              | "emergingMarketsEurope"
                              | "europeExUnitedKingdom"
                              | "japan"
                              | "latinAmerica"
                              | "middleEastNorthAfrica"
                              | "northAmericaExUnitedStates"
                              | "other"
                              | "unitedKingdom"
                              | "unitedStates"
                            >
                          >;
                          gicsSubIndustry?: Maybe<
                            {
                              __typename?: "GicsSubIndustryAllocation";
                            } & Pick<
                              GicsSubIndustryAllocation,
                              | "communicationServices"
                              | "consumerDiscretionary"
                              | "consumerStaples"
                              | "energy"
                              | "financials"
                              | "healthCare"
                              | "industrials"
                              | "informationTechnology"
                              | "materials"
                              | "other"
                              | "realEstate"
                              | "utilities"
                            >
                          >;
                          trbcIndustry?: Maybe<
                            {
                              __typename?: "TrbcIndustryAllocation";
                            } & Pick<
                              TrbcIndustryAllocation,
                              | "basicMaterials"
                              | "consumerCyclicals"
                              | "consumerNonCyclicals"
                              | "energy"
                              | "financials"
                              | "healthcare"
                              | "industrials"
                              | "other"
                              | "technology"
                              | "telecommunicationsServices"
                              | "utilities"
                            >
                          >;
                        }
                    >;
                    apexSupport?: Maybe<
                      {
                        __typename?: "ApexSupport";
                      } & Pick<ApexSupport, "supportDate" | "supported">
                    >;
                    distributions?: Maybe<
                      {
                        __typename?: "FundDistributions";
                      } & {
                        capitalGain?: Maybe<
                          {
                            __typename?: "CapitalGainDistributions";
                          } & {
                            capitalGain?: Maybe<
                              {
                                __typename?: "FundDistribution";
                              } & Pick<
                                FundDistribution,
                                | "accountingDate"
                                | "exDate"
                                | "exValue"
                                | "paymentDate"
                                | "recordDate"
                                | "reinvestmentDate"
                                | "reinvestmentType"
                                | "reinvestmentValue"
                                | "taxableInterestIncome"
                              >
                            >;
                            collectibles?: Maybe<
                              {
                                __typename?: "FundDistribution";
                              } & Pick<
                                FundDistribution,
                                | "accountingDate"
                                | "exDate"
                                | "exValue"
                                | "paymentDate"
                                | "recordDate"
                                | "reinvestmentDate"
                                | "reinvestmentType"
                                | "reinvestmentValue"
                                | "taxableInterestIncome"
                              >
                            >;
                            longTermCapitalGain?: Maybe<
                              {
                                __typename?: "FundDistribution";
                              } & Pick<
                                FundDistribution,
                                | "accountingDate"
                                | "exDate"
                                | "exValue"
                                | "paymentDate"
                                | "recordDate"
                                | "reinvestmentDate"
                                | "reinvestmentType"
                                | "reinvestmentValue"
                                | "taxableInterestIncome"
                              >
                            >;
                            mediumTermCapitalGain?: Maybe<
                              {
                                __typename?: "FundDistribution";
                              } & Pick<
                                FundDistribution,
                                | "accountingDate"
                                | "exDate"
                                | "exValue"
                                | "paymentDate"
                                | "recordDate"
                                | "reinvestmentDate"
                                | "reinvestmentType"
                                | "reinvestmentValue"
                                | "taxableInterestIncome"
                              >
                            >;
                            nonQualifiedShortTermCapitalGain?: Maybe<
                              {
                                __typename?: "FundDistribution";
                              } & Pick<
                                FundDistribution,
                                | "accountingDate"
                                | "exDate"
                                | "exValue"
                                | "paymentDate"
                                | "recordDate"
                                | "reinvestmentDate"
                                | "reinvestmentType"
                                | "reinvestmentValue"
                                | "taxableInterestIncome"
                              >
                            >;
                            qualifiedShortTermCapitalGain?: Maybe<
                              {
                                __typename?: "FundDistribution";
                              } & Pick<
                                FundDistribution,
                                | "accountingDate"
                                | "exDate"
                                | "exValue"
                                | "paymentDate"
                                | "recordDate"
                                | "reinvestmentDate"
                                | "reinvestmentType"
                                | "reinvestmentValue"
                                | "taxableInterestIncome"
                              >
                            >;
                            returnOfCapital?: Maybe<
                              {
                                __typename?: "FundDistribution";
                              } & Pick<
                                FundDistribution,
                                | "accountingDate"
                                | "exDate"
                                | "exValue"
                                | "paymentDate"
                                | "recordDate"
                                | "reinvestmentDate"
                                | "reinvestmentType"
                                | "reinvestmentValue"
                                | "taxableInterestIncome"
                              >
                            >;
                            shortTermCapitalGain?: Maybe<
                              {
                                __typename?: "FundDistribution";
                              } & Pick<
                                FundDistribution,
                                | "accountingDate"
                                | "exDate"
                                | "exValue"
                                | "paymentDate"
                                | "recordDate"
                                | "reinvestmentDate"
                                | "reinvestmentType"
                                | "reinvestmentValue"
                                | "taxableInterestIncome"
                              >
                            >;
                            superLongTermCapitalGain?: Maybe<
                              {
                                __typename?: "FundDistribution";
                              } & Pick<
                                FundDistribution,
                                | "accountingDate"
                                | "exDate"
                                | "exValue"
                                | "paymentDate"
                                | "recordDate"
                                | "reinvestmentDate"
                                | "reinvestmentType"
                                | "reinvestmentValue"
                                | "taxableInterestIncome"
                              >
                            >;
                          }
                        >;
                        foreignTaxCredit?: Maybe<
                          {
                            __typename?: "ForeignTaxCreditDistributions";
                          } & {
                            foreignTaxCredit?: Maybe<
                              {
                                __typename?: "FundDistribution";
                              } & Pick<
                                FundDistribution,
                                | "accountingDate"
                                | "exDate"
                                | "exValue"
                                | "paymentDate"
                                | "recordDate"
                                | "reinvestmentDate"
                                | "reinvestmentType"
                                | "reinvestmentValue"
                                | "taxableInterestIncome"
                              >
                            >;
                            nonQualifiedForeignTaxPaid?: Maybe<
                              {
                                __typename?: "FundDistribution";
                              } & Pick<
                                FundDistribution,
                                | "accountingDate"
                                | "exDate"
                                | "exValue"
                                | "paymentDate"
                                | "recordDate"
                                | "reinvestmentDate"
                                | "reinvestmentType"
                                | "reinvestmentValue"
                                | "taxableInterestIncome"
                              >
                            >;
                            qualifiedForeignTaxPaid?: Maybe<
                              {
                                __typename?: "FundDistribution";
                              } & Pick<
                                FundDistribution,
                                | "accountingDate"
                                | "exDate"
                                | "exValue"
                                | "paymentDate"
                                | "recordDate"
                                | "reinvestmentDate"
                                | "reinvestmentType"
                                | "reinvestmentValue"
                                | "taxableInterestIncome"
                              >
                            >;
                          }
                        >;
                        income?: Maybe<
                          {
                            __typename?: "IncomeDistributions";
                          } & {
                            aggregateAccrual?: Maybe<
                              {
                                __typename?: "FundDistribution";
                              } & Pick<
                                FundDistribution,
                                | "accountingDate"
                                | "exDate"
                                | "exValue"
                                | "paymentDate"
                                | "recordDate"
                                | "reinvestmentDate"
                                | "reinvestmentType"
                                | "reinvestmentValue"
                                | "taxableInterestIncome"
                              >
                            >;
                            exemptIncome?: Maybe<
                              {
                                __typename?: "FundDistribution";
                              } & Pick<
                                FundDistribution,
                                | "accountingDate"
                                | "exDate"
                                | "exValue"
                                | "paymentDate"
                                | "recordDate"
                                | "reinvestmentDate"
                                | "reinvestmentType"
                                | "reinvestmentValue"
                                | "taxableInterestIncome"
                              >
                            >;
                            incomeDividend?: Maybe<
                              {
                                __typename?: "FundDistribution";
                              } & Pick<
                                FundDistribution,
                                | "accountingDate"
                                | "exDate"
                                | "exValue"
                                | "paymentDate"
                                | "recordDate"
                                | "reinvestmentDate"
                                | "reinvestmentType"
                                | "reinvestmentValue"
                                | "taxableInterestIncome"
                              >
                            >;
                            interestIncome?: Maybe<
                              {
                                __typename?: "FundDistribution";
                              } & Pick<
                                FundDistribution,
                                | "accountingDate"
                                | "exDate"
                                | "exValue"
                                | "paymentDate"
                                | "recordDate"
                                | "reinvestmentDate"
                                | "reinvestmentType"
                                | "reinvestmentValue"
                                | "taxableInterestIncome"
                              >
                            >;
                            nonQualifiedIncomeDividend?: Maybe<
                              {
                                __typename?: "FundDistribution";
                              } & Pick<
                                FundDistribution,
                                | "accountingDate"
                                | "exDate"
                                | "exValue"
                                | "paymentDate"
                                | "recordDate"
                                | "reinvestmentDate"
                                | "reinvestmentType"
                                | "reinvestmentValue"
                                | "taxableInterestIncome"
                              >
                            >;
                            qualifiedIncomeDividend?: Maybe<
                              {
                                __typename?: "FundDistribution";
                              } & Pick<
                                FundDistribution,
                                | "accountingDate"
                                | "exDate"
                                | "exValue"
                                | "paymentDate"
                                | "recordDate"
                                | "reinvestmentDate"
                                | "reinvestmentType"
                                | "reinvestmentValue"
                                | "taxableInterestIncome"
                              >
                            >;
                          }
                        >;
                        repaymentCategory?: Maybe<
                          {
                            __typename?: "RepaymentCategoryDistributions";
                          } & {
                            bonusIssue?: Maybe<
                              {
                                __typename?: "FundDistribution";
                              } & Pick<
                                FundDistribution,
                                | "accountingDate"
                                | "exDate"
                                | "exValue"
                                | "paymentDate"
                                | "recordDate"
                                | "reinvestmentDate"
                                | "reinvestmentType"
                                | "reinvestmentValue"
                                | "taxableInterestIncome"
                              >
                            >;
                            factor?: Maybe<
                              {
                                __typename?: "FundDistribution";
                              } & Pick<
                                FundDistribution,
                                | "accountingDate"
                                | "exDate"
                                | "exValue"
                                | "paymentDate"
                                | "recordDate"
                                | "reinvestmentDate"
                                | "reinvestmentType"
                                | "reinvestmentValue"
                                | "taxableInterestIncome"
                              >
                            >;
                            repayment?: Maybe<
                              {
                                __typename?: "FundDistribution";
                              } & Pick<
                                FundDistribution,
                                | "accountingDate"
                                | "exDate"
                                | "exValue"
                                | "paymentDate"
                                | "recordDate"
                                | "reinvestmentDate"
                                | "reinvestmentType"
                                | "reinvestmentValue"
                                | "taxableInterestIncome"
                              >
                            >;
                            rightsIssue?: Maybe<
                              {
                                __typename?: "FundDistribution";
                              } & Pick<
                                FundDistribution,
                                | "accountingDate"
                                | "exDate"
                                | "exValue"
                                | "paymentDate"
                                | "recordDate"
                                | "reinvestmentDate"
                                | "reinvestmentType"
                                | "reinvestmentValue"
                                | "taxableInterestIncome"
                              >
                            >;
                            split?: Maybe<
                              {
                                __typename?: "FundDistribution";
                              } & Pick<
                                FundDistribution,
                                | "accountingDate"
                                | "exDate"
                                | "exValue"
                                | "paymentDate"
                                | "recordDate"
                                | "reinvestmentDate"
                                | "reinvestmentType"
                                | "reinvestmentValue"
                                | "taxableInterestIncome"
                              >
                            >;
                          }
                        >;
                      }
                    >;
                    fees?: Maybe<
                      {
                        __typename?: "Fees";
                      } & Pick<
                        Fees,
                        | "backLoad"
                        | "frontLoad"
                        | "fundExpenseRatio"
                        | "managementFee"
                        | "marketing12b1Fee"
                        | "performanceFee"
                      >
                    >;
                    focus?: Maybe<
                      {
                        __typename?: "Focus";
                      } & Pick<Focus, "assetClassFocus" | "geoFocus">
                    >;
                    scores?: Maybe<
                      {
                        __typename?: "Scores6";
                      } & {
                        consistentReturn?: Maybe<
                          {
                            __typename?: "Score";
                          } & Pick<
                            Score,
                            "fiveYear" | "overall" | "tenYear" | "threeYear"
                          >
                        >;
                        expense?: Maybe<
                          {
                            __typename?: "Score";
                          } & Pick<
                            Score,
                            "fiveYear" | "overall" | "tenYear" | "threeYear"
                          >
                        >;
                        preservation?: Maybe<
                          {
                            __typename?: "Score";
                          } & Pick<
                            Score,
                            "fiveYear" | "overall" | "tenYear" | "threeYear"
                          >
                        >;
                        taxEfficiency?: Maybe<
                          {
                            __typename?: "Score";
                          } & Pick<
                            Score,
                            "fiveYear" | "overall" | "tenYear" | "threeYear"
                          >
                        >;
                        totalReturn?: Maybe<
                          {
                            __typename?: "Score";
                          } & Pick<
                            Score,
                            "fiveYear" | "overall" | "tenYear" | "threeYear"
                          >
                        >;
                      }
                    >;
                    yields?: Maybe<
                      {
                        __typename?: "FundYields";
                      } & Pick<
                        FundYields,
                        | "dailySecYield"
                        | "dailySecYieldDate"
                        | "distributionYield"
                        | "dividendYield"
                        | "lipperDistributionYield"
                        | "projectedYield"
                        | "secYield"
                        | "simpleYieldBegin"
                        | "simpleYieldEnd"
                        | "thirtyDayYield"
                        | "trailingTwelveMonthYield"
                      >
                    >;
                  }
              >;
              identifiers?: Maybe<
                {
                  __typename?: "Identifiers";
                } & Pick<
                  Identifiers,
                  | "apex"
                  | "bbGlobal"
                  | "cik"
                  | "cins"
                  | "cusip"
                  | "isin"
                  | "primaryTicker"
                  | "refinitivAssetId"
                  | "refinitivIssuePermId"
                  | "refinitivLipperId"
                  | "refinitivLipperParentId"
                  | "refinitivLipperPermId"
                  | "sedol"
                  | "valoren"
                >
              >;
              legalEntity?: Maybe<
                {
                  __typename?: "LegalEntity";
                } & Pick<
                  LegalEntity,
                  | "issuingLegalEntityId"
                  | "ultimateObligor"
                  | "ultimateObligorId"
                  | "ultimateParent"
                  | "ultimateParentId"
                  | "ultimateParentTickerExchange"
                >
              >;
              priceQuotes?: Maybe<
                Array<
                  Maybe<
                    {
                      __typename?: "PriceQuote";
                    } & Pick<
                      PriceQuote,
                      | "accruedInterest"
                      | "askPrice"
                      | "askYield"
                      | "assetSwapSpread"
                      | "benchmarkSpread"
                      | "bidPrice"
                      | "bidYield"
                      | "cbeYieldToMaturity"
                      | "cbeYieldToWorst"
                      | "closePrice"
                      | "date"
                      | "highPrice"
                      | "lowPrice"
                      | "openPrice"
                      | "price"
                      | "source"
                      | "swapSpread"
                      | "volume"
                      | "yieldToMaturity"
                      | "yieldToWorst"
                      | "zSpread"
                    >
                  >
                >
              >;
              scores?: Maybe<
                {
                  __typename?: "RoverScores";
                } & Pick<
                  RoverScores,
                  | "attractiveness"
                  | "credit"
                  | "efficiency"
                  | "liquidity"
                  | "risk"
                  | "timestamp"
                >
              >;
              universes?: Maybe<
                {
                  __typename?: "Universes";
                } & Pick<
                  Universes,
                  "custom" | "general" | "liquid" | "search" | "timestamp"
                >
              >;
            }
        >
      >;
    }
  >;
};
export type RoverUniverseGetExternalIdMappingQueryVariables = Exact<{
  externalId: Scalars["String"];
  sourceName: Scalars["String"];
}>;
export type RoverUniverseGetExternalIdMappingQuery = {
  __typename?: "Query";
} & {
  roverUniverseGetExternalIdMapping?: Maybe<
    {
      __typename?: "GetExternalIdMappingResponse";
    } & {
      externalIdMapping: {
        __typename?: "ExternalIdMapping";
      } & Pick<
        ExternalIdMapping,
        | "assetId"
        | "createdAt"
        | "externalId"
        | "metadata"
        | "sourceName"
        | "updatedAt"
      >;
    }
  >;
};
export type RoverUniverseGetInventoryQueryVariables = Exact<{
  id: Scalars["String"];
  institutionId: Scalars["String"];
}>;
export type RoverUniverseGetInventoryQuery = {
  __typename?: "Query";
} & {
  roverUniverseGetInventory?: Maybe<
    {
      __typename?: "GetInventoryResponse";
    } & {
      inventory: {
        __typename?: "Inventory";
      } & Pick<Inventory, "app" | "assetIds" | "id" | "name" | "updatedAt">;
    }
  >;
};
export type RoverUniverseGetIssueQueryVariables = Exact<{
  id: Scalars["String"];
}>;
export type RoverUniverseGetIssueQuery = {
  __typename?: "Query";
} & {
  roverUniverseGetIssue?: Maybe<
    {
      __typename?: "GetIssueResponse";
    } & {
      issue: {
        __typename?: "Issue";
      } & Pick<
        Issue,
        | "active"
        | "id"
        | "issueDescription"
        | "issueIdentifier"
        | "issuerIdentifier"
        | "offeringDate"
        | "offeringDescription"
        | "private144a"
        | "privatePlacement"
        | "totalProgramAmount"
      >;
    }
  >;
};
export type RoverUniverseGetIssuerQueryVariables = Exact<{
  id: Scalars["String"];
}>;
export type RoverUniverseGetIssuerQuery = {
  __typename?: "Query";
} & {
  roverUniverseGetIssuer?: Maybe<
    {
      __typename?: "GetIssuerResponse";
    } & {
      issuer: {
        __typename?: "Issuer4";
      } & Pick<
        Issuer4,
        | "active"
        | "bankrupt"
        | "country"
        | "id"
        | "immediateParentId"
        | "legalName"
        | "longName"
        | "sector"
        | "shortName"
        | "sovereignClass"
        | "subsector"
        | "ticker"
        | "ultimateParentId"
        | "url"
      > & {
          headquartersAddress?: Maybe<
            {
              __typename?: "Address2";
            } & Pick<
              Address2,
              | "cityOrTown"
              | "country"
              | "stateOrCountyOrRegion"
              | "street1"
              | "street2"
              | "street3"
              | "zipCode"
            >
          >;
          ratings?: Maybe<
            {
              __typename?: "IssuerRatings";
            } & {
              snpLongTerm?: Maybe<
                {
                  __typename?: "Rating3";
                } & Pick<Rating3, "effectiveDate" | "rank" | "rating">
              >;
              snpSeniorSecured?: Maybe<
                {
                  __typename?: "Rating3";
                } & Pick<Rating3, "effectiveDate" | "rank" | "rating">
              >;
              snpSeniorUnsecured?: Maybe<
                {
                  __typename?: "Rating3";
                } & Pick<Rating3, "effectiveDate" | "rank" | "rating">
              >;
              snpShortTerm?: Maybe<
                {
                  __typename?: "Rating3";
                } & Pick<Rating3, "effectiveDate" | "rank" | "rating">
              >;
              snpSubordinated?: Maybe<
                {
                  __typename?: "Rating3";
                } & Pick<Rating3, "effectiveDate" | "rank" | "rating">
              >;
            }
          >;
          registeredAddress?: Maybe<
            {
              __typename?: "Address2";
            } & Pick<
              Address2,
              | "cityOrTown"
              | "country"
              | "stateOrCountyOrRegion"
              | "street1"
              | "street2"
              | "street3"
              | "zipCode"
            >
          >;
        };
    }
  >;
};
export type RoverWhitelistListBestFitWhitelistCandidatesQueryVariables = Exact<{
  institutionId?: Maybe<Scalars["String"]>;
}>;
export type RoverWhitelistListBestFitWhitelistCandidatesQuery = {
  __typename?: "Query";
} & {
  roverWhitelistListBestFitWhitelistCandidates?: Maybe<
    {
      __typename?: "ListBestFitWhitelistCandidatesResponse";
    } & {
      pools: Array<
        Maybe<
          {
            __typename?: "BestFitWhitelistCandidatePool";
          } & Pick<BestFitWhitelistCandidatePool, "source"> & {
              candidates: Array<
                Maybe<
                  {
                    __typename?: "BestFitWhitelistCandidate";
                  } & Pick<
                    BestFitWhitelistCandidate,
                    | "assetId"
                    | "cusip"
                    | "duration"
                    | "isin"
                    | "minimumDenomination"
                    | "name"
                    | "rating"
                    | "sector"
                    | "subsector"
                    | "ticker"
                    | "yearsToMaturity"
                    | "yield"
                  >
                >
              >;
            }
        >
      >;
    }
  >;
};
export type TrafixGetHeartbeatQueryVariables = Exact<{
  [key: string]: never;
}>;
export type TrafixGetHeartbeatQuery = {
  __typename?: "Query";
} & {
  trafixGetHeartbeat?: Maybe<
    {
      __typename?: "GetTrafixHeartbeatResponse";
    } & Pick<GetTrafixHeartbeatResponse, "heartbeat">
  >;
};
export type TrafixGetOrderQueryVariables = Exact<{
  orderId: Scalars["String"];
}>;
export type TrafixGetOrderQuery = {
  __typename?: "Query";
} & {
  trafixGetOrder?: Maybe<
    {
      __typename?: "GetTrafixOrderResponse";
    } & {
      trafixOrder: {
        __typename?: "TrafixOrder";
      } & Pick<
        TrafixOrder,
        | "assetId"
        | "createdAt"
        | "direction"
        | "fill"
        | "fullFillRequired"
        | "goodTillCancel"
        | "orderId"
        | "portfolioId"
        | "priceLimit"
        | "quantity"
        | "reason"
        | "status"
        | "ticker"
        | "trafixOrderId"
        | "updatedAt"
      >;
    }
  >;
};
export type TrafixGetTradeQueryVariables = Exact<{
  tradeId: Scalars["String"];
}>;
export type TrafixGetTradeQuery = {
  __typename?: "Query";
} & {
  trafixGetTrade?: Maybe<
    {
      __typename?: "GetTrafixTradeResponse";
    } & {
      trafixTrade: {
        __typename?: "TrafixTrade";
      } & Pick<
        TrafixTrade,
        | "assetId"
        | "createdAt"
        | "direction"
        | "executionId"
        | "orderId"
        | "portfolioId"
        | "quantity"
        | "tradeId"
        | "tradePrice"
        | "trafixOrderId"
        | "trafixTradeId"
      >;
    }
  >;
};
export type TrafixGetTradesQueryVariables = Exact<{
  orderId: Scalars["String"];
}>;
export type TrafixGetTradesQuery = {
  __typename?: "Query";
} & {
  trafixGetTrades?: Maybe<
    {
      __typename?: "GetTrafixTradesResponse";
    } & {
      trafixTrades: Array<
        Maybe<
          {
            __typename?: "TrafixTrade";
          } & Pick<
            TrafixTrade,
            | "assetId"
            | "createdAt"
            | "direction"
            | "executionId"
            | "orderId"
            | "portfolioId"
            | "quantity"
            | "tradeId"
            | "tradePrice"
            | "trafixOrderId"
            | "trafixTradeId"
          >
        >
      >;
    }
  >;
};
export type namedOperations = {
  Query: {
    apexAccountsGetAccountStatements: string;
    apexAccountsGetAchRelationship: string;
    apexAccountsGetApexAccount: string;
    apexAccountsGetApexAccountBalance: string;
    apexAccountsGetApexAccountMetadata: string;
    apexAccountsGetApexTransfer: string;
    apexAccountsGetApexTransfers: string;
    apexAccountsGetCorporateAgreementForm: string;
    apexAccountsGetEntityAccountForm: string;
    apexAccountsGetEntityDueDiligenceForm: string;
    apexAccountsGetIndividualAccountForm: string;
    apexAccountsGetInterestedPartyForm: string;
    apexAccountsGetLlcAgreementForm: string;
    apexAccountsGetOpenSketches: string;
    apexAccountsGetTradeConfirms: string;
    apexAccountsGetTrustedContactForm: string;
    apexGetAccount: string;
    apexGetAccountBalance: string;
    apexGetAccountByAccountNumber: string;
    apexGetAccountByInvestorId: string;
    apexGetAccountStatements: string;
    apexGetAccountStatementsForInvestor: string;
    apexGetAchrelationship: string;
    apexGetAchrelationships: string;
    apexGetTradeConfirm: string;
    apexGetTradeConfirmForInvestor: string;
    apexGetTradeConfirms: string;
    apexGetTradeConfirmsForInvestor: string;
    apexGetTransfer: string;
    apexGetTransfers: string;
    apexTradingGetTradePostings: string;
    apiManagerGetApicallRecord: string;
    apiManagerGetApicallRecords: string;
    apiManagerGetOrderExecutionLogs: string;
    apiManagerGetPortfolioExecutionLogs: string;
    apiManagerGetTradeExecutionLogs: string;
    awsManagerGetSearchStack: string;
    awsManagerGetSubscription: string;
    awsManagerGetTopic: string;
    bestFitGetPreferences: string;
    bondviewGetIndexBonds: string;
    bondviewLoadAllIndexBonds: string;
    fileManagementDownloadFile: string;
    fileManagementListFiles: string;
    iamAuthorizerequest: string;
    iamGetCurrentUser: string;
    iamGetInstitution: string;
    iamGetInstitutionInventoryMapping: string;
    iamGetInstitutionInvestorMapping: string;
    iamGetInstitutionPortfolioMapping: string;
    iamGetInstitutionProposalMapping: string;
    iamGetInstitutionRolesMapping: string;
    iamGetInstitutionUserMapping: string;
    iamGetInstitutionUserMappingByEmail: string;
    iamGetPasswordResetTicket: string;
    iamGetRole: string;
    iamGetRoleBinding: string;
    iamGetRoleBindings: string;
    iamGetRoleBindingsForSubject: string;
    iamGetRolesForSubject: string;
    iamGetUser: string;
    iamGetUserInvite: string;
    iamGetUserInviteList: string;
    iamValidateUserInvite: string;
    iceDataGetByCusip: string;
    incomePortfoliosGetComparisons: string;
    incomePortfoliosGetMinMaxRisk: string;
    incomePortfoliosGetMinMaxYield: string;
    incomePortfoliosGetPortfolioMapping: string;
    incomePortfoliosGetProposal: string;
    inpaasGetPortfolio: string;
    inpaasGetPortfolioMapping: string;
    inpaasGetProposal: string;
    investorDownloadFile: string;
    investorGet: string;
    investorGetDeliveryInstructionsById: string;
    investorGetLinkedBankAccount: string;
    investorGetLinkedBankAccountBalance: string;
    investorGetLinkedBankAccounts: string;
    investorGetPortfolioDeliveryInstruction: string;
    investorGetTransfer: string;
    investorGetTransfers: string;
    investorGets: string;
    investorInteralGet: string;
    investorInternalGetLinkedBankAccount: string;
    linkBankAccountGetLinkedBankAccount: string;
    linkBankAccountGetLinkedBankAccountBalance: string;
    linkBankAccountGetLinkedBankAccounts: string;
    linkBankAccountInternalGetLinkedBankAccount: string;
    orderManagementGetOrder: string;
    orderManagementGetOrders: string;
    positionManagementGetCashBalance: string;
    positionManagementGetExternalPortfolio: string;
    positionManagementGetExternalPortfolios: string;
    positionManagementGetPortfolio: string;
    positionManagementGetPortfolios: string;
    positionManagementGetPortfoliosByAccount: string;
    positionManagementGetPositionsByAccount: string;
    positionManagementGetTemporaryPortfolio: string;
    positionManagementGetTrade: string;
    positionManagementGetTrades: string;
    positionManagementGetTradesByAccount: string;
    positionManagementGetTransfer: string;
    positionManagementGetTransfers: string;
    pricesPriceAsset: string;
    roverPortfolioAnalyzerAnalyzePortfolio: string;
    roverPortfolioAnalyzerCalculateIntradayReturn: string;
    roverPortfolioAnalyzerCalculateReturns: string;
    roverPortfolioAnalyzerGetAnalysis: string;
    roverPortfolioAnalyzerProjectCashFlows: string;
    roverPreferencesGetCart: string;
    roverPreferencesGetPreferences: string;
    roverPreferencesGetWatchList: string;
    roverRiskModelGetAllFactors: string;
    roverRiskModelGetAssetRisk: string;
    roverRiskModelGetFactor: string;
    roverRiskModelGetFactorTimeSeries: string;
    roverScoreGetAssetScores: string;
    roverUniverseGetAllInventories: string;
    roverUniverseGetAsset: string;
    roverUniverseGetAssetByExternalId: string;
    roverUniverseGetAssetTimeSeries: string;
    roverUniverseGetAssets: string;
    roverUniverseGetExternalIdMapping: string;
    roverUniverseGetInventory: string;
    roverUniverseGetIssue: string;
    roverUniverseGetIssuer: string;
    roverWhitelistListBestFitWhitelistCandidates: string;
    trafixGetHeartbeat: string;
    trafixGetOrder: string;
    trafixGetTrade: string;
    trafixGetTrades: string;
  };
  Mutation: {
    deleteAccountAchRelationship: string;
    deleteAccountTransfer: string;
    deleteAccountsAchRelationships: string;
    deleteAccountsTransfers: string;
    deleteExternalPortfolio: string;
    deleteInvestor: string;
    deleteInvestorLinkedBankAccount: string;
    deleteInvestorTransfer: string;
    deletePortfolioPreferences: string;
    deletePubsubStacksSubscription: string;
    deletePubsubStacksTopic: string;
    deleteRole: string;
    deleteRoleBinding: string;
    deleteSearchStack: string;
    deleteTemporaryPortfolio: string;
    deleteUser: string;
    deleteUserCart: string;
    deleteUserCartItem: string;
    deleteUserWatchlist: string;
    deleteUserWatchlistItem: string;
    patchAccount: string;
    patchAccountFormsCorporateAgreementForm: string;
    patchAccountFormsEntityAccountForm: string;
    patchAccountFormsEntityDueDiligenceForm: string;
    patchAccountFormsIndividualAccountForm: string;
    patchAccountFormsInterestedPartyForm: string;
    patchAccountFormsLlcAgreementForm: string;
    patchAccountFormsTrustedContactForm: string;
    patchAccountNumberLinkedBankAccountUpdateStatus: string;
    patchAccountStatus: string;
    patchAccounts: string;
    patchAccountsTransferCancel: string;
    patchAccountsTransferSettle: string;
    patchAsset: string;
    patchAssetsTimeSeries: string;
    patchInstitution: string;
    patchInstitutionApiCallRecord: string;
    patchInstitutionInventory: string;
    patchInstitutionsUsersEmail: string;
    patchInvestor: string;
    patchInvestorAccount: string;
    patchInvestorLinkedBankAccountStatus: string;
    patchInvestorTransferStatus: string;
    patchIssue: string;
    patchIssuer: string;
    patchOrder: string;
    patchPortfolio: string;
    patchPortfolioOrder: string;
    patchPortfolioOrderCancel: string;
    patchPortfolioTradeCancel: string;
    patchUser: string;
    patchUserBlockUser: string;
    patchUsersInvitesEmailResend: string;
    postAccountAchRelationships: string;
    postAccountFormsCorporateAgreementForm: string;
    postAccountFormsEntityAccountForm: string;
    postAccountFormsEntityDueDiligenceForm: string;
    postAccountFormsIndividualAccountForm: string;
    postAccountFormsInterestedPartyForm: string;
    postAccountFormsLlcAgreementForm: string;
    postAccountFormsTrustedContactForm: string;
    postAccountNumberLinkDirectly: string;
    postAccountNumberLinkWithPlaid: string;
    postAccountTransfers: string;
    postAccounts: string;
    postAccountsAchRelationships: string;
    postAccountsTransfers: string;
    postAccountsTransfersInternal: string;
    postAnalyses: string;
    postAnalyzeAsset: string;
    postApiCallRecordsSearch: string;
    postAssetAnalyzeAsset: string;
    postAssetCalculateIntradayReturn: string;
    postAssetProjectCashFlows: string;
    postAssets: string;
    postAssetsCalculateRisk: string;
    postAssetsCovariances: string;
    postAssetsCovariancesClearCache: string;
    postAssetsListAssetIds: string;
    postAssetsScoreAsset: string;
    postAssetsSearch: string;
    postAssetsTimeSeries: string;
    postAssetsTimeSeriesUpdateByExternalId: string;
    postAssetsUpdateByExternalId: string;
    postCalculateBetas: string;
    postCompositeDataSearch: string;
    postCusips: string;
    postExecutionLogs: string;
    postExternalIdMappingGetAssetsByExternalId: string;
    postExternalIdMappingGetExternalIdMappings: string;
    postExternalPortfolios: string;
    postFiles: string;
    postIdentityInvestigationUpload: string;
    postInstitutionApiCallRecords: string;
    postInstitutionInventories: string;
    postInstitutionInvestors: string;
    postInstitutionPortfolios: string;
    postInstitutionProposals: string;
    postInstitutionRoles: string;
    postInstitutionUsers: string;
    postInstitutionWhitelistsGenerateBestFit: string;
    postInstitutionWhitelistsGenerateMuniBestFit: string;
    postInstitutions: string;
    postInternalAccountsSearch: string;
    postInternalAchRelationshipSearch: string;
    postInternalSyncSearch: string;
    postInternalTransfersSearch: string;
    postInvestorAccount: string;
    postInvestorLinkedBankAccounts: string;
    postInvestorLinkedBankAccountsDirectly: string;
    postInvestorPortfolioInternalPortfolioFundTransfer: string;
    postInvestorPortfolios: string;
    postInvestorPortfoliosCashPortfolio: string;
    postInvestorTransfers: string;
    postInvestors: string;
    postInvestorsTransfersSearch: string;
    postOauthToken: string;
    postOptimizePortfolio: string;
    postOrders: string;
    postOrdersSearch: string;
    postPortfolioClose: string;
    postPortfolioDeliveryInstruction: string;
    postPortfolioFundTransferSettle: string;
    postPortfolioFundTransfers: string;
    postPortfolioMapping: string;
    postPortfolioOrders: string;
    postPortfolioOrdersRebalance: string;
    postPortfolioPreferences: string;
    postPortfolioTradeSettle: string;
    postPortfolioTrades: string;
    postPortfolios: string;
    postPortfoliosCalculateRisk: string;
    postPortfoliosCovariances: string;
    postPortfoliosDeliveryInstructionSearch: string;
    postPortfoliosStressScenarios: string;
    postProjectCashFlows: string;
    postProposalAccept: string;
    postProposalsMinMaxRisk: string;
    postProposalsMinMaxYield: string;
    postProposalsNew: string;
    postProposalsPortfolioRebalance: string;
    postPubsubStacksSubscription: string;
    postPubsubStacksTopic: string;
    postResetPassword: string;
    postRoleBindings: string;
    postRolePolicies: string;
    postRoles: string;
    postSearchStacks: string;
    postSketchUpload: string;
    postSuggestionsGenerateAssetSuggestions: string;
    postTemporaryPortfolios: string;
    postTicketsEmailVerification: string;
    postTicketsEmailVerifications: string;
    postTicketsLogin: string;
    postTicketsPasswordReset: string;
    postTicketsPasswordResets: string;
    postTradePostingPostExecutions: string;
    postTradesSearch: string;
    postUserCartItems: string;
    postUserResetPasswordDirectly: string;
    postUserWatchlistItem: string;
    postUsers: string;
    postUsersBlockExpiredTrialUsers: string;
    postUsersInvites: string;
    postWhitelistsGenerateBestFit: string;
    putAccountClose: string;
    putAccountReopen: string;
    putAccountsClose: string;
    putAccountsReopen: string;
    putIdentityInvestigationAction: string;
    putInvestorAccountClose: string;
    putInvestorAccountReopen: string;
    putSketchAction: string;
  };
};
