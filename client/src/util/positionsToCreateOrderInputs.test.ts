import { positionsToCreateOrderInputs } from "util/positionsToCreateOrderInputs";
import { buildMockPortfolio } from "test/utils";
import { AppType } from "@bondhouse/position-management";
import { PortfolioType } from "@bondhouse/income-portfolios";
import fund from "__mocks__/models/assets/fund";

const portfolio = buildMockPortfolio({
  appType: AppType.CUSTOM,
  portfolioType: PortfolioType.EXTERNAL
});

describe("positionsToCreateOrderInputs", () => {
  it("Should create buy orders if no original positions", () => {
    const result = positionsToCreateOrderInputs(
      portfolio.positions,
      {},
      {},
      {
        fullFillRequired: true,
        goodTillCancel: true
      }
    );
    expect(result).toEqual([
      {
        assetId: "bond",
        comment: "Generated by YieldX",
        direction: "BUY",
        fullFillRequired: true,
        goodTillCancel: true,
        metadata: {
          yield: 1
        },
        priceLimit: 107.10000000000001,
        quantity: 1,
        spotPrice: 105
      },
      {
        assetId: "fund",
        comment: "Generated by YieldX",
        direction: "BUY",
        fullFillRequired: true,
        goodTillCancel: true,
        metadata: {
          yield: 0
        },
        priceLimit: 10.0572,
        quantity: 1,
        spotPrice: 9.86
      }
    ]);
  });

  it("Should create sell orders if original position quantity was greater than new", () => {
    const result = positionsToCreateOrderInputs(
      portfolio.positions,
      {},
      {},
      {
        fullFillRequired: true,
        goodTillCancel: true
      },
      [
        {
          assetId: "fund",
          id: "fund",
          quantity: 5,
          portfolioId: "mockMultiAsset",
          quantityToMarketValueFactor: 9.86,
          marketValue: 9.86,
          weight: 0.49032283730829673,
          rating: undefined,
          minimumDenomination: 1,
          denominationIncrement: 1,
          asset: fund
        }
      ]
    );
    expect(result).toEqual([
      {
        assetId: "bond",
        comment: "Generated by YieldX",
        direction: "BUY",
        fullFillRequired: true,
        goodTillCancel: true,
        metadata: {
          yield: 1
        },
        priceLimit: 107.10000000000001,
        quantity: 1,
        spotPrice: 105
      },
      {
        assetId: "fund",
        comment: "Generated by YieldX",
        direction: "SELL",
        fullFillRequired: true,
        goodTillCancel: true,
        metadata: {
          yield: 0
        },
        priceLimit: 9.662799999999999,
        quantity: 4,
        spotPrice: 9.86
      }
    ]);
  });

  it("Should create buy orders if new position quantity was greater than old", () => {
    const mockNew = portfolio.positions.map(it => {
      if (it.assetId === "fund")
        return {
          ...it,
          quantity: 5
        };
      return it;
    });

    const result = positionsToCreateOrderInputs(
      mockNew,
      {},
      {},
      {
        fullFillRequired: true,
        goodTillCancel: true
      },
      [
        {
          assetId: "fund",
          id: "fund",
          quantity: 1,
          portfolioId: "mockMultiAsset",
          quantityToMarketValueFactor: 9.86,
          marketValue: 9.86,
          weight: 0.49032283730829673,
          rating: undefined,
          minimumDenomination: 1,
          denominationIncrement: 1,
          asset: fund
        }
      ]
    );
    expect(result).toEqual([
      {
        assetId: "bond",
        comment: "Generated by YieldX",
        direction: "BUY",
        fullFillRequired: true,
        goodTillCancel: true,
        metadata: {
          yield: 1
        },
        priceLimit: 107.10000000000001,
        quantity: 1,
        spotPrice: 105
      },
      {
        assetId: "fund",
        comment: "Generated by YieldX",
        direction: "BUY",
        fullFillRequired: true,
        goodTillCancel: true,
        metadata: {
          yield: 0
        },
        priceLimit: 10.0572,
        quantity: 4,
        spotPrice: 9.86
      }
    ]);
  });

  it("Should not create orders for positions that have same quantity in old and new positions", () => {
    const mockNew = portfolio.positions.map(it => {
      if (it.assetId === "fund")
        return {
          ...it,
          quantity: 5
        };
      return it;
    });

    const result = positionsToCreateOrderInputs(
      mockNew,
      {},
      {},
      {
        fullFillRequired: true,
        goodTillCancel: true
      },
      portfolio.positions
    );
    expect(result).toEqual([
      {
        assetId: "fund",
        comment: "Generated by YieldX",
        direction: "BUY",
        fullFillRequired: true,
        goodTillCancel: true,
        metadata: {
          yield: 0
        },
        priceLimit: 10.0572,
        quantity: 4,
        spotPrice: 9.86
      }
    ]);
  });
});
